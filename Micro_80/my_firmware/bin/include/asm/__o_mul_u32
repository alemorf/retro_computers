; Input: de:hl - value 1, stack - 32 bit value 2
; Output: de:hl - result

__o_mul_u32:
    ; save arg
    push de
    push hl
    ; result
    ld hl, 0
    ld d, h
    ld e, l
    ; 32 bits
    ld a, 32
__o_mul_u32_l0:
    ; result *= 2
    add hl, hl
    ex hl, de
    jp nc, __o_mul_u32_l2
    add hl, hl
    inc hl
    jp __o_mul_u32_l3
__o_mul_u32_l2:
    add hl, hl
__o_mul_u32_l3:
    ex hl, de

    ; arg *= 2
    push af
    push hl
    ld hl, 10 ; af, hl in stack
    add hl, sp
    ld a, (hl)
    add a
    ld (hl), a
    inc hl
    ld a, (hl)
    adc a
    ld (hl), a
    inc hl
    ld a, (hl)
    adc a
    ld (hl), a
    inc hl
    ld a, (hl)
    adc a
    ld (hl), a
    pop hl

    jp nc, __o_mul_u32_l1

    ; result += (stack)
    pop af
    pop bc
    add hl, bc
    jp nc, __o_mul_u32_l4
    inc de
__o_mul_u32_l4:
    ex (sp), hl
    ex hl, de
    add hl, de
    ex hl, de
    ex (sp), hl
    push bc
    push af

__o_mul_u32_l1:
    pop af
    dec a
    jp nz, __o_mul_u32_l0

    pop bc
    pop bc
    pop bc
    inc sp
    inc sp
    inc sp
    inc sp
    push bc
    ret
