0001   0000                 device zxspectrum48 ; It has nothing to do with ZX Spectrum 48K, it is needed for the sjasmplus compiler.
0002   0000             rst38opcode equ 56
0003   0000             rst38address equ 57
0004   0000             jumpopcode equ 63312
0005   0000             param1 equ 63313
0006   0000             param1h equ 63314
0007   0000             param2 equ 63315
0008   0000             param2h equ 63316
0009   0000             param3 equ 63317
0010   0000             param3h equ 63318
0011   0000             tapepolarity equ 63319
0012   0000             keybmode equ 63320
0013   0000             color equ 63321
0014   0000             cursor equ 63322
0015   0000             readdelay equ 63324
0016   0000             writedelay equ 63325
0017   0000             tapestartl equ 63326
0018   0000             tapestarth equ 63327
0019   0000             tapestopl equ 63328
0020   0000             tapestoph equ 63329
0021   0000             keydelay equ 63330
0022   0000             keylast equ 63331
0023   0000             keysaved equ 63332
0024   0000             regs equ 63333
0025   0000             regsp equ 63333
0026   0000             regsph equ 63334
0027   0000             regf equ 63335
0028   0000             rega equ 63336
0029   0000             regc equ 63337
0030   0000             regb equ 63338
0031   0000             rege equ 63339
0032   0000             regd equ 63340
0033   0000             regl equ 63341
0034   0000             reghl equ 63341
0035   0000             regh equ 63342
0036   0000             lastbreakaddress equ 63343
0037   0000             lastbreakaddresshigh equ 63344
0038   0000             breakcounter equ 63345
0039   0000             breakaddress equ 63346
0040   0000             breakprevbyte equ 63348
0041   0000             breakaddress2 equ 63349
0042   0000             breakprevbyte2 equ 63351
0043   0000             breakaddress3 equ 63352
0044   0000             breakprevbyte3 equ 63354
0045   0000             cmdbuffer equ 63355
0046   0000             cmdbuffer1 equ 63356
0047   0000             cmdbufferend equ 63387
0048   0000             ; 43  uint8_t rst38Opcode __address(0x38);
0049   0000             ; 44 extern uint16_t rst38Address __address(0x39);
0050   0000             ; 45 
0051   0000             ; 46 /* Переменные */
0052   0000             ; 47 extern uint8_t jumpOpcode __address(0xF750);
0053   0000             ; 48 extern uint16_t param1 __address(0xF751);
0054   0000             ; 49 extern uint8_t param1h __address(0xF752);
0055   0000             ; 50 extern uint16_t param2 __address(0xF753);
0056   0000             ; 51 extern uint8_t param2h __address(0xF754);
0057   0000             ; 52 extern uint16_t param3 __address(0xF755);
0058   0000             ; 53 extern uint8_t param3h __address(0xF756);
0059   0000             ; 54 extern uint8_t tapePolarity __address(0xF757);
0060   0000             ; 55 extern uint8_t keybMode __address(0xF758);
0061   0000             ; 56 extern uint8_t color __address(0xF759);
0062   0000             ; 57 extern uint16_t cursor __address(0xF75A);
0063   0000             ; 58 extern uint8_t readDelay __address(0xF75C);
0064   0000             ; 59 extern uint8_t writeDelay __address(0xF75D);
0065   0000             ; 60 extern uint8_t tapeStartL __address(0xF75E);
0066   0000             ; 61 extern uint8_t tapeStartH __address(0xF75F);
0067   0000             ; 62 extern uint8_t tapeStopL __address(0xF760);
0068   0000             ; 63 extern uint8_t tapeStopH __address(0xF761);
0069   0000             ; 64 extern uint8_t keyDelay __address(0xF762);
0070   0000             ; 65 extern uint8_t keyLast __address(0xF763);
0071   0000             ; 66 extern uint8_t keySaved __address(0xF764);
0072   0000             ; 67 extern uint16_t regs __address(0xF765);
0073   0000             ; 68 extern uint16_t regSP __address(0xF765);
0074   0000             ; 69 extern uint8_t regSPH __address(0xF766);
0075   0000             ; 70 extern uint16_t regF __address(0xF767);
0076   0000             ; 71 extern uint16_t regA __address(0xF768);
0077   0000             ; 72 extern uint16_t regC __address(0xF769);
0078   0000             ; 73 extern uint16_t regB __address(0xF76A);
0079   0000             ; 74 extern uint16_t regE __address(0xF76B);
0080   0000             ; 75 extern uint16_t regD __address(0xF76C);
0081   0000             ; 76 extern uint16_t regL __address(0xF76D);
0082   0000             ; 77 extern uint16_t regHL __address(0xF76D);
0083   0000             ; 78 extern uint16_t regH __address(0xF76E);
0084   0000             ; 79 extern uint16_t lastBreakAddress __address(0xF76F);
0085   0000             ; 80 extern uint8_t lastBreakAddressHigh __address(0xF770);
0086   0000             ; 81 extern uint8_t breakCounter __address(0xF771);
0087   0000             ; 82 extern uint16_t breakAddress __address(0xF772);
0088   0000             ; 83 extern uint8_t breakPrevByte __address(0xF774);
0089   0000             ; 84 extern uint16_t breakAddress2 __address(0xF775);
0090   0000             ; 85 extern uint8_t breakPrevByte2 __address(0xF777);
0091   0000             ; 86 extern uint16_t breakAddress3 __address(0xF778);
0092   0000             ; 87 extern uint8_t breakPrevByte3 __address(0xF77A);
0093   0000             ; 88 extern uint8_t cmdBuffer __address(0xF77B);
0094   0000             ; 89 extern uint8_t cmdBuffer1 __address(0xF77B + 1);
0095   0000             ; 90 extern uint8_t cmdBufferEnd __address(0xF77B + 32);
0096   0000              org 0F800h
0097   F800             ; 86  EntryReboot() {
0098   F800             entryreboot: 
0099   F800             ; 87     Reboot();
0100   F800 C3 1B F8    	jp reboot
0101   F803             ; 88 }
0102   F803             ; 89 
0103   F803             ; 90 void EntryReadChar(...) {
0104   F803             entryreadchar: 
0105   F803             ; 91     ReadKey();
0106   F803 C3 AC FE    	jp readkey
0107   F806             ; 92 }
0108   F806             ; 93 
0109   F806             ; 94 void EntryReadTapeByte(...) {
0110   F806             entryreadtapebyte: 
0111   F806             ; 95     ReadTapeByte();
0112   F806 C3 FC FC    	jp readtapebyte
0113   F809             ; 96 }
0114   F809             ; 97 
0115   F809             ; 98 void EntryPrintChar(...) {
0116   F809             entryprintchar: 
0117   F809             ; 99     PrintChar();
0118   F809 C3 CD FD    	jp printchar
0119   F80C             ; 100 }
0120   F80C             ; 101 
0121   F80C             ; 102 void EntryWriteTapeByte(...) {
0122   F80C             entrywritetapebyte: 
0123   F80C             ; 103     WriteTapeByte();
0124   F80C C3 4D FD    	jp writetapebyte
0125   F80F             ; 104 }
0126   F80F             ; 105 
0127   F80F             ; 106 void EntryPrintChar2(...) {
0128   F80F             entryprintchar2: 
0129   F80F             ; 107     PrintChar();
0130   F80F C3 CD FD    	jp printchar
0131   F812             ; 108 }
0132   F812             ; 109 
0133   F812             ; 110 void EntryIsKeyPressed() {
0134   F812             entryiskeypressed: 
0135   F812             ; 111     IsKeyPressed();
0136   F812 C3 CC FF    	jp iskeypressed
0137   F815             ; 112 }
0138   F815             ; 113 
0139   F815             ; 114 void EntryPrintHexByte(...) {
0140   F815             entryprinthexbyte: 
0141   F815             ; 115     PrintHexByte();
0142   F815 C3 2F F9    	jp printhexbyte
0143   F818             ; 116 }
0144   F818             ; 117 
0145   F818             ; 118 void EntryPrintString(...) {
0146   F818             entryprintstring: 
0147   F818             ; 119     PrintString();
0148   F818 C3 A8 F8    	jp printstring
0149   F81B             ; 120 }
0150   F81B             ; 121 
0151   F81B             ; 122 void Reboot() {
0152   F81B             reboot: 
0153   F81B             ; 123     disable_interrupts();
0154   F81B F3          	di
0155   F81C             ; 124     readDelay = hl = 0x324B;
0156   F81C 21 4B 32    	ld hl, 12875
0157   F81F 22 5C F7    	ld (readdelay), hl
0158   F822             ; 125     keybMode = (a ^= a);
0159   F822 AF          	xor a
0160   F823 32 58 F7    	ld (keybmode), a
0161   F826             ; 126     a--;
0162   F826 3D          	dec a
0163   F827             ; 127     keySaved = a; /* = 0xFF */
0164   F827 32 64 F7    	ld (keysaved), a
0165   F82A             ; 128     color = a = SCREEN_ATTRIB_DEFAULT;
0166   F82A 3E 27       	ld a, 39
0167   F82C 32 59 F7    	ld (color), a
0168   F82F             ; 129     regSP = hl = USER_STACK_TOP;
0169   F82F 21 C0 F7    	ld hl, 63424
0170   F832 22 65 F7    	ld (regsp), hl
0171   F835             ; 130     sp = STACK_TOP;
0172   F835 31 FF F7    	ld sp, 63487
0173   F838             ; 131     PrintString(hl = &aHello);
0174   F838 21 AF FD    	ld hl, ahello
0175   F83B CD A8 F8    	call printstring
0176   F83E             ; 132     Monitor();
0177   F83E             ; 133 }
0178   F83E             ; 134 
0179   F83E             ; 135 void Monitor() {
0180   F83E             monitor: 
0181   F83E             ; 136     out(PORT_KEYBOARD_MODE, a = 0x8B);
0182   F83E 3E 8B       	ld a, 139
0183   F840 D3 04       	out (4), a
0184   F842             ; 137     sp = STACK_TOP;
0185   F842 31 FF F7    	ld sp, 63487
0186   F845             ; 138     color = a = SCREEN_ATTRIB_INPUT;
0187   F845 3E 23       	ld a, 35
0188   F847 32 59 F7    	ld (color), a
0189   F84A             ; 139     PrintString(hl = &aPrompt);
0190   F84A 21 C3 FD    	ld hl, aprompt
0191   F84D CD A8 F8    	call printstring
0192   F850             ; 140     ReadString();
0193   F850 CD 75 F8    	call readstring
0194   F853             ; 141     color = a = SCREEN_ATTRIB_DEFAULT;
0195   F853 3E 27       	ld a, 39
0196   F855 32 59 F7    	ld (color), a
0197   F858             ; 142     push(hl = &Monitor);
0198   F858 21 3E F8    	ld hl, 0FFFFh & (monitor)
0199   F85B E5          	push hl
0200   F85C             ; 143     MonitorExecute();
0201   F85C             ; 144 }
0202   F85C             ; 145 
0203   F85C             ; 146 void MonitorExecute() {
0204   F85C             monitorexecute: 
0205   F85C             ; 147     a = cmdBuffer;
0206   F85C 3A 7B F7    	ld a, (cmdbuffer)
0207   F85F             ; 148     a &= 0x7F; /* Lowercase support */
0208   F85F E6 7F       	and 127
0209   F861             ; 149     hl = &monitorCommands;
0210   F861 21 75 FD    	ld hl, 0FFFFh & (monitorcommands)
0211   F864             ; 150     do {
0212   F864             l_0: 
0213   F864             ; 151         b = *hl;
0214   F864 46          	ld b, (hl)
0215   F865             ; 152         b--;
0216   F865 05          	dec b
0217   F866             ; 153         b++;
0218   F866 04          	inc b
0219   F867             ; 154         if (flag_z)
0220   F867             ; 155             return MonitorError();
0221   F867 CA E7 F8    	jp z, monitorerror
0222   F86A             ; 156         hl++;
0223   F86A 23          	inc hl
0224   F86B             ; 157         e = *hl;
0225   F86B 5E          	ld e, (hl)
0226   F86C             ; 158         hl++;
0227   F86C 23          	inc hl
0228   F86D             ; 159         d = *hl;
0229   F86D 56          	ld d, (hl)
0230   F86E             ; 160         hl++;
0231   F86E 23          	inc hl
0232   F86F             l_1: 
0233   F86F             ; 161     } while (a != b);
0234   F86F B8          	cp b
0235   F870 C2 64 F8    	jp nz, l_0
0236   F873             ; 162     swap(hl, de);
0237   F873 EB          	ex hl, de
0238   F874             ; 163     return hl();
0239   F874 E9          	jp hl
0240   F875             ; 164 }
0241   F875             ; 165 
0242   F875             ; 166 void ReadString() {
0243   F875             readstring: 
0244   F875             ; 167     hl = &cmdBuffer;
0245   F875 21 7B F7    	ld hl, 0FFFFh & (cmdbuffer)
0246   F878             ; 168     d = h;
0247   F878 54          	ld d, h
0248   F879             ; 169     e = l;
0249   F879 5D          	ld e, l
0250   F87A             ; 170     for (;;) {
0251   F87A             l_4: 
0252   F87A             ; 171         ReadKey();
0253   F87A CD AC FE    	call readkey
0254   F87D             ; 172         if (a == 8) {
0255   F87D FE 08       	cp 8
0256   F87F C2 90 F8    	jp nz, l_6
0257   F882             ; 173             if ((a = e) == l)
0258   F882 7B          	ld a, e
0259   F883 BD          	cp l
0260   F884             ; 174                 continue;
0261   F884 CA 7A F8    	jp z, l_4
0262   F887             ; 175             PrintChar(c = 8);
0263   F887 0E 08       	ld c, 8
0264   F889 CD CD FD    	call printchar
0265   F88C             ; 176             hl--;
0266   F88C 2B          	dec hl
0267   F88D             ; 177             continue;
0268   F88D C3 7A F8    	jp l_4
0269   F890             l_6: 
0270   F890             ; 178         }
0271   F890             ; 179         *hl = a;
0272   F890 77          	ld (hl), a
0273   F891             ; 180         if (a == 0x0D)
0274   F891 FE 0D       	cp 13
0275   F893             ; 181             return;
0276   F893 C8          	ret z
0277   F894             ; 182         if (a < 32)
0278   F894 FE 20       	cp 32
0279   F896             ; 183             a = '.';
0280   F896 D2 9B F8    	jp nc, l_8
0281   F899 3E 2E       	ld a, 46
0282   F89B             l_8: 
0283   F89B             ; 184         PrintCharA(a);
0284   F89B CD C8 FD    	call printchara
0285   F89E             ; 185         hl++;
0286   F89E 23          	inc hl
0287   F89F             ; 186         if ((a = l) == (uintptr_t)&cmdBufferEnd)
0288   F89F 7D          	ld a, l
0289   F8A0 FE 9B       	cp 0FFFFh & (0FFFFh & (cmdbufferend))
0290   F8A2             ; 187             return MonitorError();
0291   F8A2 CA E7 F8    	jp z, monitorerror
0292   F8A5 C3 7A F8    	jp l_4
0293   F8A8             ; 188     }
0294   F8A8             ; 189 }
0295   F8A8             ; 190 
0296   F8A8             ; 191 void PrintString(...) {
0297   F8A8             printstring: 
0298   F8A8             ; 192     for (;;) {
0299   F8A8             l_11: 
0300   F8A8             ; 193         a = *hl;
0301   F8A8 7E          	ld a, (hl)
0302   F8A9             ; 194         if (flag_z(a &= a))
0303   F8A9 A7          	and a
0304   F8AA             ; 195             return;
0305   F8AA C8          	ret z
0306   F8AB             ; 196         PrintCharA(a);
0307   F8AB CD C8 FD    	call printchara
0308   F8AE             ; 197         hl++;
0309   F8AE 23          	inc hl
0310   F8AF C3 A8 F8    	jp l_11
0311   F8B2             ; 198     }
0312   F8B2             ; 199 }
0313   F8B2             ; 200 
0314   F8B2             ; 201 void ParseParams() {
0315   F8B2             parseparams: 
0316   F8B2             ; 202     hl = &param1;
0317   F8B2 21 51 F7    	ld hl, 0FFFFh & (param1)
0318   F8B5             ; 203     b = 6;
0319   F8B5 06 06       	ld b, 6
0320   F8B7             ; 204     a ^= a;
0321   F8B7 AF          	xor a
0322   F8B8             ; 205     do {
0323   F8B8             l_13: 
0324   F8B8             ; 206         *hl = a;
0325   F8B8 77          	ld (hl), a
0326   F8B9             l_14: 
0327   F8B9             ; 207     } while (flag_nz(b--));
0328   F8B9 05          	dec b
0329   F8BA C2 B8 F8    	jp nz, l_13
0330   F8BD             ; 208 
0331   F8BD             ; 209     de = &cmdBuffer + 1;
0332   F8BD 11 7C F7    	ld de, 0FFFFh & ((cmdbuffer) + (1))
0333   F8C0             ; 210     ParseDword();
0334   F8C0 CD EF F8    	call parsedword
0335   F8C3             ; 211     param1 = hl;
0336   F8C3 22 51 F7    	ld (param1), hl
0337   F8C6             ; 212     param2 = hl;
0338   F8C6 22 53 F7    	ld (param2), hl
0339   F8C9             ; 213     if (flag_c)
0340   F8C9             ; 214         return;
0341   F8C9 D8          	ret c
0342   F8CA             ; 215     ParseDword();
0343   F8CA CD EF F8    	call parsedword
0344   F8CD             ; 216     param2 = hl;
0345   F8CD 22 53 F7    	ld (param2), hl
0346   F8D0             ; 217     push_pop(a, de) {
0347   F8D0 F5          	push af
0348   F8D1 D5          	push de
0349   F8D2             ; 218         swap(hl, de);
0350   F8D2 EB          	ex hl, de
0351   F8D3             ; 219         hl = param1;
0352   F8D3 2A 51 F7    	ld hl, (param1)
0353   F8D6             ; 220         swap(hl, de);
0354   F8D6 EB          	ex hl, de
0355   F8D7             ; 221         CmpHlDe();
0356   F8D7 CD 6D F9    	call cmphlde
0357   F8DA             ; 222         if (flag_c)
0358   F8DA             ; 223             return MonitorError();
0359   F8DA DA E7 F8    	jp c, monitorerror
0360   F8DD D1          	pop de
0361   F8DE F1          	pop af
0362   F8DF             ; 224     }
0363   F8DF             ; 225     if (flag_c)
0364   F8DF             ; 226         return;
0365   F8DF D8          	ret c
0366   F8E0             ; 227     ParseDword();
0367   F8E0 CD EF F8    	call parsedword
0368   F8E3             ; 228     param3 = hl;
0369   F8E3 22 55 F7    	ld (param3), hl
0370   F8E6             ; 229     if (flag_c)
0371   F8E6             ; 230         return;
0372   F8E6 D8          	ret c
0373   F8E7             ; 231     MonitorError();
0374   F8E7             ; 232 }
0375   F8E7             ; 233 
0376   F8E7             ; 234 void MonitorError() {
0377   F8E7             monitorerror: 
0378   F8E7             ; 235     PrintChar(c = '?');
0379   F8E7 0E 3F       	ld c, 63
0380   F8E9 CD CD FD    	call printchar
0381   F8EC             ; 236     return Monitor();
0382   F8EC C3 3E F8    	jp monitor
0383   F8EF             ; 237 }
0384   F8EF             ; 238 
0385   F8EF             ; 239 void ParseDword(...) {
0386   F8EF             parsedword: 
0387   F8EF             ; 240     push(hl = &MonitorError);
0388   F8EF 21 E7 F8    	ld hl, 0FFFFh & (monitorerror)
0389   F8F2 E5          	push hl
0390   F8F3             ; 241     hl = 0;
0391   F8F3 21 00 00    	ld hl, 0
0392   F8F6             ; 242     for (;;) {
0393   F8F6             l_17: 
0394   F8F6             ; 243         a = *de;
0395   F8F6 1A          	ld a, (de)
0396   F8F7             ; 244         if (a == 0x0D)
0397   F8F7 FE 0D       	cp 13
0398   F8F9             ; 245             return PopReturnCf();
0399   F8F9 CA 28 F9    	jp z, popreturncf
0400   F8FC             ; 246         de++;
0401   F8FC 13          	inc de
0402   F8FD             ; 247         if (a == ',')
0403   F8FD FE 2C       	cp 44
0404   F8FF             ; 248             return PopReturn();
0405   F8FF CA 29 F9    	jp z, popreturn
0406   F902             ; 249         if (a == ' ')
0407   F902 FE 20       	cp 32
0408   F904             ; 250             continue;
0409   F904 CA F6 F8    	jp z, l_17
0410   F907             ; 251         a &= 0x7F; /* Lowercase support */
0411   F907 E6 7F       	and 127
0412   F909             ; 252         a -= '0';
0413   F909 D6 30       	sub 48
0414   F90B             ; 253         if (flag_m)
0415   F90B             ; 254             return;
0416   F90B F8          	ret m
0417   F90C             ; 255         if (flag_p(compare(a, 10))) {
0418   F90C FE 0A       	cp 10
0419   F90E FA 19 F9    	jp m, l_19
0420   F911             ; 256             if (flag_m(compare(a, 0x11)))
0421   F911 FE 11       	cp 17
0422   F913             ; 257                 return;
0423   F913 F8          	ret m
0424   F914             ; 258             if (flag_p(compare(a, 0x17)))
0425   F914 FE 17       	cp 23
0426   F916             ; 259                 return;
0427   F916 F0          	ret p
0428   F917             ; 260             a -= 7;
0429   F917 D6 07       	sub 7
0430   F919             l_19: 
0431   F919             ; 261         }
0432   F919             ; 262         b = 0;
0433   F919 06 00       	ld b, 0
0434   F91B             ; 263         c = a;
0435   F91B 4F          	ld c, a
0436   F91C             ; 264         hl += hl;
0437   F91C 29          	add hl, hl
0438   F91D             ; 265         if (flag_c)
0439   F91D             ; 266             return;
0440   F91D D8          	ret c
0441   F91E             ; 267         hl += hl;
0442   F91E 29          	add hl, hl
0443   F91F             ; 268         if (flag_c)
0444   F91F             ; 269             return;
0445   F91F D8          	ret c
0446   F920             ; 270         hl += hl;
0447   F920 29          	add hl, hl
0448   F921             ; 271         if (flag_c)
0449   F921             ; 272             return;
0450   F921 D8          	ret c
0451   F922             ; 273         hl += hl;
0452   F922 29          	add hl, hl
0453   F923             ; 274         if (flag_c)
0454   F923             ; 275             return;
0455   F923 D8          	ret c
0456   F924             ; 276         hl += bc;
0457   F924 09          	add hl, bc
0458   F925 C3 F6 F8    	jp l_17
0459   F928             ; 277     }
0460   F928             ; 278 }
0461   F928             ; 279 
0462   F928             ; 280 void PopReturnCf() {
0463   F928             popreturncf: 
0464   F928             ; 281     set_flag_c();
0465   F928 37          	scf
0466   F929             ; 282     PopReturn();
0467   F929             ; 283 }
0468   F929             ; 284 
0469   F929             ; 285 void PopReturn() {
0470   F929             popreturn: 
0471   F929             ; 286     pop(bc);
0472   F929 C1          	pop bc
0473   F92A C9          	ret
0474   F92B             ; 287 }
0475   F92B             ; 288 
0476   F92B             ; 289 void PrintByteFromParam1(...) {
0477   F92B             printbytefromparam1: 
0478   F92B             ; 290     hl = param1;
0479   F92B 2A 51 F7    	ld hl, (param1)
0480   F92E             ; 291     PrintHexByte(a = *hl);
0481   F92E 7E          	ld a, (hl)
0482   F92F             ; 292 }
0483   F92F             ; 293 
0484   F92F             ; 294 void PrintHexByte(...) {
0485   F92F             printhexbyte: 
0486   F92F             ; 295     b = a;
0487   F92F 47          	ld b, a
0488   F930             ; 296     cyclic_rotate_right(a, 4);
0489   F930 0F          	rrca
0490   F931 0F          	rrca
0491   F932 0F          	rrca
0492   F933 0F          	rrca
0493   F934             ; 297     PrintHex(a);
0494   F934 CD 38 F9    	call printhex
0495   F937             ; 298     PrintHex(a = b);
0496   F937 78          	ld a, b
0497   F938             ; 299 }
0498   F938             ; 300 
0499   F938             ; 301 void PrintHex(...) {
0500   F938             printhex: 
0501   F938             ; 302     a &= 0x0F;
0502   F938 E6 0F       	and 15
0503   F93A             ; 303     if (flag_p(compare(a, 10)))
0504   F93A FE 0A       	cp 10
0505   F93C             ; 304         a += 'A' - '0' - 10;
0506   F93C FA 41 F9    	jp m, l_21
0507   F93F C6 07       	add 7
0508   F941             l_21: 
0509   F941             ; 305     a += '0';
0510   F941 C6 30       	add 48
0511   F943             ; 306     PrintCharA(a);
0512   F943 C3 C8 FD    	jp printchara
0513   F946             ; 307 }
0514   F946             ; 308 
0515   F946             ; 309 void PrintLfParam1Space(...) {
0516   F946             printlfparam1space: 
0517   F946             ; 310     PrintLf();
0518   F946 CD C6 FD    	call printlf
0519   F949             ; 311     PrintParam1Space();
0520   F949             ; 312 }
0521   F949             ; 313 
0522   F949             ; 314 void PrintParam1Space() {
0523   F949             printparam1space: 
0524   F949             ; 315     PrintHexWordSpace(hl = &param1h);
0525   F949 21 52 F7    	ld hl, 0FFFFh & (param1h)
0526   F94C             ; 316 }
0527   F94C             ; 317 
0528   F94C             ; 318 void PrintHexWordSpace(...) {
0529   F94C             printhexwordspace: 
0530   F94C             ; 319     PrintHexByte(a = *hl);
0531   F94C 7E          	ld a, (hl)
0532   F94D CD 2F F9    	call printhexbyte
0533   F950             ; 320     hl--;
0534   F950 2B          	dec hl
0535   F951             ; 321     PrintHexByte(a = *hl);
0536   F951 7E          	ld a, (hl)
0537   F952 CD 2F F9    	call printhexbyte
0538   F955             ; 322     PrintSpace();
0539   F955             ; 323 }
0540   F955             ; 324 
0541   F955             ; 325 void PrintSpace(...) {
0542   F955             printspace: 
0543   F955             ; 326     PrintChar(c = ' ');
0544   F955 0E 20       	ld c, 32
0545   F957 C3 CD FD    	jp printchar
0546   F95A             ; 327 }
0547   F95A             ; 328 
0548   F95A             ; 329 void Loop() {
0549   F95A             loop: 
0550   F95A             ; 330     push_pop(de) {
0551   F95A D5          	push de
0552   F95B             ; 331         hl = param2;
0553   F95B 2A 53 F7    	ld hl, (param2)
0554   F95E             ; 332         swap(hl, de);
0555   F95E EB          	ex hl, de
0556   F95F             ; 333         hl = param1;
0557   F95F 2A 51 F7    	ld hl, (param1)
0558   F962             ; 334         CmpHlDe(hl, de);
0559   F962 CD 6D F9    	call cmphlde
0560   F965             ; 335         hl++;
0561   F965 23          	inc hl
0562   F966             ; 336         param1 = hl;
0563   F966 22 51 F7    	ld (param1), hl
0564   F969 D1          	pop de
0565   F96A             ; 337     }
0566   F96A             ; 338     if (flag_nz)
0567   F96A             ; 339         return;
0568   F96A C0          	ret nz
0569   F96B             ; 340     pop(hl);
0570   F96B E1          	pop hl
0571   F96C C9          	ret
0572   F96D             ; 341 }
0573   F96D             ; 342 
0574   F96D             ; 343 void CmpHlDe(...) {
0575   F96D             cmphlde: 
0576   F96D             ; 344     if ((a = h) != d)
0577   F96D 7C          	ld a, h
0578   F96E BA          	cp d
0579   F96F             ; 345         return;
0580   F96F C0          	ret nz
0581   F970             ; 346     compare(a = l, e);
0582   F970 7D          	ld a, l
0583   F971 BB          	cp e
0584   F972 C9          	ret
0585   F973             ; 347 }
0586   F973             ; 348 
0587   F973             ; 349 /* X - Изменение содержимого внутреннего регистра микропроцессора */
0588   F973             ; 350 
0589   F973             ; 351 void CmdX() {
0590   F973             cmdx: 
0591   F973             ; 352     de = &cmdBuffer1;
0592   F973 11 7C F7    	ld de, 0FFFFh & (cmdbuffer1)
0593   F976             ; 353     a = *de;
0594   F976 1A          	ld a, (de)
0595   F977             ; 354     if (a == 0x0D)
0596   F977 FE 0D       	cp 13
0597   F979             ; 355         return PrintRegs();
0598   F979 CA A0 F9    	jp z, printregs
0599   F97C             ; 356     de++;
0600   F97C 13          	inc de
0601   F97D             ; 357     push_pop(a) {
0602   F97D F5          	push af
0603   F97E             ; 358         ParseDword();
0604   F97E CD EF F8    	call parsedword
0605   F981 F1          	pop af
0606   F982             ; 359     }
0607   F982             ; 360     if (a == 'S') {
0608   F982 FE 53       	cp 83
0609   F984 C2 8B F9    	jp nz, l_23
0610   F987             ; 361         regSP = hl;
0611   F987 22 65 F7    	ld (regsp), hl
0612   F98A             ; 362         return;
0613   F98A C9          	ret
0614   F98B             l_23: 
0615   F98B             ; 363     }
0616   F98B             ; 364     c = l;
0617   F98B 4D          	ld c, l
0618   F98C             ; 365     b = a;
0619   F98C 47          	ld b, a
0620   F98D             ; 366     hl = regList - 1;
0621   F98D 21 E1 F9    	ld hl, 0FFFFh & ((reglist) - (1))
0622   F990             ; 367     do {
0623   F990             l_25: 
0624   F990             ; 368         hl++;
0625   F990 23          	inc hl
0626   F991             ; 369         a = *hl;
0627   F991 7E          	ld a, (hl)
0628   F992             ; 370         if (a == 0)
0629   F992 B7          	or a
0630   F993             ; 371             return MonitorError();
0631   F993 CA E7 F8    	jp z, monitorerror
0632   F996             ; 372         hl++;
0633   F996 23          	inc hl
0634   F997             l_26: 
0635   F997             ; 373     } while (a != b);
0636   F997 B8          	cp b
0637   F998 C2 90 F9    	jp nz, l_25
0638   F99B             ; 374     l = *hl;
0639   F99B 6E          	ld l, (hl)
0640   F99C             ; 375     h = (uintptr_t)&regs >> 8;
0641   F99C 26 F7       	ld h, 0FFh & ((0FFFFh & (0FFFFh & (regs))) >> (8))
0642   F99E             ; 376     *hl = c;
0643   F99E 71          	ld (hl), c
0644   F99F C9          	ret
0645   F9A0             ; 377 }
0646   F9A0             ; 378 
0647   F9A0             ; 379 void PrintRegs(...) {
0648   F9A0             printregs: 
0649   F9A0             ; 380     de = &regList;
0650   F9A0 11 E2 F9    	ld de, reglist
0651   F9A3             ; 381     b = 8;
0652   F9A3 06 08       	ld b, 8
0653   F9A5             ; 382     PrintLf();
0654   F9A5 CD C6 FD    	call printlf
0655   F9A8             ; 383     do {
0656   F9A8             l_28: 
0657   F9A8             ; 384         c = a = *de;
0658   F9A8 1A          	ld a, (de)
0659   F9A9 4F          	ld c, a
0660   F9AA             ; 385         de++;
0661   F9AA 13          	inc de
0662   F9AB             ; 386         push_pop(bc) {
0663   F9AB C5          	push bc
0664   F9AC             ; 387             PrintRegMinus(c);
0665   F9AC CD DA F9    	call printregminus
0666   F9AF             ; 388             a = *de;
0667   F9AF 1A          	ld a, (de)
0668   F9B0             ; 389             hl = &regs;
0669   F9B0 21 65 F7    	ld hl, 0FFFFh & (regs)
0670   F9B3             ; 390             l = a;
0671   F9B3 6F          	ld l, a
0672   F9B4             ; 391             PrintHexByte(a = *hl);
0673   F9B4 7E          	ld a, (hl)
0674   F9B5 CD 2F F9    	call printhexbyte
0675   F9B8             ; 392             PrintSpace();
0676   F9B8 CD 55 F9    	call printspace
0677   F9BB C1          	pop bc
0678   F9BC             ; 393         }
0679   F9BC             ; 394         de++;
0680   F9BC 13          	inc de
0681   F9BD             l_29: 
0682   F9BD             ; 395     } while (flag_nz(b--));
0683   F9BD 05          	dec b
0684   F9BE C2 A8 F9    	jp nz, l_28
0685   F9C1             ; 396 
0686   F9C1             ; 397     c = a = *de;
0687   F9C1 1A          	ld a, (de)
0688   F9C2 4F          	ld c, a
0689   F9C3             ; 398     PrintRegMinus();
0690   F9C3 CD DA F9    	call printregminus
0691   F9C6             ; 399     param1 = hl = regs;
0692   F9C6 2A 65 F7    	ld hl, (regs)
0693   F9C9 22 51 F7    	ld (param1), hl
0694   F9CC             ; 400     PrintParam1Space();
0695   F9CC CD 49 F9    	call printparam1space
0696   F9CF             ; 401     PrintRegMinus(c = 'O');
0697   F9CF 0E 4F       	ld c, 79
0698   F9D1 CD DA F9    	call printregminus
0699   F9D4             ; 402     PrintHexWordSpace(hl = &lastBreakAddressHigh);
0700   F9D4 21 70 F7    	ld hl, 0FFFFh & (lastbreakaddresshigh)
0701   F9D7 C3 4C F9    	jp printhexwordspace
0702   F9DA             ; 403 }
0703   F9DA             ; 404 
0704   F9DA             ; 405 void PrintRegMinus(...) {
0705   F9DA             printregminus: 
0706   F9DA             ; 406     PrintChar(c);
0707   F9DA CD CD FD    	call printchar
0708   F9DD             ; 407     PrintChar(c = '-');
0709   F9DD 0E 2D       	ld c, 45
0710   F9DF C3 CD FD    	jp printchar
0711   F9E2             ; 408 }
0712   F9E2             ; 409 
0713   F9E2             ; 410 uint8_t regList[] = {'A', &regA, 'B', &regB, 'C', &regC, 'D', &regD,  'E', &regE,
0714   F9E2             reglist: 
0715   F9E2 41          	db 65
0716   F9E3 68          	db 0FFh & (rega)
0717   F9E4 42          	db 66
0718   F9E5 6A          	db 0FFh & (regb)
0719   F9E6 43          	db 67
0720   F9E7 69          	db 0FFh & (regc)
0721   F9E8 44          	db 68
0722   F9E9 6C          	db 0FFh & (regd)
0723   F9EA 45          	db 69
0724   F9EB 6B          	db 0FFh & (rege)
0725   F9EC 46          	db 70
0726   F9ED 67          	db 0FFh & (regf)
0727   F9EE 48          	db 72
0728   F9EF 6E          	db 0FFh & (regh)
0729   F9F0 4C          	db 76
0730   F9F1 6D          	db 0FFh & (regl)
0731   F9F2 53          	db 83
0732   F9F3 65          	db 0FFh & (regsp)
0733   F9F4 00          	db 0
0734   F9F5             ; 413  aStart[] = "\x0ASTART-";
0735   F9F5             astart: 
0736   F9F5 0A          	db 10
0737   F9F6 53          	db 83
0738   F9F7 54          	db 84
0739   F9F8 41          	db 65
0740   F9F9 52          	db 82
0741   F9FA 54          	db 84
0742   F9FB 2D          	db 45
0743   F9FC 00          	ds 1
0744   F9FD             ; 414  aDir_[] = "\x0ADIR  -";
0745   F9FD             adir_: 
0746   F9FD 0A          	db 10
0747   F9FE 44          	db 68
0748   F9FF 49          	db 73
0749   FA00 52          	db 82
0750   FA01 20          	db 32
0751   FA02 20          	db 32
0752   FA03 2D          	db 45
0753   FA04 00          	ds 1
0754   FA05             ; 418  CmdB() {
0755   FA05             cmdb: 
0756   FA05             ; 419     ParseParams();
0757   FA05 CD B2 F8    	call parseparams
0758   FA08             ; 420     InitRst38();
0759   FA08 CD 18 FA    	call initrst38
0760   FA0B             ; 421     hl = param1;
0761   FA0B 2A 51 F7    	ld hl, (param1)
0762   FA0E             ; 422     a = *hl;
0763   FA0E 7E          	ld a, (hl)
0764   FA0F             ; 423     *hl = OPCODE_RST_38;
0765   FA0F 36 FF       	ld (hl), 255
0766   FA11             ; 424     breakAddress = hl;
0767   FA11 22 72 F7    	ld (breakaddress), hl
0768   FA14             ; 425     breakPrevByte = a;
0769   FA14 32 74 F7    	ld (breakprevbyte), a
0770   FA17 C9          	ret
0771   FA18             ; 426 }
0772   FA18             ; 427 
0773   FA18             ; 428 void InitRst38() {
0774   FA18             initrst38: 
0775   FA18             ; 429     rst38Opcode = a = OPCODE_JMP;
0776   FA18 3E C3       	ld a, 195
0777   FA1A 32 38 00    	ld (rst38opcode), a
0778   FA1D             ; 430     rst38Address = hl = &BreakPoint;
0779   FA1D 21 24 FA    	ld hl, 0FFFFh & (breakpoint)
0780   FA20 22 39 00    	ld (rst38address), hl
0781   FA23 C9          	ret
0782   FA24             ; 431 }
0783   FA24             ; 432 
0784   FA24             ; 433 void BreakPoint(...) {
0785   FA24             breakpoint: 
0786   FA24             ; 434     regHL = hl;
0787   FA24 22 6D F7    	ld (reghl), hl
0788   FA27             ; 435     push(a);
0789   FA27 F5          	push af
0790   FA28             ; 436     hl = 4;
0791   FA28 21 04 00    	ld hl, 4
0792   FA2B             ; 437     hl += sp;
0793   FA2B 39          	add hl, sp
0794   FA2C             ; 438     regs = hl;
0795   FA2C 22 65 F7    	ld (regs), hl
0796   FA2F             ; 439     pop(a);
0797   FA2F F1          	pop af
0798   FA30             ; 440     swap(*sp, hl);
0799   FA30 E3          	ex (sp), hl
0800   FA31             ; 441     hl--;
0801   FA31 2B          	dec hl
0802   FA32             ; 442     swap(*sp, hl);
0803   FA32 E3          	ex (sp), hl
0804   FA33             ; 443     sp = &regHL;
0805   FA33 31 6D F7    	ld sp, 0FFFFh & (reghl)
0806   FA36             ; 444     push(de, bc, a);
0807   FA36 D5          	push de
0808   FA37 C5          	push bc
0809   FA38 F5          	push af
0810   FA39             ; 445     sp = STACK_TOP;
0811   FA39 31 FF F7    	ld sp, 63487
0812   FA3C             ; 446 
0813   FA3C             ; 447     hl = regSP;
0814   FA3C 2A 65 F7    	ld hl, (regsp)
0815   FA3F             ; 448     hl--;
0816   FA3F 2B          	dec hl
0817   FA40             ; 449     d = *hl;
0818   FA40 56          	ld d, (hl)
0819   FA41             ; 450     hl--;
0820   FA41 2B          	dec hl
0821   FA42             ; 451     e = *hl;
0822   FA42 5E          	ld e, (hl)
0823   FA43             ; 452     l = e;
0824   FA43 6B          	ld l, e
0825   FA44             ; 453     h = d;
0826   FA44 62          	ld h, d
0827   FA45             ; 454     lastBreakAddress = hl;
0828   FA45 22 6F F7    	ld (lastbreakaddress), hl
0829   FA48             ; 455 
0830   FA48             ; 456     hl = breakAddress;
0831   FA48 2A 72 F7    	ld hl, (breakaddress)
0832   FA4B             ; 457     CmpHlDe();
0833   FA4B CD 6D F9    	call cmphlde
0834   FA4E             ; 458     if (flag_nz) {
0835   FA4E CA 66 FA    	jp z, l_31
0836   FA51             ; 459         hl = breakAddress2;
0837   FA51 2A 75 F7    	ld hl, (breakaddress2)
0838   FA54             ; 460         CmpHlDe(hl, de);
0839   FA54 CD 6D F9    	call cmphlde
0840   FA57             ; 461         if (flag_z)
0841   FA57             ; 462             return BreakPointAt2();
0842   FA57 CA D0 FA    	jp z, breakpointat2
0843   FA5A             ; 463 
0844   FA5A             ; 464         hl = breakAddress3;
0845   FA5A 2A 78 F7    	ld hl, (breakaddress3)
0846   FA5D             ; 465         CmpHlDe(hl, de);
0847   FA5D CD 6D F9    	call cmphlde
0848   FA60             ; 466         if (flag_z)
0849   FA60             ; 467             return BreakpointAt3();
0850   FA60 CA F2 FA    	jp z, breakpointat3
0851   FA63             ; 468 
0852   FA63             ; 469         return MonitorError();
0853   FA63 C3 E7 F8    	jp monitorerror
0854   FA66             l_31: 
0855   FA66             ; 470     }
0856   FA66             ; 471     *hl = a = breakPrevByte;
0857   FA66 3A 74 F7    	ld a, (breakprevbyte)
0858   FA69 77          	ld (hl), a
0859   FA6A             ; 472     breakAddress = hl = 0xFFFF;
0860   FA6A 21 FF FF    	ld hl, 65535
0861   FA6D 22 72 F7    	ld (breakaddress), hl
0862   FA70             ; 473     return Monitor();
0863   FA70 C3 3E F8    	jp monitor
0864   FA73             ; 474 }
0865   FA73             ; 475 
0866   FA73             ; 476 /* G<адрес> - Запуск программы в отладочном режиме */
0867   FA73             ; 477 
0868   FA73             ; 478 void CmdG() {
0869   FA73             cmdg: 
0870   FA73             ; 479     param1 = hl = lastBreakAddress;
0871   FA73 2A 6F F7    	ld hl, (lastbreakaddress)
0872   FA76 22 51 F7    	ld (param1), hl
0873   FA79             ; 480     if ((a = cmdBuffer1) != 0x0D)
0874   FA79 3A 7C F7    	ld a, (cmdbuffer1)
0875   FA7C FE 0D       	cp 13
0876   FA7E             ; 481         ParseParams();
0877   FA7E C4 B2 F8    	call nz, parseparams
0878   FA81             ; 482     Run();
0879   FA81             ; 483 }
0880   FA81             ; 484 
0881   FA81             ; 485 void Run() {
0882   FA81             run: 
0883   FA81             ; 486     jumpOpcode = a = OPCODE_JMP;
0884   FA81 3E C3       	ld a, 195
0885   FA83 32 50 F7    	ld (jumpopcode), a
0886   FA86             ; 487     sp = &regs;
0887   FA86 31 65 F7    	ld sp, 0FFFFh & (regs)
0888   FA89             ; 488     pop(de, bc, a, hl);
0889   FA89 E1          	pop hl
0890   FA8A F1          	pop af
0891   FA8B C1          	pop bc
0892   FA8C D1          	pop de
0893   FA8D             ; 489     sp = hl;
0894   FA8D F9          	ld sp, hl
0895   FA8E             ; 490     hl = regHL;
0896   FA8E 2A 6D F7    	ld hl, (reghl)
0897   FA91             ; 491     jumpOpcode();
0898   FA91 C3 50 F7    	jp jumpopcode
0899   FA94             ; 492 }
0900   FA94             ; 493 
0901   FA94             ; 494 void CmdP(...) {
0902   FA94             cmdp: 
0903   FA94             ; 495     ParseParams();
0904   FA94 CD B2 F8    	call parseparams
0905   FA97             ; 496     InitRst38();
0906   FA97 CD 18 FA    	call initrst38
0907   FA9A             ; 497 
0908   FA9A             ; 498     breakAddress2 = hl = param1;
0909   FA9A 2A 51 F7    	ld hl, (param1)
0910   FA9D 22 75 F7    	ld (breakaddress2), hl
0911   FAA0             ; 499     a = *hl;
0912   FAA0 7E          	ld a, (hl)
0913   FAA1             ; 500     *hl = OPCODE_RST_38;
0914   FAA1 36 FF       	ld (hl), 255
0915   FAA3             ; 501     breakPrevByte2 = a;
0916   FAA3 32 77 F7    	ld (breakprevbyte2), a
0917   FAA6             ; 502 
0918   FAA6             ; 503     breakAddress3 = hl = param2;
0919   FAA6 2A 53 F7    	ld hl, (param2)
0920   FAA9 22 78 F7    	ld (breakaddress3), hl
0921   FAAC             ; 504     a = *hl;
0922   FAAC 7E          	ld a, (hl)
0923   FAAD             ; 505     *hl = OPCODE_RST_38;
0924   FAAD 36 FF       	ld (hl), 255
0925   FAAF             ; 506     breakPrevByte3 = a;
0926   FAAF 32 7A F7    	ld (breakprevbyte3), a
0927   FAB2             ; 507 
0928   FAB2             ; 508     breakCounter = a = param3;
0929   FAB2 3A 55 F7    	ld a, (param3)
0930   FAB5 32 71 F7    	ld (breakcounter), a
0931   FAB8             ; 509 
0932   FAB8             ; 510     PrintString(hl = &aStart);
0933   FAB8 21 F5 F9    	ld hl, astart
0934   FABB CD A8 F8    	call printstring
0935   FABE             ; 511     ReadString();
0936   FABE CD 75 F8    	call readstring
0937   FAC1             ; 512     ParseParams();
0938   FAC1 CD B2 F8    	call parseparams
0939   FAC4             ; 513 
0940   FAC4             ; 514     PrintString(hl = &aDir_);
0941   FAC4 21 FD F9    	ld hl, adir_
0942   FAC7 CD A8 F8    	call printstring
0943   FACA             ; 515     ReadString();
0944   FACA CD 75 F8    	call readstring
0945   FACD             ; 516 
0946   FACD             ; 517     Run();
0947   FACD C3 81 FA    	jp run
0948   FAD0             ; 518 }
0949   FAD0             ; 519 
0950   FAD0             ; 520 void BreakPointAt2(...) {
0951   FAD0             breakpointat2: 
0952   FAD0             ; 521     *hl = a = breakPrevByte2;
0953   FAD0 3A 77 F7    	ld a, (breakprevbyte2)
0954   FAD3 77          	ld (hl), a
0955   FAD4             ; 522 
0956   FAD4             ; 523     hl = breakAddress3;
0957   FAD4 2A 78 F7    	ld hl, (breakaddress3)
0958   FAD7             ; 524     a = OPCODE_RST_38;
0959   FAD7 3E FF       	ld a, 255
0960   FAD9             ; 525     if (a != *hl) {
0961   FAD9 BE          	cp (hl)
0962   FADA CA E3 FA    	jp z, l_33
0963   FADD             ; 526         b = *hl;
0964   FADD 46          	ld b, (hl)
0965   FADE             ; 527         *hl = a;
0966   FADE 77          	ld (hl), a
0967   FADF             ; 528         breakPrevByte3 = a = b;
0968   FADF 78          	ld a, b
0969   FAE0 32 7A F7    	ld (breakprevbyte3), a
0970   FAE3             l_33: 
0971   FAE3             ; 529     }
0972   FAE3             ; 530     ContinueBreakpoint();
0973   FAE3             ; 531 }
0974   FAE3             ; 532 
0975   FAE3             ; 533 void ContinueBreakpoint(...) {
0976   FAE3             continuebreakpoint: 
0977   FAE3             ; 534     PrintRegs();
0978   FAE3 CD A0 F9    	call printregs
0979   FAE6             ; 535     MonitorExecute();
0980   FAE6 CD 5C F8    	call monitorexecute
0981   FAE9             ; 536     param1 = hl = lastBreakAddress;
0982   FAE9 2A 6F F7    	ld hl, (lastbreakaddress)
0983   FAEC 22 51 F7    	ld (param1), hl
0984   FAEF             ; 537     Run();
0985   FAEF C3 81 FA    	jp run
0986   FAF2             ; 538 }
0987   FAF2             ; 539 
0988   FAF2             ; 540 void BreakpointAt3(...) {
0989   FAF2             breakpointat3: 
0990   FAF2             ; 541     *hl = a = breakPrevByte3;
0991   FAF2 3A 7A F7    	ld a, (breakprevbyte3)
0992   FAF5 77          	ld (hl), a
0993   FAF6             ; 542 
0994   FAF6             ; 543     hl = breakAddress2;
0995   FAF6 2A 75 F7    	ld hl, (breakaddress2)
0996   FAF9             ; 544     a = OPCODE_RST_38;
0997   FAF9 3E FF       	ld a, 255
0998   FAFB             ; 545     if (a == *hl)
0999   FAFB BE          	cp (hl)
1000   FAFC             ; 546         return ContinueBreakpoint();
1001   FAFC CA E3 FA    	jp z, continuebreakpoint
1002   FAFF             ; 547     b = *hl;
1003   FAFF 46          	ld b, (hl)
1004   FB00             ; 548     *hl = a;
1005   FB00 77          	ld (hl), a
1006   FB01             ; 549     breakPrevByte2 = a = b;
1007   FB01 78          	ld a, b
1008   FB02 32 77 F7    	ld (breakprevbyte2), a
1009   FB05             ; 550 
1010   FB05             ; 551     hl = &breakCounter;
1011   FB05 21 71 F7    	ld hl, 0FFFFh & (breakcounter)
1012   FB08             ; 552     (*hl)--;
1013   FB08 35          	dec (hl)
1014   FB09             ; 553     if (flag_nz)
1015   FB09             ; 554         return ContinueBreakpoint();
1016   FB09 C2 E3 FA    	jp nz, continuebreakpoint
1017   FB0C             ; 555 
1018   FB0C             ; 556     a = breakPrevByte2;
1019   FB0C 3A 77 F7    	ld a, (breakprevbyte2)
1020   FB0F             ; 557     hl = breakAddress2;
1021   FB0F 2A 75 F7    	ld hl, (breakaddress2)
1022   FB12             ; 558     *hl = a;
1023   FB12 77          	ld (hl), a
1024   FB13             ; 559     Monitor();
1025   FB13 C3 3E F8    	jp monitor
1026   FB16             ; 560 }
1027   FB16             ; 561 
1028   FB16             ; 562 /* D<адрес>,<адрес> - Просмотр содержимого области памяти в шестнадцатеричном виде */
1029   FB16             ; 563 
1030   FB16             ; 564 void CmdD() {
1031   FB16             cmdd: 
1032   FB16             ; 565     ParseParams();
1033   FB16 CD B2 F8    	call parseparams
1034   FB19             ; 566     PrintLfParam1Space();
1035   FB19 CD 46 F9    	call printlfparam1space
1036   FB1C             ; 567     for (;;) {
1037   FB1C             l_36: 
1038   FB1C             ; 568         PrintByteFromParam1();
1039   FB1C CD 2B F9    	call printbytefromparam1
1040   FB1F             ; 569         PrintSpace();
1041   FB1F CD 55 F9    	call printspace
1042   FB22             ; 570         Loop();
1043   FB22 CD 5A F9    	call loop
1044   FB25             ; 571         a = param1;
1045   FB25 3A 51 F7    	ld a, (param1)
1046   FB28             ; 572         a &= 0x0F;
1047   FB28 E6 0F       	and 15
1048   FB2A             ; 573         if (flag_z)
1049   FB2A             ; 574             PrintLfParam1Space();
1050   FB2A CC 46 F9    	call z, printlfparam1space
1051   FB2D C3 1C FB    	jp l_36
1052   FB30             ; 575     }
1053   FB30             ; 576 }
1054   FB30             ; 577 
1055   FB30             ; 578 /* C<адрес от>,<адрес до>,<адрес от 2> - Сравнение содержимого двух областей памяти */
1056   FB30             ; 579 
1057   FB30             ; 580 void CmdC() {
1058   FB30             cmdc: 
1059   FB30             ; 581     ParseParams();
1060   FB30 CD B2 F8    	call parseparams
1061   FB33             ; 582     hl = param3;
1062   FB33 2A 55 F7    	ld hl, (param3)
1063   FB36             ; 583     swap(hl, de);
1064   FB36 EB          	ex hl, de
1065   FB37             ; 584     for (;;) {
1066   FB37             l_39: 
1067   FB37             ; 585         hl = param1;
1068   FB37 2A 51 F7    	ld hl, (param1)
1069   FB3A             ; 586         a = *de;
1070   FB3A 1A          	ld a, (de)
1071   FB3B             ; 587         if (a != *hl) {
1072   FB3B BE          	cp (hl)
1073   FB3C CA 4C FB    	jp z, l_41
1074   FB3F             ; 588             PrintLfParam1Space();
1075   FB3F CD 46 F9    	call printlfparam1space
1076   FB42             ; 589             PrintByteFromParam1();
1077   FB42 CD 2B F9    	call printbytefromparam1
1078   FB45             ; 590             PrintSpace();
1079   FB45 CD 55 F9    	call printspace
1080   FB48             ; 591             a = *de;
1081   FB48 1A          	ld a, (de)
1082   FB49             ; 592             PrintHexByte();
1083   FB49 CD 2F F9    	call printhexbyte
1084   FB4C             l_41: 
1085   FB4C             ; 593         }
1086   FB4C             ; 594         de++;
1087   FB4C 13          	inc de
1088   FB4D             ; 595         Loop();
1089   FB4D CD 5A F9    	call loop
1090   FB50 C3 37 FB    	jp l_39
1091   FB53             ; 596     }
1092   FB53             ; 597 }
1093   FB53             ; 598 
1094   FB53             ; 599 /* F<адрес>,<адрес>,<байт> - Запись байта во все ячейки области памяти */
1095   FB53             ; 600 
1096   FB53             ; 601 void CmdF() {
1097   FB53             cmdf: 
1098   FB53             ; 602     ParseParams();
1099   FB53 CD B2 F8    	call parseparams
1100   FB56             ; 603     b = a = param3;
1101   FB56 3A 55 F7    	ld a, (param3)
1102   FB59 47          	ld b, a
1103   FB5A             ; 604     for (;;) {
1104   FB5A             l_44: 
1105   FB5A             ; 605         hl = param1;
1106   FB5A 2A 51 F7    	ld hl, (param1)
1107   FB5D             ; 606         *hl = b;
1108   FB5D 70          	ld (hl), b
1109   FB5E             ; 607         Loop();
1110   FB5E CD 5A F9    	call loop
1111   FB61 C3 5A FB    	jp l_44
1112   FB64             ; 608     }
1113   FB64             ; 609 }
1114   FB64             ; 610 
1115   FB64             ; 611 /* S<адрес>,<адрес>,<байт> - Поиск байта в области памяти */
1116   FB64             ; 612 
1117   FB64             ; 613 void CmdS() {
1118   FB64             cmds: 
1119   FB64             ; 614     ParseParams();
1120   FB64 CD B2 F8    	call parseparams
1121   FB67             ; 615     c = l;
1122   FB67 4D          	ld c, l
1123   FB68             ; 616     for (;;) {
1124   FB68             l_47: 
1125   FB68             ; 617         hl = param1;
1126   FB68 2A 51 F7    	ld hl, (param1)
1127   FB6B             ; 618         a = c;
1128   FB6B 79          	ld a, c
1129   FB6C             ; 619         if (a == *hl)
1130   FB6C BE          	cp (hl)
1131   FB6D             ; 620             PrintLfParam1Space();
1132   FB6D CC 46 F9    	call z, printlfparam1space
1133   FB70             ; 621         Loop();
1134   FB70 CD 5A F9    	call loop
1135   FB73 C3 68 FB    	jp l_47
1136   FB76             ; 622     }
1137   FB76             ; 623 }
1138   FB76             ; 624 
1139   FB76             ; 625 /* T<начало>,<конец>,<куда> - Пересылка содержимого одной области в другую */
1140   FB76             ; 626 
1141   FB76             ; 627 void CmdT() {
1142   FB76             cmdt: 
1143   FB76             ; 628     ParseParams();
1144   FB76 CD B2 F8    	call parseparams
1145   FB79             ; 629     hl = param3;
1146   FB79 2A 55 F7    	ld hl, (param3)
1147   FB7C             ; 630     swap(hl, de);
1148   FB7C EB          	ex hl, de
1149   FB7D             ; 631     for (;;) {
1150   FB7D             l_50: 
1151   FB7D             ; 632         hl = param1;
1152   FB7D 2A 51 F7    	ld hl, (param1)
1153   FB80             ; 633         *de = a = *hl;
1154   FB80 7E          	ld a, (hl)
1155   FB81 12          	ld (de), a
1156   FB82             ; 634         de++;
1157   FB82 13          	inc de
1158   FB83             ; 635         Loop();
1159   FB83 CD 5A F9    	call loop
1160   FB86 C3 7D FB    	jp l_50
1161   FB89             ; 636     }
1162   FB89             ; 637 }
1163   FB89             ; 638 
1164   FB89             ; 639 /* M<адрес> - Просмотр или изменение содержимого ячейки (ячеек) памяти */
1165   FB89             ; 640 
1166   FB89             ; 641 void CmdM() {
1167   FB89             cmdm: 
1168   FB89             ; 642     ParseParams();
1169   FB89 CD B2 F8    	call parseparams
1170   FB8C             ; 643     for (;;) {
1171   FB8C             l_53: 
1172   FB8C             ; 644         PrintLfParam1Space();
1173   FB8C CD 46 F9    	call printlfparam1space
1174   FB8F             ; 645         PrintByteFromParam1();
1175   FB8F CD 2B F9    	call printbytefromparam1
1176   FB92             ; 646         PrintSpace();
1177   FB92 CD 55 F9    	call printspace
1178   FB95             ; 647         ReadString();
1179   FB95 CD 75 F8    	call readstring
1180   FB98             ; 648         hl = param1;
1181   FB98 2A 51 F7    	ld hl, (param1)
1182   FB9B             ; 649         a = *de;
1183   FB9B 1A          	ld a, (de)
1184   FB9C             ; 650         if (a != 0x0D) {
1185   FB9C FE 0D       	cp 13
1186   FB9E CA A8 FB    	jp z, l_55
1187   FBA1             ; 651             push_pop(hl) {
1188   FBA1 E5          	push hl
1189   FBA2             ; 652                 ParseDword();
1190   FBA2 CD EF F8    	call parsedword
1191   FBA5             ; 653                 a = l;
1192   FBA5 7D          	ld a, l
1193   FBA6 E1          	pop hl
1194   FBA7             ; 654             }
1195   FBA7             ; 655             *hl = a;
1196   FBA7 77          	ld (hl), a
1197   FBA8             l_55: 
1198   FBA8             ; 656         }
1199   FBA8             ; 657         hl++;
1200   FBA8 23          	inc hl
1201   FBA9             ; 658         param1 = hl;
1202   FBA9 22 51 F7    	ld (param1), hl
1203   FBAC C3 8C FB    	jp l_53
1204   FBAF             ; 659     }
1205   FBAF             ; 660 }
1206   FBAF             ; 661 
1207   FBAF             ; 662 /* J<адрес> - Запуск программы с указанного адреса */
1208   FBAF             ; 663 
1209   FBAF             ; 664 void CmdJ() {
1210   FBAF             cmdj: 
1211   FBAF             ; 665     ParseParams();
1212   FBAF CD B2 F8    	call parseparams
1213   FBB2             ; 666     hl = param1;
1214   FBB2 2A 51 F7    	ld hl, (param1)
1215   FBB5             ; 667     return hl();
1216   FBB5 E9          	jp hl
1217   FBB6             ; 668 }
1218   FBB6             ; 669 
1219   FBB6             ; 670 /* А<символ> - Вывод кода символа на экран */
1220   FBB6             ; 671 
1221   FBB6             ; 672 void CmdA() {
1222   FBB6             cmda: 
1223   FBB6             ; 673     PrintLf();
1224   FBB6 CD C6 FD    	call printlf
1225   FBB9             ; 674     PrintHexByte(a = cmdBuffer1);
1226   FBB9 3A 7C F7    	ld a, (cmdbuffer1)
1227   FBBC C3 2F F9    	jp printhexbyte
1228   FBBF             ; 675 }
1229   FBBF             ; 676 
1230   FBBF             ; 677 /* K - Вывод символа с клавиатуры на экран */
1231   FBBF             ; 678 
1232   FBBF             ; 679 void CmdK() {
1233   FBBF             cmdk: 
1234   FBBF             ; 680     PrintLf();
1235   FBBF CD C6 FD    	call printlf
1236   FBC2             ; 681     for (;;) {
1237   FBC2             l_58: 
1238   FBC2             ; 682         ReadKey();
1239   FBC2 CD AC FE    	call readkey
1240   FBC5             ; 683         if (a == 0) /* УС + @ */
1241   FBC5 B7          	or a
1242   FBC6             ; 684             return;
1243   FBC6 C8          	ret z
1244   FBC7             ; 685         PrintCharA(a);
1245   FBC7 CD C8 FD    	call printchara
1246   FBCA C3 C2 FB    	jp l_58
1247   FBCD             ; 686     }
1248   FBCD             ; 687 }
1249   FBCD             ; 688 
1250   FBCD             ; 689 /* Q<начало>,<конец> - Тестирование области памяти */
1251   FBCD             ; 690 
1252   FBCD             ; 691 void CmdQ() {
1253   FBCD             cmdq: 
1254   FBCD             ; 692     ParseParams();
1255   FBCD CD B2 F8    	call parseparams
1256   FBD0             ; 693     for (;;) {
1257   FBD0             l_61: 
1258   FBD0             ; 694         hl = param1;
1259   FBD0 2A 51 F7    	ld hl, (param1)
1260   FBD3             ; 695         c = *hl;
1261   FBD3 4E          	ld c, (hl)
1262   FBD4             ; 696 
1263   FBD4             ; 697         a = 0x55;
1264   FBD4 3E 55       	ld a, 85
1265   FBD6             ; 698         *hl = a;
1266   FBD6 77          	ld (hl), a
1267   FBD7             ; 699         if (a != *hl)
1268   FBD7 BE          	cp (hl)
1269   FBD8             ; 700             CmdQResult();
1270   FBD8 C4 E9 FB    	call nz, cmdqresult
1271   FBDB             ; 701 
1272   FBDB             ; 702         a = 0xAA;
1273   FBDB 3E AA       	ld a, 170
1274   FBDD             ; 703         *hl = a;
1275   FBDD 77          	ld (hl), a
1276   FBDE             ; 704         if (a != *hl)
1277   FBDE BE          	cp (hl)
1278   FBDF             ; 705             CmdQResult();
1279   FBDF C4 E9 FB    	call nz, cmdqresult
1280   FBE2             ; 706 
1281   FBE2             ; 707         *hl = c;
1282   FBE2 71          	ld (hl), c
1283   FBE3             ; 708         Loop();
1284   FBE3 CD 5A F9    	call loop
1285   FBE6 C3 D0 FB    	jp l_61
1286   FBE9             ; 709     }
1287   FBE9             ; 710 }
1288   FBE9             ; 711 
1289   FBE9             ; 712 void CmdQResult(...) {
1290   FBE9             cmdqresult: 
1291   FBE9             ; 713     push_pop(a) {
1292   FBE9 F5          	push af
1293   FBEA             ; 714         PrintLfParam1Space();
1294   FBEA CD 46 F9    	call printlfparam1space
1295   FBED             ; 715         PrintByteFromParam1();
1296   FBED CD 2B F9    	call printbytefromparam1
1297   FBF0             ; 716         PrintSpace();
1298   FBF0 CD 55 F9    	call printspace
1299   FBF3 F1          	pop af
1300   FBF4             ; 717     }
1301   FBF4             ; 718     PrintHexByte(a);
1302   FBF4 C3 2F F9    	jp printhexbyte
1303   FBF7             ; 719 }
1304   FBF7             ; 720 
1305   FBF7             ; 721 /* L<начало>,<конец> - Посмотр области памяти в символьном виде */
1306   FBF7             ; 722 
1307   FBF7             ; 723 void CmdL() {
1308   FBF7             cmdl: 
1309   FBF7             ; 724     ParseParams();
1310   FBF7 CD B2 F8    	call parseparams
1311   FBFA             ; 725     PrintLfParam1Space();
1312   FBFA CD 46 F9    	call printlfparam1space
1313   FBFD             ; 726     for (;;) {
1314   FBFD             l_64: 
1315   FBFD             ; 727         hl = param1;
1316   FBFD 2A 51 F7    	ld hl, (param1)
1317   FC00             ; 728         a = *hl;
1318   FC00 7E          	ld a, (hl)
1319   FC01             ; 729         if (a < 0x20)
1320   FC01 FE 20       	cp 32
1321   FC03             ; 730             a = '.';
1322   FC03 D2 08 FC    	jp nc, l_66
1323   FC06 3E 2E       	ld a, 46
1324   FC08             l_66: 
1325   FC08             ; 731         PrintCharA();
1326   FC08 CD C8 FD    	call printchara
1327   FC0B             ; 732         Loop();
1328   FC0B CD 5A F9    	call loop
1329   FC0E             ; 733         PrintSpace();
1330   FC0E CD 55 F9    	call printspace
1331   FC11             ; 734         if (flag_z((a = param1) &= 0x0F))
1332   FC11 3A 51 F7    	ld a, (param1)
1333   FC14 E6 0F       	and 15
1334   FC16             ; 735             PrintLfParam1Space();
1335   FC16 CC 46 F9    	call z, printlfparam1space
1336   FC19 C3 FD FB    	jp l_64
1337   FC1C             ; 736     }
1338   FC1C             ; 737 }
1339   FC1C             ; 738 
1340   FC1C             ; 739 /* H<число 1>,<число 2> - Сложение и вычитание чисел */
1341   FC1C             ; 740 
1342   FC1C             ; 741 void CmdH(...) {
1343   FC1C             cmdh: 
1344   FC1C             ; 742     de = &cmdBuffer1;
1345   FC1C 11 7C F7    	ld de, 0FFFFh & (cmdbuffer1)
1346   FC1F             ; 743     ParseDword();
1347   FC1F CD EF F8    	call parsedword
1348   FC22             ; 744     param1 = hl;
1349   FC22 22 51 F7    	ld (param1), hl
1350   FC25             ; 745     ParseDword();
1351   FC25 CD EF F8    	call parsedword
1352   FC28             ; 746     param2 = hl;
1353   FC28 22 53 F7    	ld (param2), hl
1354   FC2B             ; 747 
1355   FC2B             ; 748     /* param1 + param2 */
1356   FC2B             ; 749     swap(hl, de);
1357   FC2B EB          	ex hl, de
1358   FC2C             ; 750     hl = param1;
1359   FC2C 2A 51 F7    	ld hl, (param1)
1360   FC2F             ; 751     push(hl);
1361   FC2F E5          	push hl
1362   FC30             ; 752     hl += de;
1363   FC30 19          	add hl, de
1364   FC31             ; 753     param1 = hl;
1365   FC31 22 51 F7    	ld (param1), hl
1366   FC34             ; 754     PrintLfParam1Space();
1367   FC34 CD 46 F9    	call printlfparam1space
1368   FC37             ; 755 
1369   FC37             ; 756     /* param1 - param2 */
1370   FC37             ; 757     pop(hl);
1371   FC37 E1          	pop hl
1372   FC38             ; 758     a = e;
1373   FC38 7B          	ld a, e
1374   FC39             ; 759     invert(a);
1375   FC39 2F          	cpl
1376   FC3A             ; 760     e = a;
1377   FC3A 5F          	ld e, a
1378   FC3B             ; 761     a = d;
1379   FC3B 7A          	ld a, d
1380   FC3C             ; 762     invert(a);
1381   FC3C 2F          	cpl
1382   FC3D             ; 763     d = a;
1383   FC3D 57          	ld d, a
1384   FC3E             ; 764     de++;
1385   FC3E 13          	inc de
1386   FC3F             ; 765     hl += de;
1387   FC3F 19          	add hl, de
1388   FC40             ; 766     param1 = hl;
1389   FC40 22 51 F7    	ld (param1), hl
1390   FC43             ; 767     PrintParam1Space();
1391   FC43 C3 49 F9    	jp printparam1space
1392   FC46             ; 768 }
1393   FC46             ; 769 
1394   FC46             ; 770 /* I - Ввод информации с магнитной ленты */
1395   FC46             ; 771 
1396   FC46             ; 772 void CmdI() {
1397   FC46             cmdi: 
1398   FC46             ; 773     ReadTapeByte(a = READ_TAPE_FIRST_BYTE);
1399   FC46 3E FF       	ld a, 255
1400   FC48 CD FC FC    	call readtapebyte
1401   FC4B             ; 774     param1h = a;
1402   FC4B 32 52 F7    	ld (param1h), a
1403   FC4E             ; 775     tapeStartH = a;
1404   FC4E 32 5F F7    	ld (tapestarth), a
1405   FC51             ; 776 
1406   FC51             ; 777     ReadTapeByteNext();
1407   FC51 CD FA FC    	call readtapebytenext
1408   FC54             ; 778     param1 = a;
1409   FC54 32 51 F7    	ld (param1), a
1410   FC57             ; 779     tapeStartL = a;
1411   FC57 32 5E F7    	ld (tapestartl), a
1412   FC5A             ; 780 
1413   FC5A             ; 781     ReadTapeByteNext();
1414   FC5A CD FA FC    	call readtapebytenext
1415   FC5D             ; 782     param2h = a;
1416   FC5D 32 54 F7    	ld (param2h), a
1417   FC60             ; 783     tapeStopH = a;
1418   FC60 32 61 F7    	ld (tapestoph), a
1419   FC63             ; 784 
1420   FC63             ; 785     ReadTapeByteNext();
1421   FC63 CD FA FC    	call readtapebytenext
1422   FC66             ; 786     param2 = a;
1423   FC66 32 53 F7    	ld (param2), a
1424   FC69             ; 787     tapeStopL = a;
1425   FC69 32 60 F7    	ld (tapestopl), a
1426   FC6C             ; 788 
1427   FC6C             ; 789     hl = &CmdIEnd;
1428   FC6C 21 7D FC    	ld hl, 0FFFFh & (cmdiend)
1429   FC6F             ; 790     push(hl);
1430   FC6F E5          	push hl
1431   FC70             ; 791 
1432   FC70             ; 792     for (;;) {
1433   FC70             l_69: 
1434   FC70             ; 793         hl = param1;
1435   FC70 2A 51 F7    	ld hl, (param1)
1436   FC73             ; 794         ReadTapeByteNext(a);
1437   FC73 CD FA FC    	call readtapebytenext
1438   FC76             ; 795         *hl = a;
1439   FC76 77          	ld (hl), a
1440   FC77             ; 796         Loop();
1441   FC77 CD 5A F9    	call loop
1442   FC7A C3 70 FC    	jp l_69
1443   FC7D             ; 797     }
1444   FC7D             ; 798 }
1445   FC7D             ; 799 
1446   FC7D             ; 800 void CmdIEnd(...) {
1447   FC7D             cmdiend: 
1448   FC7D             ; 801     PrintLf();
1449   FC7D CD C6 FD    	call printlf
1450   FC80             ; 802     PrintHexWordSpace(hl = &tapeStartH);
1451   FC80 21 5F F7    	ld hl, 0FFFFh & (tapestarth)
1452   FC83 CD 4C F9    	call printhexwordspace
1453   FC86             ; 803     PrintHexWordSpace(hl = &tapeStopH);
1454   FC86 21 61 F7    	ld hl, 0FFFFh & (tapestoph)
1455   FC89 C3 4C F9    	jp printhexwordspace
1456   FC8C             ; 804 }
1457   FC8C             ; 805 
1458   FC8C             ; 806 /* O<начало>,<конец> - Вывод содержимого области памяти на магнитную ленту */
1459   FC8C             ; 807 
1460   FC8C             ; 808 void CmdO() {
1461   FC8C             cmdo: 
1462   FC8C             ; 809     ParseParams();
1463   FC8C CD B2 F8    	call parseparams
1464   FC8F             ; 810     a ^= a;
1465   FC8F AF          	xor a
1466   FC90             ; 811     b = a;
1467   FC90 47          	ld b, a
1468   FC91             ; 812     do {
1469   FC91             l_71: 
1470   FC91             ; 813         WriteTapeByte(a);
1471   FC91 CD 4D FD    	call writetapebyte
1472   FC94             l_72: 
1473   FC94             ; 814     } while (flag_nz(b--));
1474   FC94 05          	dec b
1475   FC95 C2 91 FC    	jp nz, l_71
1476   FC98             ; 815     WriteTapeByte(a = TAPE_START);
1477   FC98 3E E6       	ld a, 230
1478   FC9A CD 4D FD    	call writetapebyte
1479   FC9D             ; 816     WriteTapeByte(a = param1h);
1480   FC9D 3A 52 F7    	ld a, (param1h)
1481   FCA0 CD 4D FD    	call writetapebyte
1482   FCA3             ; 817     WriteTapeByte(a = param1);
1483   FCA3 3A 51 F7    	ld a, (param1)
1484   FCA6 CD 4D FD    	call writetapebyte
1485   FCA9             ; 818     WriteTapeByte(a = param2h);
1486   FCA9 3A 54 F7    	ld a, (param2h)
1487   FCAC CD 4D FD    	call writetapebyte
1488   FCAF             ; 819     WriteTapeByte(a = param2);
1489   FCAF 3A 53 F7    	ld a, (param2)
1490   FCB2 CD 4D FD    	call writetapebyte
1491   FCB5             ; 820     for (;;) {
1492   FCB5             l_75: 
1493   FCB5             ; 821         hl = param1;
1494   FCB5 2A 51 F7    	ld hl, (param1)
1495   FCB8             ; 822         a = *hl;
1496   FCB8 7E          	ld a, (hl)
1497   FCB9             ; 823         WriteTapeByte(a);
1498   FCB9 CD 4D FD    	call writetapebyte
1499   FCBC             ; 824         Loop();
1500   FCBC CD 5A F9    	call loop
1501   FCBF C3 B5 FC    	jp l_75
1502   FCC2             ; 825     }
1503   FCC2             ; 826 }
1504   FCC2             ; 827 
1505   FCC2             ; 828 /* V - Сравнение информации на магнитной ленте с содержимым области памяти */
1506   FCC2             ; 829 
1507   FCC2             ; 830 void CmdV() {
1508   FCC2             cmdv: 
1509   FCC2             ; 831     ReadTapeByte(a = READ_TAPE_FIRST_BYTE);
1510   FCC2 3E FF       	ld a, 255
1511   FCC4 CD FC FC    	call readtapebyte
1512   FCC7             ; 832     param1h = a;
1513   FCC7 32 52 F7    	ld (param1h), a
1514   FCCA             ; 833     ReadTapeByteNext();
1515   FCCA CD FA FC    	call readtapebytenext
1516   FCCD             ; 834     param1 = a;
1517   FCCD 32 51 F7    	ld (param1), a
1518   FCD0             ; 835     ReadTapeByteNext();
1519   FCD0 CD FA FC    	call readtapebytenext
1520   FCD3             ; 836     param2h = a;
1521   FCD3 32 54 F7    	ld (param2h), a
1522   FCD6             ; 837     ReadTapeByteNext();
1523   FCD6 CD FA FC    	call readtapebytenext
1524   FCD9             ; 838     param2 = a;
1525   FCD9 32 53 F7    	ld (param2), a
1526   FCDC             ; 839     for (;;) {
1527   FCDC             l_78: 
1528   FCDC             ; 840         ReadTapeByteNext();
1529   FCDC CD FA FC    	call readtapebytenext
1530   FCDF             ; 841         hl = param1;
1531   FCDF 2A 51 F7    	ld hl, (param1)
1532   FCE2             ; 842         if (a != *hl) {
1533   FCE2 BE          	cp (hl)
1534   FCE3 CA F4 FC    	jp z, l_80
1535   FCE6             ; 843             push_pop(a) {
1536   FCE6 F5          	push af
1537   FCE7             ; 844                 PrintLfParam1Space();
1538   FCE7 CD 46 F9    	call printlfparam1space
1539   FCEA             ; 845                 PrintByteFromParam1();
1540   FCEA CD 2B F9    	call printbytefromparam1
1541   FCED             ; 846                 PrintSpace();
1542   FCED CD 55 F9    	call printspace
1543   FCF0 F1          	pop af
1544   FCF1             ; 847             }
1545   FCF1             ; 848             PrintHexByte();
1546   FCF1 CD 2F F9    	call printhexbyte
1547   FCF4             l_80: 
1548   FCF4             ; 849         }
1549   FCF4             ; 850         Loop();
1550   FCF4 CD 5A F9    	call loop
1551   FCF7 C3 DC FC    	jp l_78
1552   FCFA             ; 851     }
1553   FCFA             ; 852 }
1554   FCFA             ; 853 
1555   FCFA             ; 854 void ReadTapeByteNext() {
1556   FCFA             readtapebytenext: 
1557   FCFA             ; 855     ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1558   FCFA 3E 08       	ld a, 8
1559   FCFC             ; 856 }
1560   FCFC             ; 857 
1561   FCFC             ; 858 void ReadTapeByte(...) {
1562   FCFC             readtapebyte: 
1563   FCFC             ; 859     push(bc, de);
1564   FCFC C5          	push bc
1565   FCFD D5          	push de
1566   FCFE             ; 860     c = 0;
1567   FCFE 0E 00       	ld c, 0
1568   FD00             ; 861     d = a;
1569   FD00 57          	ld d, a
1570   FD01             ; 862     e = a = in(PORT_TAPE);
1571   FD01 DB 01       	in a, (1)
1572   FD03 5F          	ld e, a
1573   FD04             ; 863     do {
1574   FD04             l_82: 
1575   FD04             ; 864     loc_FD9D:
1576   FD04             loc_fd9d: 
1577   FD04             ; 865         a = c;
1578   FD04 79          	ld a, c
1579   FD05             ; 866         a &= 0x7F;
1580   FD05 E6 7F       	and 127
1581   FD07             ; 867         cyclic_rotate_left(a, 1);
1582   FD07 07          	rlca
1583   FD08             ; 868         c = a;
1584   FD08 4F          	ld c, a
1585   FD09             ; 869 
1586   FD09             ; 870         do {
1587   FD09             l_85: 
1588   FD09             ; 871             a = in(PORT_TAPE);
1589   FD09 DB 01       	in a, (1)
1590   FD0B             l_86: 
1591   FD0B             ; 872         } while (a == e);
1592   FD0B BB          	cp e
1593   FD0C CA 09 FD    	jp z, l_85
1594   FD0F             ; 873         a &= 1;
1595   FD0F E6 01       	and 1
1596   FD11             ; 874         a |= c;
1597   FD11 B1          	or c
1598   FD12             ; 875         c = a;
1599   FD12 4F          	ld c, a
1600   FD13             ; 876         ReadTapeDelay();
1601   FD13 CD 42 FD    	call readtapedelay
1602   FD16             ; 877         e = a = in(PORT_TAPE);
1603   FD16 DB 01       	in a, (1)
1604   FD18 5F          	ld e, a
1605   FD19             ; 878         if (flag_m((a = d) |= a)) {
1606   FD19 7A          	ld a, d
1607   FD1A B7          	or a
1608   FD1B F2 37 FD    	jp p, l_88
1609   FD1E             ; 879             if ((a = c) == TAPE_START) {
1610   FD1E 79          	ld a, c
1611   FD1F FE E6       	cp 230
1612   FD21 C2 2B FD    	jp nz, l_90
1613   FD24             ; 880                 tapePolarity = (a ^= a);
1614   FD24 AF          	xor a
1615   FD25 32 57 F7    	ld (tapepolarity), a
1616   FD28 C3 35 FD    	jp l_91
1617   FD2B             l_90: 
1618   FD2B             ; 881             } else {
1619   FD2B             ; 882                 if (a != (0xFF ^ TAPE_START))
1620   FD2B FE 19       	cp 25
1621   FD2D             ; 883                     goto loc_FD9D;
1622   FD2D C2 04 FD    	jp nz, loc_fd9d
1623   FD30             ; 884                 tapePolarity = a = 0xFF;
1624   FD30 3E FF       	ld a, 255
1625   FD32 32 57 F7    	ld (tapepolarity), a
1626   FD35             l_91: 
1627   FD35             ; 885             }
1628   FD35             ; 886             d = 8 + 1;
1629   FD35 16 09       	ld d, 9
1630   FD37             l_88: 
1631   FD37             l_83: 
1632   FD37             ; 887         }
1633   FD37             ; 888     } while (flag_nz(d--));
1634   FD37 15          	dec d
1635   FD38 C2 04 FD    	jp nz, l_82
1636   FD3B             ; 889     a = tapePolarity;
1637   FD3B 3A 57 F7    	ld a, (tapepolarity)
1638   FD3E             ; 890     a ^= c;
1639   FD3E A9          	xor c
1640   FD3F             ; 891     pop(bc, de);
1641   FD3F D1          	pop de
1642   FD40 C1          	pop bc
1643   FD41 C9          	ret
1644   FD42             ; 892 }
1645   FD42             ; 893 
1646   FD42             ; 894 void ReadTapeDelay(...) {
1647   FD42             readtapedelay: 
1648   FD42             ; 895     push(a);
1649   FD42 F5          	push af
1650   FD43             ; 896     TapeDelay(a = readDelay);
1651   FD43 3A 5C F7    	ld a, (readdelay)
1652   FD46             ; 897 }
1653   FD46             ; 898 
1654   FD46             ; 899 void TapeDelay(...) {
1655   FD46             tapedelay: 
1656   FD46             ; 900     b = a;
1657   FD46 47          	ld b, a
1658   FD47             ; 901     pop(a);
1659   FD47 F1          	pop af
1660   FD48             ; 902     do {
1661   FD48             l_92: 
1662   FD48             l_93: 
1663   FD48             ; 903     } while (flag_nz(b--));
1664   FD48 05          	dec b
1665   FD49 C2 48 FD    	jp nz, l_92
1666   FD4C C9          	ret
1667   FD4D             ; 904 }
1668   FD4D             ; 905 
1669   FD4D             ; 906 void WriteTapeByte(...) {
1670   FD4D             writetapebyte: 
1671   FD4D             ; 907     push_pop(bc, de, a) {
1672   FD4D C5          	push bc
1673   FD4E D5          	push de
1674   FD4F F5          	push af
1675   FD50             ; 908         d = a;
1676   FD50 57          	ld d, a
1677   FD51             ; 909         c = 8;
1678   FD51 0E 08       	ld c, 8
1679   FD53             ; 910         do {
1680   FD53             l_95: 
1681   FD53             ; 911             a = d;
1682   FD53 7A          	ld a, d
1683   FD54             ; 912             cyclic_rotate_left(a, 1);
1684   FD54 07          	rlca
1685   FD55             ; 913             d = a;
1686   FD55 57          	ld d, a
1687   FD56             ; 914 
1688   FD56             ; 915             out(PORT_TAPE, (a = 1) ^= d);
1689   FD56 3E 01       	ld a, 1
1690   FD58 AA          	xor d
1691   FD59 D3 01       	out (1), a
1692   FD5B             ; 916             WriteTapeDelay();
1693   FD5B CD 6E FD    	call writetapedelay
1694   FD5E             ; 917 
1695   FD5E             ; 918             out(PORT_TAPE, (a = 0) ^= d);
1696   FD5E 3E 00       	ld a, 0
1697   FD60 AA          	xor d
1698   FD61 D3 01       	out (1), a
1699   FD63             ; 919             WriteTapeDelay();
1700   FD63 CD 6E FD    	call writetapedelay
1701   FD66             l_96: 
1702   FD66             ; 920         } while (flag_nz(c--));
1703   FD66 0D          	dec c
1704   FD67 C2 53 FD    	jp nz, l_95
1705   FD6A F1          	pop af
1706   FD6B D1          	pop de
1707   FD6C C1          	pop bc
1708   FD6D C9          	ret
1709   FD6E             ; 921     }
1710   FD6E             ; 922 }
1711   FD6E             ; 923 
1712   FD6E             ; 924 void WriteTapeDelay(...) {
1713   FD6E             writetapedelay: 
1714   FD6E             ; 925     push(a);
1715   FD6E F5          	push af
1716   FD6F             ; 926     TapeDelay(a = writeDelay);
1717   FD6F 3A 5D F7    	ld a, (writedelay)
1718   FD72 C3 46 FD    	jp tapedelay
1719   FD75             ; 927 }
1720   FD75             ; 928 
1721   FD75             ; 929 uint8_t monitorCommands = 'M';
1722   FD75             monitorcommands: 
1723   FD75 4D          	db 77
1724   FD76             ; 930  monitorCommandsMa = &CmdM;
1725   FD76             monitorcommandsma: 
1726   FD76 89 FB       	dw 0FFFFh & (cmdm)
1727   FD78             ; 931  monitorCommandsC = 'C';
1728   FD78             monitorcommandsc: 
1729   FD78 43          	db 67
1730   FD79             ; 932  monitorCommandsCa = &CmdC;
1731   FD79             monitorcommandsca: 
1732   FD79 30 FB       	dw 0FFFFh & (cmdc)
1733   FD7B             ; 933  monitorCommandsD = 'D';
1734   FD7B             monitorcommandsd: 
1735   FD7B 44          	db 68
1736   FD7C             ; 934  monitorCommandsDa = &CmdD;
1737   FD7C             monitorcommandsda: 
1738   FD7C 16 FB       	dw 0FFFFh & (cmdd)
1739   FD7E             ; 935  monitorCommandsB = 'B';
1740   FD7E             monitorcommandsb: 
1741   FD7E 42          	db 66
1742   FD7F             ; 936  monitorCommandsBa = &CmdB;
1743   FD7F             monitorcommandsba: 
1744   FD7F 05 FA       	dw 0FFFFh & (cmdb)
1745   FD81             ; 937  monitorCommandsG = 'G';
1746   FD81             monitorcommandsg: 
1747   FD81 47          	db 71
1748   FD82             ; 938  monitorCommandsGa = &CmdG;
1749   FD82             monitorcommandsga: 
1750   FD82 73 FA       	dw 0FFFFh & (cmdg)
1751   FD84             ; 939  monitorCommandsP = 'P';
1752   FD84             monitorcommandsp: 
1753   FD84 50          	db 80
1754   FD85             ; 940  monitorCommandsPa = &CmdP;
1755   FD85             monitorcommandspa: 
1756   FD85 94 FA       	dw 0FFFFh & (cmdp)
1757   FD87             ; 941  monitorCommandsX = 'X';
1758   FD87             monitorcommandsx: 
1759   FD87 58          	db 88
1760   FD88             ; 942  monitorCommandsXa = &CmdX;
1761   FD88             monitorcommandsxa: 
1762   FD88 73 F9       	dw 0FFFFh & (cmdx)
1763   FD8A             ; 943  monitorCommandsF = 'F';
1764   FD8A             monitorcommandsf: 
1765   FD8A 46          	db 70
1766   FD8B             ; 944  monitorCommandsFa = &CmdF;
1767   FD8B             monitorcommandsfa: 
1768   FD8B 53 FB       	dw 0FFFFh & (cmdf)
1769   FD8D             ; 945  monitorCommandsS = 'S';
1770   FD8D             monitorcommandss: 
1771   FD8D 53          	db 83
1772   FD8E             ; 946  monitorCommandsSa = &CmdS;
1773   FD8E             monitorcommandssa: 
1774   FD8E 64 FB       	dw 0FFFFh & (cmds)
1775   FD90             ; 947  monitorCommandsT = 'T';
1776   FD90             monitorcommandst: 
1777   FD90 54          	db 84
1778   FD91             ; 948  monitorCommandsTa = &CmdT;
1779   FD91             monitorcommandsta: 
1780   FD91 76 FB       	dw 0FFFFh & (cmdt)
1781   FD93             ; 949  monitorCommandsI = 'I';
1782   FD93             monitorcommandsi: 
1783   FD93 49          	db 73
1784   FD94             ; 950  monitorCommandsIa = &CmdI;
1785   FD94             monitorcommandsia: 
1786   FD94 46 FC       	dw 0FFFFh & (cmdi)
1787   FD96             ; 951  monitorCommandsO = 'O';
1788   FD96             monitorcommandso: 
1789   FD96 4F          	db 79
1790   FD97             ; 952  monitorCommandsOa = &CmdO;
1791   FD97             monitorcommandsoa: 
1792   FD97 8C FC       	dw 0FFFFh & (cmdo)
1793   FD99             ; 953  monitorCommandsV = 'V';
1794   FD99             monitorcommandsv: 
1795   FD99 56          	db 86
1796   FD9A             ; 954  monitorCommandsVa = &CmdV;
1797   FD9A             monitorcommandsva: 
1798   FD9A C2 FC       	dw 0FFFFh & (cmdv)
1799   FD9C             ; 955  monitorCommandsJ = 'J';
1800   FD9C             monitorcommandsj: 
1801   FD9C 4A          	db 74
1802   FD9D             ; 956  monitorCommandsJa = &CmdJ;
1803   FD9D             monitorcommandsja: 
1804   FD9D AF FB       	dw 0FFFFh & (cmdj)
1805   FD9F             ; 957  monitorCommandsA = 'A';
1806   FD9F             monitorcommandsa: 
1807   FD9F 41          	db 65
1808   FDA0             ; 958  monitorCommandsAa = &CmdA;
1809   FDA0             monitorcommandsaa: 
1810   FDA0 B6 FB       	dw 0FFFFh & (cmda)
1811   FDA2             ; 959  monitorCommandsK = 'K';
1812   FDA2             monitorcommandsk: 
1813   FDA2 4B          	db 75
1814   FDA3             ; 960  monitorCommandsKa = &CmdK;
1815   FDA3             monitorcommandska: 
1816   FDA3 BF FB       	dw 0FFFFh & (cmdk)
1817   FDA5             ; 961  monitorCommandsQ = 'Q';
1818   FDA5             monitorcommandsq: 
1819   FDA5 51          	db 81
1820   FDA6             ; 962  monitorCommandsQa = &CmdQ;
1821   FDA6             monitorcommandsqa: 
1822   FDA6 CD FB       	dw 0FFFFh & (cmdq)
1823   FDA8             ; 963  monitorCommandsL = 'L';
1824   FDA8             monitorcommandsl: 
1825   FDA8 4C          	db 76
1826   FDA9             ; 964  monitorCommandsLa = &CmdL;
1827   FDA9             monitorcommandsla: 
1828   FDA9 F7 FB       	dw 0FFFFh & (cmdl)
1829   FDAB             ; 965  monitorCommandsH = 'H';
1830   FDAB             monitorcommandsh: 
1831   FDAB 48          	db 72
1832   FDAC             ; 966  monitorCommandsHa = &CmdH;
1833   FDAC             monitorcommandsha: 
1834   FDAC 1C FC       	dw 0FFFFh & (cmdh)
1835   FDAE             ; 967  monitorCommandsEnd = 0;
1836   FDAE             monitorcommandsend: 
1837   FDAE 00          	db 0
1838   FDAF             ; 969  aHello[] = "\x1F*MikrO/80* MONITOR";
1839   FDAF             ahello: 
1840   FDAF 1F          	db 31
1841   FDB0 2A          	db 42
1842   FDB1 4D          	db 77
1843   FDB2 69          	db 105
1844   FDB3 6B          	db 107
1845   FDB4 72          	db 114
1846   FDB5 4F          	db 79
1847   FDB6 2F          	db 47
1848   FDB7 38          	db 56
1849   FDB8 30          	db 48
1850   FDB9 2A          	db 42
1851   FDBA 20          	db 32
1852   FDBB 4D          	db 77
1853   FDBC 4F          	db 79
1854   FDBD 4E          	db 78
1855   FDBE 49          	db 73
1856   FDBF 54          	db 84
1857   FDC0 4F          	db 79
1858   FDC1 52          	db 82
1859   FDC2 00          	ds 1
1860   FDC3             ; 970  aPrompt[] = "\x0A>";
1861   FDC3             aprompt: 
1862   FDC3 0A          	db 10
1863   FDC4 3E          	db 62
1864   FDC5 00          	ds 1
1865   FDC6             ; 972  PrintLf(...) {
1866   FDC6             printlf: 
1867   FDC6             ; 973     PrintCharA(a = 0x0A);
1868   FDC6 3E 0A       	ld a, 10
1869   FDC8             ; 974 }
1870   FDC8             ; 975 
1871   FDC8             ; 976 void PrintCharA(...) {
1872   FDC8             printchara: 
1873   FDC8             ; 977     push(bc);
1874   FDC8 C5          	push bc
1875   FDC9             ; 978     PrintCharInt(c = a);
1876   FDC9 4F          	ld c, a
1877   FDCA C3 CE FD    	jp printcharint
1878   FDCD             ; 979 }
1879   FDCD             ; 980 
1880   FDCD             ; 981 void PrintChar(...) {
1881   FDCD             printchar: 
1882   FDCD             ; 982     push(bc);
1883   FDCD C5          	push bc
1884   FDCE             ; 983     PrintCharInt(c);
1885   FDCE             ; 984 }
1886   FDCE             ; 985 
1887   FDCE             ; 986 void PrintCharInt(...) {
1888   FDCE             printcharint: 
1889   FDCE             ; 987     push(hl, de, a);
1890   FDCE E5          	push hl
1891   FDCF D5          	push de
1892   FDD0 F5          	push af
1893   FDD1             ; 988 
1894   FDD1             ; 989     /* Hide cursor */
1895   FDD1             ; 990     hl = cursor;
1896   FDD1 2A 5A F7    	ld hl, (cursor)
1897   FDD4             ; 991     de = -SCREEN_SIZE;
1898   FDD4 11 00 F8    	ld de, 63488
1899   FDD7             ; 992     push_pop(hl) {
1900   FDD7 E5          	push hl
1901   FDD8             ; 993         hl += de;
1902   FDD8 19          	add hl, de
1903   FDD9             ; 994         a = *hl;
1904   FDD9 7E          	ld a, (hl)
1905   FDDA             ; 995         a &= 0xFF ^ SCREEN_ATTRIB_UNDERLINE;
1906   FDDA E6 7F       	and 127
1907   FDDC             ; 996         *hl = a;
1908   FDDC 77          	ld (hl), a
1909   FDDD E1          	pop hl
1910   FDDE             ; 997     }
1911   FDDE             ; 998 
1912   FDDE             ; 999     a = c;
1913   FDDE 79          	ld a, c
1914   FDDF             ; 1000     if (a < 32) {
1915   FDDF FE 20       	cp 32
1916   FDE1 D2 05 FE    	jp nc, l_98
1917   FDE4             ; 1001         a -= 0x08;
1918   FDE4 D6 08       	sub 8
1919   FDE6             ; 1002         if (flag_z)
1920   FDE6             ; 1003             return MoveCursorLeft(hl);
1921   FDE6 CA 83 FE    	jp z, movecursorleft
1922   FDE9             ; 1004         a -= 0x0A - 0x08;
1923   FDE9 D6 02       	sub 2
1924   FDEB             ; 1005         if (flag_z)
1925   FDEB             ; 1006             return MoveCursorNextLine(hl);
1926   FDEB CA 90 FE    	jp z, movecursornextline
1927   FDEE             ; 1007         a -= 0x0C - 0x0A;
1928   FDEE D6 02       	sub 2
1929   FDF0             ; 1008         if (flag_z)
1930   FDF0             ; 1009             return MoveCursorHome();
1931   FDF0 CA 7D FE    	jp z, movecursorhome
1932   FDF3             ; 1010         a -= 0x18 - 0x0C;
1933   FDF3 D6 0C       	sub 12
1934   FDF5             ; 1011         if (flag_z)
1935   FDF5             ; 1012             return MoveCursorRight(hl);
1936   FDF5 CA 0D FE    	jp z, movecursorright
1937   FDF8             ; 1013         a--; /* 0x19 */
1938   FDF8 3D          	dec a
1939   FDF9             ; 1014         if (flag_z)
1940   FDF9             ; 1015             return MoveCursorUp(hl);
1941   FDF9 CA 9B FE    	jp z, movecursorup
1942   FDFC             ; 1016         a--; /* 0x1A */
1943   FDFC 3D          	dec a
1944   FDFD             ; 1017         if (flag_z)
1945   FDFD             ; 1018             return MoveCursorDown(hl);
1946   FDFD CA 94 FE    	jp z, movecursordown
1947   FE00             ; 1019         a -= 0x1F - 0x1A;
1948   FE00 D6 05       	sub 5
1949   FE02             ; 1020         if (flag_z)
1950   FE02             ; 1021             return ClearScreen();
1951   FE02 CA 63 FE    	jp z, clearscreen
1952   FE05             l_98: 
1953   FE05             ; 1022     }
1954   FE05             ; 1023 
1955   FE05             ; 1024     *hl = c;
1956   FE05 71          	ld (hl), c
1957   FE06             ; 1025     push_pop(hl) {
1958   FE06 E5          	push hl
1959   FE07             ; 1026         hl += de;
1960   FE07 19          	add hl, de
1961   FE08             ; 1027         *hl = a = color;
1962   FE08 3A 59 F7    	ld a, (color)
1963   FE0B 77          	ld (hl), a
1964   FE0C E1          	pop hl
1965   FE0D             ; 1028     }
1966   FE0D             ; 1029     return MoveCursorRight();
1967   FE0D             ; 1030 }
1968   FE0D             ; 1031 
1969   FE0D             ; 1032 void MoveCursorRight(...) {
1970   FE0D             movecursorright: 
1971   FE0D             ; 1033     hl++;
1972   FE0D 23          	inc hl
1973   FE0E             ; 1034     return MoveCursor(hl);
1974   FE0E             ; 1035 }
1975   FE0E             ; 1036 
1976   FE0E             ; 1037 void MoveCursor(...) {
1977   FE0E             movecursor: 
1978   FE0E             ; 1038     swap(hl, de);
1979   FE0E EB          	ex hl, de
1980   FE0F             ; 1039     hl = -(SCREEN_BEGIN + SCREEN_WIDTH * SCREEN_HEIGHT);
1981   FE0F 21 C0 11    	ld hl, 4544
1982   FE12             ; 1040     hl += de;
1983   FE12 19          	add hl, de
1984   FE13             ; 1041     swap(hl, de);
1985   FE13 EB          	ex hl, de
1986   FE14             ; 1042     if (flag_c) {
1987   FE14 D2 45 FE    	jp nc, l_100
1988   FE17             ; 1043         push_pop(hl) {
1989   FE17 E5          	push hl
1990   FE18             ; 1044             /* Scroll up */
1991   FE18             ; 1045             hl = SCREEN_BEGIN + SCREEN_WIDTH * SCREEN_HEIGHT - 1;
1992   FE18 21 3F EE    	ld hl, 60991
1993   FE1B             ; 1046             c = SCREEN_WIDTH;
1994   FE1B 0E 40       	ld c, 64
1995   FE1D             ; 1047             do {
1996   FE1D             l_102: 
1997   FE1D             ; 1048                 push_pop(hl) {
1998   FE1D E5          	push hl
1999   FE1E             ; 1049                     de = SCREEN_SIZE - SCREEN_WIDTH;
2000   FE1E 11 C0 07    	ld de, 1984
2001   FE21             ; 1050                     b = 0;
2002   FE21 06 00       	ld b, 0
2003   FE23             ; 1051                     c = a = color;
2004   FE23 3A 59 F7    	ld a, (color)
2005   FE26 4F          	ld c, a
2006   FE27             ; 1052                     do {
2007   FE27             l_105: 
2008   FE27             ; 1053                         a = b;
2009   FE27 78          	ld a, b
2010   FE28             ; 1054                         b = *hl;
2011   FE28 46          	ld b, (hl)
2012   FE29             ; 1055                         *hl = a;
2013   FE29 77          	ld (hl), a
2014   FE2A             ; 1056                         h = ((a = h) -= 8);
2015   FE2A 7C          	ld a, h
2016   FE2B D6 08       	sub 8
2017   FE2D 67          	ld h, a
2018   FE2E             ; 1057                         a = c;
2019   FE2E 79          	ld a, c
2020   FE2F             ; 1058                         c = *hl;
2021   FE2F 4E          	ld c, (hl)
2022   FE30             ; 1059                         *hl = a;
2023   FE30 77          	ld (hl), a
2024   FE31             ; 1060                         hl += de;
2025   FE31 19          	add hl, de
2026   FE32             l_106: 
2027   FE32             ; 1061                     } while ((a = h) != 0xE7);
2028   FE32 7C          	ld a, h
2029   FE33 FE E7       	cp 231
2030   FE35 C2 27 FE    	jp nz, l_105
2031   FE38 E1          	pop hl
2032   FE39             ; 1062                 }
2033   FE39             ; 1063                 l--;
2034   FE39 2D          	dec l
2035   FE3A             l_103: 
2036   FE3A             ; 1064             } while ((a = l) != SCREEN_BEGIN + SCREEN_WIDTH * SCREEN_HEIGHT - 1 - SCREEN_WIDTH);
2037   FE3A 7D          	ld a, l
2038   FE3B FE FF       	cp 60927
2039   FE3D C2 1D FE    	jp nz, l_102
2040   FE40 E1          	pop hl
2041   FE41             ; 1065         }
2042   FE41             ; 1066         hl += (de = -SCREEN_WIDTH);
2043   FE41 11 C0 FF    	ld de, 65472
2044   FE44 19          	add hl, de
2045   FE45             l_100: 
2046   FE45             ; 1067     }
2047   FE45             ; 1068 
2048   FE45             ; 1069     cursor = hl;
2049   FE45 22 5A F7    	ld (cursor), hl
2050   FE48             ; 1070 
2051   FE48             ; 1071     /* Show cursor */
2052   FE48             ; 1072     hl += (de = -SCREEN_SIZE);
2053   FE48 11 00 F8    	ld de, 63488
2054   FE4B 19          	add hl, de
2055   FE4C             ; 1073     a = *hl;
2056   FE4C 7E          	ld a, (hl)
2057   FE4D             ; 1074     a |= SCREEN_ATTRIB_UNDERLINE;
2058   FE4D F6 80       	or 128
2059   FE4F             ; 1075     *hl = a;
2060   FE4F 77          	ld (hl), a
2061   FE50             ; 1076 
2062   FE50             ; 1077     pop(bc, hl, de, a);
2063   FE50 F1          	pop af
2064   FE51 D1          	pop de
2065   FE52 E1          	pop hl
2066   FE53 C1          	pop bc
2067   FE54 C9          	ret
2068   FE55             ; 1078 }
2069   FE55             ; 1079 
2070   FE55             ; 1080 void ClearScreenInt() {
2071   FE55             clearscreenint: 
2072   FE55             ; 1081     do {
2073   FE55             l_108: 
2074   FE55             ; 1082         do {
2075   FE55             l_111: 
2076   FE55             ; 1083             *hl = 0;
2077   FE55 36 00       	ld (hl), 0
2078   FE57             ; 1084             hl++;
2079   FE57 23          	inc hl
2080   FE58             ; 1085             *de = a;
2081   FE58 12          	ld (de), a
2082   FE59             ; 1086             de++;
2083   FE59 13          	inc de
2084   FE5A             l_112: 
2085   FE5A             ; 1087         } while (flag_nz(c--));
2086   FE5A 0D          	dec c
2087   FE5B C2 55 FE    	jp nz, l_111
2088   FE5E             l_109: 
2089   FE5E             ; 1088     } while (flag_nz(b--));
2090   FE5E 05          	dec b
2091   FE5F C2 55 FE    	jp nz, l_108
2092   FE62 C9          	ret
2093   FE63             ; 1089 }
2094   FE63             ; 1090 
2095   FE63             ; 1091 void ClearScreen() {
2096   FE63             clearscreen: 
2097   FE63             ; 1092     hl = SCREEN_BEGIN;
2098   FE63 21 00 E8    	ld hl, 59392
2099   FE66             ; 1093     de = SCREEN_ATTRIB_BEGIN;
2100   FE66 11 00 E0    	ld de, 57344
2101   FE69             ; 1094     bc = 0x740; /* 25 rows */
2102   FE69 01 40 07    	ld bc, 1856
2103   FE6C             ; 1095     a = color;
2104   FE6C 3A 59 F7    	ld a, (color)
2105   FE6F             ; 1096     ClearScreenInt();
2106   FE6F CD 55 FE    	call clearscreenint
2107   FE72             ; 1097     a = SCREEN_ATTRIB_BLANK;
2108   FE72 3E 07       	ld a, 7
2109   FE74             ; 1098     bc = 0x2C0; /* 7 rows */
2110   FE74 01 C0 02    	ld bc, 704
2111   FE77             ; 1099     ClearScreenInt();
2112   FE77 CD 55 FE    	call clearscreenint
2113   FE7A             ; 1100     PrintKeyStatus();
2114   FE7A CD C7 FE    	call printkeystatus
2115   FE7D             ; 1101     MoveCursorHome();
2116   FE7D             ; 1102 }
2117   FE7D             ; 1103 
2118   FE7D             ; 1104 void MoveCursorHome() {
2119   FE7D             movecursorhome: 
2120   FE7D             ; 1105     MoveCursor(hl = SCREEN_BEGIN);
2121   FE7D 21 00 E8    	ld hl, 59392
2122   FE80 C3 0E FE    	jp movecursor
2123   FE83             ; 1106 }
2124   FE83             ; 1107 
2125   FE83             ; 1108 void MoveCursorLeft(...) {
2126   FE83             movecursorleft: 
2127   FE83             ; 1109     hl--;
2128   FE83 2B          	dec hl
2129   FE84             ; 1110     if ((a = h) != (SCREEN_BEGIN >> 8) - 1)
2130   FE84 7C          	ld a, h
2131   FE85 FE E7       	cp 65511
2132   FE87             ; 1111         return MoveCursor(hl);
2133   FE87 C2 0E FE    	jp nz, movecursor
2134   FE8A             ; 1112     MoveCursor(hl = SCREEN_BEGIN + SCREEN_WIDTH * SCREEN_HEIGHT - 1);
2135   FE8A 21 3F EE    	ld hl, 60991
2136   FE8D C3 0E FE    	jp movecursor
2137   FE90             ; 1113 }
2138   FE90             ; 1114 
2139   FE90             ; 1115 void MoveCursorNextLine(...) {
2140   FE90             movecursornextline: 
2141   FE90             ; 1116     a = l;
2142   FE90 7D          	ld a, l
2143   FE91             ; 1117     a &= 0xFF ^ (SCREEN_WIDTH - 1);
2144   FE91 E6 C0       	and 192
2145   FE93             ; 1118     l = a;
2146   FE93 6F          	ld l, a
2147   FE94             ; 1119     MoveCursorDown();
2148   FE94             ; 1120 }
2149   FE94             ; 1121 
2150   FE94             ; 1122 void MoveCursorDown(...) {
2151   FE94             movecursordown: 
2152   FE94             ; 1123     hl += (de = SCREEN_WIDTH);
2153   FE94 11 40 00    	ld de, 64
2154   FE97 19          	add hl, de
2155   FE98             ; 1124     MoveCursor(hl);
2156   FE98 C3 0E FE    	jp movecursor
2157   FE9B             ; 1125 }
2158   FE9B             ; 1126 
2159   FE9B             ; 1127 void MoveCursorUp(...) {
2160   FE9B             movecursorup: 
2161   FE9B             ; 1128     hl += (de = -SCREEN_WIDTH);
2162   FE9B 11 C0 FF    	ld de, 65472
2163   FE9E 19          	add hl, de
2164   FE9F             ; 1129     if ((a = h) != (SCREEN_BEGIN >> 8) - 1)
2165   FE9F 7C          	ld a, h
2166   FEA0 FE E7       	cp 65511
2167   FEA2             ; 1130         return MoveCursor(hl);
2168   FEA2 C2 0E FE    	jp nz, movecursor
2169   FEA5             ; 1131     hl += (de = SCREEN_WIDTH * SCREEN_HEIGHT);
2170   FEA5 11 40 06    	ld de, 1600
2171   FEA8 19          	add hl, de
2172   FEA9             ; 1132     MoveCursor(hl);
2173   FEA9 C3 0E FE    	jp movecursor
2174   FEAC             ; 1133 }
2175   FEAC             ; 1134 
2176   FEAC             ; 1135 void ReadKey() {
2177   FEAC             readkey: 
2178   FEAC             ; 1136     do {
2179   FEAC             l_114: 
2180   FEAC             ; 1137         ScanKey();
2181   FEAC CD EA FE    	call scankey
2182   FEAF             l_115: 
2183   FEAF CA AC FE    	jp z, l_114
2184   FEB2             ; 1138     } while (flag_z);
2185   FEB2             ; 1139     a--;
2186   FEB2 3D          	dec a
2187   FEB3             ; 1140 
2188   FEB3             ; 1141     push_pop(a) {
2189   FEB3 F5          	push af
2190   FEB4             ; 1142         keySaved = a = 0xFF;
2191   FEB4 3E FF       	ld a, 255
2192   FEB6 32 64 F7    	ld (keysaved), a
2193   FEB9 F1          	pop af
2194   FEBA C9          	ret
2195   FEBB             ; 1143     }
2196   FEBB             ; 1144 }
2197   FEBB             ; 1145 
2198   FEBB             ; 1146 uint8_t aZag[] = {'z', 'a' | 0x80, 'g' | 0x80, 's', 't' | 0x80, 'r' | 0x80};
2199   FEBB             azag: 
2200   FEBB 7A          	db 122
2201   FEBC E1          	db 225
2202   FEBD E7          	db 231
2203   FEBE 73          	db 115
2204   FEBF F4          	db 244
2205   FEC0 F2          	db 242
2206   FEC1             ; 1147  aLat[] = {'l', 'a' | 0x80, 't' | 0x80, 'r', 'u' | 0x80, 's' | 0x80};
2207   FEC1             alat: 
2208   FEC1 6C          	db 108
2209   FEC2 E1          	db 225
2210   FEC3 F4          	db 244
2211   FEC4 72          	db 114
2212   FEC5 F5          	db 245
2213   FEC6 F3          	db 243
2214   FEC7             ; 1149  PrintKeyStatus() {
2215   FEC7             printkeystatus: 
2216   FEC7             ; 1150     bc = 0xEFF9;
2217   FEC7 01 F9 EF    	ld bc, 61433
2218   FECA             ; 1151     a = keybMode;
2219   FECA 3A 58 F7    	ld a, (keybmode)
2220   FECD             ; 1152     hl = &aZag;
2221   FECD 21 BB FE    	ld hl, azag
2222   FED0             ; 1153     PrintKeyStatus1();
2223   FED0 CD D7 FE    	call printkeystatus1
2224   FED3             ; 1154     bc++;
2225   FED3 03          	inc bc
2226   FED4             ; 1155     hl = &aLat;
2227   FED4 21 C1 FE    	ld hl, alat
2228   FED7             ; 1156     PrintKeyStatus1();
2229   FED7             ; 1157 }
2230   FED7             ; 1158 
2231   FED7             ; 1159 void PrintKeyStatus1() {
2232   FED7             printkeystatus1: 
2233   FED7             ; 1160     de = 3; /* String size */
2234   FED7 11 03 00    	ld de, 3
2235   FEDA             ; 1161     cyclic_rotate_right(a);
2236   FEDA 0F          	rrca
2237   FEDB             ; 1162     if (flag_c)
2238   FEDB             ; 1163         hl += de;
2239   FEDB D2 DF FE    	jp nc, l_117
2240   FEDE 19          	add hl, de
2241   FEDF             l_117: 
2242   FEDF             ; 1164     d = a;
2243   FEDF 57          	ld d, a
2244   FEE0             ; 1165     do {
2245   FEE0             l_119: 
2246   FEE0             ; 1166         *bc = a = *hl;
2247   FEE0 7E          	ld a, (hl)
2248   FEE1 02          	ld (bc), a
2249   FEE2             ; 1167         bc++;
2250   FEE2 03          	inc bc
2251   FEE3             ; 1168         hl++;
2252   FEE3 23          	inc hl
2253   FEE4             l_120: 
2254   FEE4             ; 1169     } while (flag_nz(e--));
2255   FEE4 1D          	dec e
2256   FEE5 C2 E0 FE    	jp nz, l_119
2257   FEE8             ; 1170     a = d;
2258   FEE8 7A          	ld a, d
2259   FEE9 C9          	ret
2260   FEEA             ; 1171 }
2261   FEEA             ; 1172 
2262   FEEA             ; 1173 void ScanKey() {
2263   FEEA             scankey: 
2264   FEEA             ; 1174     push(bc, de, hl);
2265   FEEA C5          	push bc
2266   FEEB D5          	push de
2267   FEEC E5          	push hl
2268   FEED             ; 1175     ScanKey0();
2269   FEED             ; 1176 }
2270   FEED             ; 1177 
2271   FEED             ; 1178 void ScanKey0() {
2272   FEED             scankey0: 
2273   FEED             ; 1179     b = -1;
2274   FEED 06 FF       	ld b, 255
2275   FEEF             ; 1180     c = 1 ^ 0xFF;
2276   FEEF 0E FE       	ld c, 254
2277   FEF1             ; 1181     d = KEYBOARD_COLUMN_COUNT;
2278   FEF1 16 08       	ld d, 8
2279   FEF3             ; 1182     do {
2280   FEF3             l_122: 
2281   FEF3             ; 1183         out(PORT_KEYBOARD_COLUMN, a = c);
2282   FEF3 79          	ld a, c
2283   FEF4 D3 07       	out (7), a
2284   FEF6             ; 1184         cyclic_rotate_left(a, 1);
2285   FEF6 07          	rlca
2286   FEF7             ; 1185         c = a;
2287   FEF7 4F          	ld c, a
2288   FEF8             ; 1186         a = in(PORT_KEYBOARD_ROW);
2289   FEF8 DB 06       	in a, (6)
2290   FEFA             ; 1187         a &= KEYBOARD_ROW_MASK;
2291   FEFA E6 7F       	and 127
2292   FEFC             ; 1188         if (a != KEYBOARD_ROW_MASK)
2293   FEFC FE 7F       	cp 127
2294   FEFE             ; 1189             return ScanKey1(a, b);
2295   FEFE C2 18 FF    	jp nz, scankey1
2296   FF01             ; 1190         b = ((a = b) += KEYBOARD_ROW_COUNT);
2297   FF01 78          	ld a, b
2298   FF02 C6 07       	add 7
2299   FF04 47          	ld b, a
2300   FF05             l_123: 
2301   FF05             ; 1191     } while (flag_nz(d--));
2302   FF05 15          	dec d
2303   FF06 C2 F3 FE    	jp nz, l_122
2304   FF09             ; 1192 
2305   FF09             ; 1193     a = in(PORT_KEYBOARD_MODS);
2306   FF09 DB 05       	in a, (5)
2307   FF0B             ; 1194     if (flag_z(a &= KEYBOARD_RUS_MOD))
2308   FF0B E6 01       	and 1
2309   FF0D             ; 1195         return ScanKey1(a, b);
2310   FF0D CA 18 FF    	jp z, scankey1
2311   FF10             ; 1196 
2312   FF10             ; 1197     keyLast = a = 0xFF;
2313   FF10 3E FF       	ld a, 255
2314   FF12 32 63 F7    	ld (keylast), a
2315   FF15             ; 1198 
2316   FF15             ; 1199     return ScanKeyExit();
2317   FF15 C3 BC FF    	jp scankeyexit
2318   FF18             ; 1200 }
2319   FF18             ; 1201 
2320   FF18             ; 1202 void ScanKey1(...) {
2321   FF18             scankey1: 
2322   FF18             ; 1203     do {
2323   FF18             l_125: 
2324   FF18             ; 1204         b++;
2325   FF18 04          	inc b
2326   FF19             ; 1205         cyclic_rotate_right(a);
2327   FF19 0F          	rrca
2328   FF1A             l_126: 
2329   FF1A DA 18 FF    	jp c, l_125
2330   FF1D             ; 1206     } while (flag_c);
2331   FF1D             ; 1207 
2332   FF1D             ; 1208     /* Delay */
2333   FF1D             ; 1209     a ^= a;
2334   FF1D AF          	xor a
2335   FF1E             ; 1210     do {
2336   FF1E             l_128: 
2337   FF1E             ; 1211         a--;
2338   FF1E 3D          	dec a
2339   FF1F             l_129: 
2340   FF1F C2 1E FF    	jp nz, l_128
2341   FF22             ; 1212     } while (flag_nz);
2342   FF22             ; 1213 
2343   FF22             ; 1214     /* b - key number */
2344   FF22             ; 1215 
2345   FF22             ; 1216     /*  0    0    1 !   2 "   3 #   4 $   5 %   6 &   7 ,
2346   FF22             ; 1217      *  8   8 (   9 )   : *   ; +   , <   - =   . >   / ?
2347   FF22             ; 1218      * 16   @ Ю   A А   B Б   C Ц   D Д   E Е   F Ф   G Г
2348   FF22             ; 1219      * 24   H Х   I И   J Й   K К   L Л   M М   N Н   O О
2349   FF22             ; 1220      * 32   P П   Q Я   R Р   S С   T Т   U У   V Ж   W В
2350   FF22             ; 1221      * 40   X Ь   Y Ы   Z З   [ Ш   \ Э   ] Щ   ^ Ч    _
2351   FF22             ; 1222      * 48   Space Right Left  Up    Down  Vk    Str   Home */
2352   FF22             ; 1223     hl = &keyLast;
2353   FF22 21 63 F7    	ld hl, 0FFFFh & (keylast)
2354   FF25             ; 1224     a = *hl;
2355   FF25 7E          	ld a, (hl)
2356   FF26             ; 1225     hl--; /* keyDelay */
2357   FF26 2B          	dec hl
2358   FF27             ; 1226     if (a == b) {
2359   FF27 B8          	cp b
2360   FF28 C2 34 FF    	jp nz, l_131
2361   FF2B             ; 1227         (*hl)--;
2362   FF2B 35          	dec (hl)
2363   FF2C             ; 1228         if (flag_nz)
2364   FF2C             ; 1229             return ScanKey0();
2365   FF2C C2 ED FE    	jp nz, scankey0
2366   FF2F             ; 1230         *hl = 0x30; /* Next repeat delay */
2367   FF2F 36 30       	ld (hl), 48
2368   FF31 C3 36 FF    	jp l_132
2369   FF34             l_131: 
2370   FF34             ; 1231     } else {
2371   FF34             ; 1232         *hl = 0xFF; /* First repeat delay */
2372   FF34 36 FF       	ld (hl), 255
2373   FF36             l_132: 
2374   FF36             ; 1233     }
2375   FF36             ; 1234     hl++;
2376   FF36 23          	inc hl
2377   FF37             ; 1235     *hl = b; /* Key last */
2378   FF37 70          	ld (hl), b
2379   FF38             ; 1236 
2380   FF38             ; 1237     a = b;
2381   FF38 78          	ld a, b
2382   FF39             ; 1238     if (a >= 48) {
2383   FF39 FE 30       	cp 48
2384   FF3B DA 60 FF    	jp c, l_133
2385   FF3E             ; 1239         if (a == 56) { /* RUS/LAT */
2386   FF3E FE 38       	cp 56
2387   FF40 C2 57 FF    	jp nz, l_135
2388   FF43             ; 1240             a = in(PORT_KEYBOARD_MODS);
2389   FF43 DB 05       	in a, (5)
2390   FF45             ; 1241             carry_rotate_right(a, 3); /* Shift */
2391   FF45 1F          	rra
2392   FF46 1F          	rra
2393   FF47 1F          	rra
2394   FF48             ; 1242             a = KEYB_MODE_CAP;
2395   FF48 3E 01       	ld a, 1
2396   FF4A             ; 1243             carry_add(a, 0); /* KEYB_MODE_CAP -> KEYB_MODE_RUS */
2397   FF4A CE 00       	adc 0
2398   FF4C             ; 1244             hl = &keybMode;
2399   FF4C 21 58 F7    	ld hl, 0FFFFh & (keybmode)
2400   FF4F             ; 1245             a ^= *hl;
2401   FF4F AE          	xor (hl)
2402   FF50             ; 1246             *hl = a;
2403   FF50 77          	ld (hl), a
2404   FF51             ; 1247 
2405   FF51             ; 1248             PrintKeyStatus();
2406   FF51 CD C7 FE    	call printkeystatus
2407   FF54             ; 1249             return ScanKey0();
2408   FF54 C3 ED FE    	jp scankey0
2409   FF57             l_135: 
2410   FF57             ; 1250         }
2411   FF57             ; 1251         a += (keyTable - 48);
2412   FF57 C6 94       	add 0FFh & ((keytable) - (48))
2413   FF59             ; 1252         l = a;
2414   FF59 6F          	ld l, a
2415   FF5A             ; 1253         h = ((uintptr_t)keyTable - 48) >> 8;
2416   FF5A 26 FF       	ld h, 0FFh & (((0FFFFh & (0FFFFh & (keytable))) - (48)) >> (8))
2417   FF5C             ; 1254         a = *hl;
2418   FF5C 7E          	ld a, (hl)
2419   FF5D             ; 1255         return ScanKey2(a);
2420   FF5D C3 99 FF    	jp scankey2
2421   FF60             l_133: 
2422   FF60             ; 1256     }
2423   FF60             ; 1257 
2424   FF60             ; 1258     a += '0';
2425   FF60 C6 30       	add 48
2426   FF62             ; 1259     if (a >= 0x3C)
2427   FF62 FE 3C       	cp 60
2428   FF64             ; 1260         if (a < 0x40)
2429   FF64 DA 6E FF    	jp c, l_137
2430   FF67 FE 40       	cp 64
2431   FF69             ; 1261             a &= 0x2F; /* <=>? to .-./ */
2432   FF69 D2 6E FF    	jp nc, l_139
2433   FF6C E6 2F       	and 47
2434   FF6E             l_139: 
2435   FF6E             l_137: 
2436   FF6E             ; 1262     c = a;
2437   FF6E 4F          	ld c, a
2438   FF6F             ; 1263 
2439   FF6F             ; 1264     a = keybMode;
2440   FF6F 3A 58 F7    	ld a, (keybmode)
2441   FF72             ; 1265     cyclic_rotate_right(a, 2); /* KEYB_MODE_RUS */
2442   FF72 0F          	rrca
2443   FF73 0F          	rrca
2444   FF74             ; 1266     if (flag_c) {
2445   FF74 D2 7B FF    	jp nc, l_141
2446   FF77             ; 1267         a = c;
2447   FF77 79          	ld a, c
2448   FF78             ; 1268         a |= 0x20;
2449   FF78 F6 20       	or 32
2450   FF7A             ; 1269         c = a;
2451   FF7A 4F          	ld c, a
2452   FF7B             l_141: 
2453   FF7B             ; 1270     }
2454   FF7B             ; 1271 
2455   FF7B             ; 1272     a = in(PORT_KEYBOARD_MODS);
2456   FF7B DB 05       	in a, (5)
2457   FF7D             ; 1273     cyclic_rotate_right(a, 2); /* Ctrl */
2458   FF7D 0F          	rrca
2459   FF7E 0F          	rrca
2460   FF7F             ; 1274     if (flag_nc) {
2461   FF7F DA 88 FF    	jp c, l_143
2462   FF82             ; 1275         a = c;
2463   FF82 79          	ld a, c
2464   FF83             ; 1276         a &= 0x1F;
2465   FF83 E6 1F       	and 31
2466   FF85             ; 1277         return ScanKey2(a);
2467   FF85 C3 99 FF    	jp scankey2
2468   FF88             l_143: 
2469   FF88             ; 1278     }
2470   FF88             ; 1279 
2471   FF88             ; 1280     carry_rotate_right(a, 1); /* Shift */
2472   FF88 1F          	rra
2473   FF89             ; 1281     a = c;
2474   FF89 79          	ld a, c
2475   FF8A             ; 1282     if (flag_nc) {
2476   FF8A DA 99 FF    	jp c, l_145
2477   FF8D             ; 1283         if (a >= 0x40) {
2478   FF8D FE 40       	cp 64
2479   FF8F DA 97 FF    	jp c, l_147
2480   FF92             ; 1284             a |= 0x80;
2481   FF92 F6 80       	or 128
2482   FF94             ; 1285             return ScanKey2(a);
2483   FF94 C3 99 FF    	jp scankey2
2484   FF97             l_147: 
2485   FF97             ; 1286         }
2486   FF97             ; 1287         a ^= 0x10;
2487   FF97 EE 10       	xor 16
2488   FF99             l_145: 
2489   FF99             ; 1288     }
2490   FF99             ; 1289 
2491   FF99             ; 1290     ScanKey2(a);
2492   FF99             ; 1291 }
2493   FF99             ; 1292 
2494   FF99             ; 1293 void ScanKey2(...) {
2495   FF99             scankey2: 
2496   FF99             ; 1294     keySaved = a;
2497   FF99 32 64 F7    	ld (keysaved), a
2498   FF9C             ; 1295     c = a;
2499   FF9C 4F          	ld c, a
2500   FF9D             ; 1296 
2501   FF9D             ; 1297     a = keybMode;
2502   FF9D 3A 58 F7    	ld a, (keybmode)
2503   FFA0             ; 1298     cyclic_rotate_right(a, 1); /* KEYB_MODE_CAP */
2504   FFA0 0F          	rrca
2505   FFA1             ; 1299     if (flag_nc)
2506   FFA1             ; 1300         return ScanKeyExit();
2507   FFA1 D2 BC FF    	jp nc, scankeyexit
2508   FFA4             ; 1301 
2509   FFA4             ; 1302     a = c;
2510   FFA4 79          	ld a, c
2511   FFA5             ; 1303     a &= 0x7F;
2512   FFA5 E6 7F       	and 127
2513   FFA7             ; 1304     if (a < 0x60) { /* Cyr chars */
2514   FFA7 FE 60       	cp 96
2515   FFA9 D2 B6 FF    	jp nc, l_149
2516   FFAC             ; 1305         if (a < 'A')
2517   FFAC FE 41       	cp 65
2518   FFAE             ; 1306             return ScanKeyExit();
2519   FFAE DA BC FF    	jp c, scankeyexit
2520   FFB1             ; 1307         if (a >= 'Z' + 1)
2521   FFB1 FE 5B       	cp 91
2522   FFB3             ; 1308             return ScanKeyExit();
2523   FFB3 D2 BC FF    	jp nc, scankeyexit
2524   FFB6             l_149: 
2525   FFB6             ; 1309     }
2526   FFB6             ; 1310     a = c;
2527   FFB6 79          	ld a, c
2528   FFB7             ; 1311     a ^= 0x80;
2529   FFB7 EE 80       	xor 128
2530   FFB9             ; 1312     keySaved = a;
2531   FFB9 32 64 F7    	ld (keysaved), a
2532   FFBC             ; 1313     ScanKeyExit();
2533   FFBC             ; 1314 }
2534   FFBC             ; 1315 
2535   FFBC             ; 1316 void ScanKeyExit(...) {
2536   FFBC             scankeyexit: 
2537   FFBC             ; 1317     pop(bc, de, hl);
2538   FFBC E1          	pop hl
2539   FFBD D1          	pop de
2540   FFBE C1          	pop bc
2541   FFBF             ; 1318     a = keySaved;
2542   FFBF 3A 64 F7    	ld a, (keysaved)
2543   FFC2             ; 1319     a++; /* Returns ZF and A = 0 if no key is pressed */
2544   FFC2 3C          	inc a
2545   FFC3 C9          	ret
2546   FFC4             ; 1320 }
2547   FFC4             ; 1321 
2548   FFC4             ; 1322 uint8_t keyTable[] = {
2549   FFC4             keytable: 
2550   FFC4 20          	db 32
2551   FFC5 18          	db 24
2552   FFC6 08          	db 8
2553   FFC7 19          	db 25
2554   FFC8 1A          	db 26
2555   FFC9 0D          	db 13
2556   FFCA 1F          	db 31
2557   FFCB 0C          	db 12
2558   FFCC             ; 1333  IsKeyPressed() {
2559   FFCC             iskeypressed: 
2560   FFCC             ; 1334     ScanKey();
2561   FFCC CD EA FE    	call scankey
2562   FFCF             ; 1335     if (flag_z)
2563   FFCF             ; 1336         return; /* Returns 0 if no key is pressed */
2564   FFCF C8          	ret z
2565   FFD0             ; 1337     a = 0xFF;   /* Returns 0xFF if there are any keys pressed */
2566   FFD0 3E FF       	ld a, 255
2567   FFD2 C9          	ret
2568   FFD3              savebin "micro80.bin", 0xF800, 0x10000
2569   FFD3             
