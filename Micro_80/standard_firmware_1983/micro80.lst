0001   0000                 device zxspectrum48 ; It has nothing to do with ZX Spectrum 48K, it is needed for the sjasmplus compiler.
0002   0000             rst38opcode equ 56
0003   0000             rst38address equ 57
0004   0000             jumpparam1 equ 63312
0005   0000             jumpopcode equ 63312
0006   0000             param1 equ 63313
0007   0000             param1h equ 63314
0008   0000             param2 equ 63315
0009   0000             param2h equ 63316
0010   0000             param3 equ 63317
0011   0000             param3h equ 63318
0012   0000             tapepolarity equ 63319
0013   0000             cursor equ 63322
0014   0000             readdelay equ 63324
0015   0000             writedelay equ 63325
0016   0000             tapestartl equ 63326
0017   0000             tapestarth equ 63327
0018   0000             tapestopl equ 63328
0019   0000             tapestoph equ 63329
0020   0000             keylast equ 63332
0021   0000             regs equ 63333
0022   0000             regsp equ 63333
0023   0000             regsph equ 63334
0024   0000             regf equ 63335
0025   0000             rega equ 63336
0026   0000             regc equ 63337
0027   0000             regb equ 63338
0028   0000             rege equ 63339
0029   0000             regd equ 63340
0030   0000             regl equ 63341
0031   0000             reghl equ 63341
0032   0000             regh equ 63342
0033   0000             lastbreakaddress equ 63343
0034   0000             lastbreakaddresshigh equ 63344
0035   0000             breakcounter equ 63345
0036   0000             breakaddress equ 63346
0037   0000             breakprevbyte equ 63348
0038   0000             breakaddress2 equ 63349
0039   0000             breakprevbyte2 equ 63351
0040   0000             breakaddress3 equ 63352
0041   0000             breakprevbyte3 equ 63354
0042   0000             cmdbuffer equ 63355
0043   0000             cmdbuffer1 equ 63356
0044   0000             cmdbufferend equ 63387
0045   0000              .org 0xF800
0046   F800             ; 47  uint8_t rst38Opcode __address(0x38);
0047   F800             ; 48 extern uint16_t rst38Address __address(0x39);
0048   F800             ; 49 
0049   F800             ; 50 // Прототипы
0050   F800             ; 51 void Reboot();
0051   F800             ; 52 void ReadKey();
0052   F800             ; 53 void ReadKey0();
0053   F800             ; 54 void ReadKey1(...);
0054   F800             ; 55 void ReadKey2(...);
0055   F800             ; 56 void ReadKeyDelay();
0056   F800             ; 57 void ReadTapeByte(...);
0057   F800             ; 58 void PrintChar(...);
0058   F800             ; 59 void WriteTapeByte(...);
0059   F800             ; 60 void PrintChar(...);
0060   F800             ; 61 void IsAnyKeyPressed();
0061   F800             ; 62 void PrintHexByte(...);
0062   F800             ; 63 void PrintString(...);
0063   F800             ; 64 void Monitor();
0064   F800             ; 65 void MonitorExecute();
0065   F800             ; 66 void PrintCharA(...);
0066   F800             ; 67 void ReadString();
0067   F800             ; 68 void MonitorError();
0068   F800             ; 69 void ReadStringLoop(...);
0069   F800             ; 70 void CommonBs(...);
0070   F800             ; 71 void PrintSpace(...);
0071   F800             ; 72 void InputBs(...);
0072   F800             ; 73 void InputEndSpace(...);
0073   F800             ; 74 void PopWordReturn(...);
0074   F800             ; 75 void InputLoop(...);
0075   F800             ; 76 void InputInit(...);
0076   F800             ; 77 void ParseWord(...);
0077   F800             ; 78 void CompareHlDe(...);
0078   F800             ; 79 void ParseWordReturnCf(...);
0079   F800             ; 80 void PrintHex(...);
0080   F800             ; 81 void PrintParam1Space();
0081   F800             ; 82 void PrintHexWordSpace(...);
0082   F800             ; 83 void IncWord(...);
0083   F800             ; 84 void PrintRegs();
0084   F800             ; 85 void CmdXS(...);
0085   F800             ; 86 void FindRegister(...);
0086   F800             ; 87 void ReadKey(...);
0087   F800             ; 88 void PrintRegMinus(...);
0088   F800             ; 89 void InitRst38();
0089   F800             ; 90 void BreakPoint(...);
0090   F800             ; 91 void BreakPointAt2(...);
0091   F800             ; 92 void BreakpointAt3(...);
0092   F800             ; 93 void Run();
0093   F800             ; 94 void ContinueBreakpoint(...);
0094   F800             ; 95 void CmdQResult(...);
0095   F800             ; 96 void CmdIEnd(...);
0096   F800             ; 97 void ReadTapeDelay(...);
0097   F800             ; 98 void PrintCharInt(...);
0098   F800             ; 99 void WriteTapeDelay(...);
0099   F800             ; 100 void TapeDelay(...);
0100   F800             ; 101 void ClearScreen();
0101   F800             ; 102 void MoveCursorLeft(...);
0102   F800             ; 103 void MoveCursorRight(...);
0103   F800             ; 104 void MoveCursorUp(...);
0104   F800             ; 105 void MoveCursorDown(...);
0105   F800             ; 106 void MoveCursorNextLine(...);
0106   F800             ; 107 void MoveCursorHome();
0107   F800             ; 108 void ClearScreenInt();
0108   F800             ; 109 void MoveCursor(...);
0109   F800             ; 110 void MoveCursorNextLine1(...);
0110   F800             ; 111 void ReadStringBs(...);
0111   F800             ; 112 void ReadStringCr(...);
0112   F800             ; 113 
0113   F800             ; 114 extern uint8_t aPrompt[22];
0114   F800             ; 115 extern uint8_t monitorCommands;
0115   F800             ; 116 extern uint8_t regList[19];
0116   F800             ; 117 extern uint8_t aLf[2];
0117   F800             ; 118 extern uint8_t keyTable[8];
0118   F800             ; 119 
0119   F800             ; 120 // Переменные монитора
0120   F800             ; 121 void jumpParam1(void) __address(0xF750);
0121   F800             ; 122 extern uint8_t jumpOpcode __address(0xF750);
0122   F800             ; 123 extern uint16_t param1 __address(0xF751);
0123   F800             ; 124 extern uint8_t param1h __address(0xF752);
0124   F800             ; 125 extern uint16_t param2 __address(0xF753);
0125   F800             ; 126 extern uint8_t param2h __address(0xF754);
0126   F800             ; 127 extern uint16_t param3 __address(0xF755);
0127   F800             ; 128 extern uint8_t param3h __address(0xF756);
0128   F800             ; 129 extern uint8_t tapePolarity __address(0xF757);
0129   F800             ; 130 // Unused 0xF758
0130   F800             ; 131 // Unused 0xF759
0131   F800             ; 132 extern uint16_t cursor __address(0xF75A);
0132   F800             ; 133 extern uint8_t readDelay __address(0xF75C);
0133   F800             ; 134 extern uint8_t writeDelay __address(0xF75D);
0134   F800             ; 135 extern uint8_t tapeStartL __address(0xF75E);
0135   F800             ; 136 extern uint8_t tapeStartH __address(0xF75F);
0136   F800             ; 137 extern uint8_t tapeStopL __address(0xF760);
0137   F800             ; 138 extern uint8_t tapeStopH __address(0xF761);
0138   F800             ; 139 // Unused 0xF762
0139   F800             ; 140 // Unused 0xF763
0140   F800             ; 141 extern uint8_t keyLast __address(0xF764);
0141   F800             ; 142 extern uint16_t regs __address(0xF765);
0142   F800             ; 143 extern uint16_t regSP __address(0xF765);
0143   F800             ; 144 extern uint8_t regSPH __address(0xF766);
0144   F800             ; 145 extern uint16_t regF __address(0xF767);
0145   F800             ; 146 extern uint16_t regA __address(0xF768);
0146   F800             ; 147 extern uint16_t regC __address(0xF769);
0147   F800             ; 148 extern uint16_t regB __address(0xF76A);
0148   F800             ; 149 extern uint16_t regE __address(0xF76B);
0149   F800             ; 150 extern uint16_t regD __address(0xF76C);
0150   F800             ; 151 extern uint16_t regL __address(0xF76D);
0151   F800             ; 152 extern uint16_t regHL __address(0xF76D);
0152   F800             ; 153 extern uint16_t regH __address(0xF76E);
0153   F800             ; 154 extern uint16_t lastBreakAddress __address(0xF76F);
0154   F800             ; 155 extern uint8_t lastBreakAddressHigh __address(0xF770);
0155   F800             ; 156 extern uint8_t breakCounter __address(0xF771);
0156   F800             ; 157 extern uint16_t breakAddress __address(0xF772);
0157   F800             ; 158 extern uint8_t breakPrevByte __address(0xF774);
0158   F800             ; 159 extern uint16_t breakAddress2 __address(0xF775);
0159   F800             ; 160 extern uint8_t breakPrevByte2 __address(0xF777);
0160   F800             ; 161 extern uint16_t breakAddress3 __address(0xF778);
0161   F800             ; 162 extern uint8_t breakPrevByte3 __address(0xF77A);
0162   F800             ; 163 extern uint8_t cmdBuffer __address(0xF77B);
0163   F800             ; 164 extern uint8_t cmdBuffer1 __address(0xF77B + 1);
0164   F800             ; 165 extern uint8_t cmdBufferEnd __address(0xF77B + 32);
0165   F800             ; 166 
0166   F800             ; 167 const int USER_STACK_TOP = 0xF7C0;
0167   F800             ; 168 const int STACK_TOP = 0xF7FF;
0168   F800             ; 169 
0169   F800             ; 170 // Точки входа
0170   F800             ; 171 
0171   F800             ; 172 void EntryF800_Reboot() {
0172   F800             entryf800_reboot: 
0173   F800             ; 173     Reboot();
0174   F800 C3 1B F8    	jp reboot
0175   F803             ; 174 }
0176   F803             ; 175 
0177   F803             ; 176 void EntryF803_ReadKey() {
0178   F803             entryf803_readkey: 
0179   F803             ; 177     ReadKey();
0180   F803 C3 41 FF    	jp readkey
0181   F806             ; 178 }
0182   F806             ; 179 
0183   F806             ; 180 void EntryF806_ReadTapeByte(...) {
0184   F806             entryf806_readtapebyte: 
0185   F806             ; 181     ReadTapeByte(a);
0186   F806 C3 95 FD    	jp readtapebyte
0187   F809             ; 182 }
0188   F809             ; 183 
0189   F809             ; 184 void EntryF809_PrintChar(...) {
0190   F809             entryf809_printchar: 
0191   F809             ; 185     PrintChar(c);
0192   F809 C3 68 FE    	jp printchar
0193   F80C             ; 186 }
0194   F80C             ; 187 
0195   F80C             ; 188 void EntryF80C_WriteTapeByte(...) {
0196   F80C             entryf80c_writetapebyte: 
0197   F80C             ; 189     WriteTapeByte(c);
0198   F80C C3 E6 FD    	jp writetapebyte
0199   F80F             ; 190 }
0200   F80F             ; 191 
0201   F80F             ; 192 void EntryF80F_TranslateCodePage(...) {
0202   F80F             entryf80f_translatecodepage: 
0203   F80F             ; 193     PrintChar(c);
0204   F80F C3 68 FE    	jp printchar
0205   F812             ; 194 }
0206   F812             ; 195 
0207   F812             ; 196 void EntryF812_IsAnyKeyPressed() {
0208   F812             entryf812_isanykeypressed: 
0209   F812             ; 197     IsAnyKeyPressed();
0210   F812 C3 EE FF    	jp isanykeypressed
0211   F815             ; 198 }
0212   F815             ; 199 
0213   F815             ; 200 void EntryF815_PrintHexByte(...) {
0214   F815             entryf815_printhexbyte: 
0215   F815             ; 201     PrintHexByte(a);
0216   F815 C3 50 F9    	jp printhexbyte
0217   F818             ; 202 }
0218   F818             ; 203 
0219   F818             ; 204 void EntryF818_PrintString(...) {
0220   F818             entryf818_printstring: 
0221   F818             ; 205     PrintString(hl);
0222   F818 C3 D4 F8    	jp printstring
0223   F81B             ; 206 }
0224   F81B             ; 207 
0225   F81B             ; 208 // Инициализация. Выполняется после перезагрузки или пользовательской программой.
0226   F81B             ; 209 // Параметры: нет. Функция никогда не завершается.
0227   F81B             ; 210 
0228   F81B             ; 211 void Reboot() {
0229   F81B             reboot: 
0230   F81B             ; 212     regSP = hl = USER_STACK_TOP;
0231   F81B 21 C0 F7    	ld hl, 63424
0232   F81E 22 65 F7    	ld (regsp), hl
0233   F821             ; 213     sp = STACK_TOP;
0234   F821 31 FF F7    	ld sp, 63487
0235   F824             ; 214     PrintCharA(a = 0x1F);  // Clear screen
0236   F824 3E 1F       	ld a, 31
0237   F826 CD 60 FE    	call printchara
0238   F829             ; 215     Monitor();
0239   F829             ; 216 }
0240   F829             ; 217 
0241   F829             ; 218 void Monitor() {
0242   F829             monitor: 
0243   F829             ; 219     out(PORT_KEYBOARD_MODE, a = 0x8B);
0244   F829 3E 8B       	ld a, 139
0245   F82B D3 04       	out (4), a
0246   F82D             ; 220     sp = STACK_TOP;
0247   F82D 31 FF F7    	ld sp, 63487
0248   F830             ; 221     PrintString(hl = &aPrompt);
0249   F830 21 48 FE    	ld hl, aprompt
0250   F833 CD D4 F8    	call printstring
0251   F836             ; 222     ReadString();
0252   F836 CD 5A F8    	call readstring
0253   F839             ; 223     push(hl = &Monitor);
0254   F839 21 29 F8    	ld hl, 0FFFFh & (monitor)
0255   F83C E5          	push hl
0256   F83D             ; 224     MonitorExecute();
0257   F83D             ; 225 }
0258   F83D             ; 226 
0259   F83D             ; 227 void MonitorExecute() {
0260   F83D             monitorexecute: 
0261   F83D             ; 228     hl = &cmdBuffer;
0262   F83D 21 7B F7    	ld hl, 0FFFFh & (cmdbuffer)
0263   F840             ; 229     b = *hl;
0264   F840 46          	ld b, (hl)
0265   F841             ; 230     hl = &monitorCommands;
0266   F841 21 0E FE    	ld hl, 0FFFFh & (monitorcommands)
0267   F844             ; 231 
0268   F844             ; 232     for (;;) {
0269   F844             l_1: 
0270   F844             ; 233         a = *hl;
0271   F844 7E          	ld a, (hl)
0272   F845             ; 234         if (flag_z(a &= a))
0273   F845 A7          	and a
0274   F846             ; 235             return MonitorError();
0275   F846 CA 75 F8    	jp z, monitorerror
0276   F849             ; 236         if (a == b)
0277   F849 B8          	cp b
0278   F84A             ; 237             break;
0279   F84A CA 53 F8    	jp z, l_2
0280   F84D             ; 238         hl++;
0281   F84D 23          	inc hl
0282   F84E             ; 239         hl++;
0283   F84E 23          	inc hl
0284   F84F             ; 240         hl++;
0285   F84F 23          	inc hl
0286   F850 C3 44 F8    	jp l_1
0287   F853             l_2: 
0288   F853             ; 241     }
0289   F853             ; 242 
0290   F853             ; 243     hl++;
0291   F853 23          	inc hl
0292   F854             ; 244     sp = hl;
0293   F854 F9          	ld sp, hl
0294   F855             ; 245     pop(hl);
0295   F855 E1          	pop hl
0296   F856             ; 246     sp = STACK_TOP - 2;
0297   F856 31 FD F7    	ld sp, 63485
0298   F859             ; 247     return hl();
0299   F859 E9          	jp hl
0300   F85A             ; 248 }
0301   F85A             ; 249 
0302   F85A             ; 250 void ReadString() {
0303   F85A             readstring: 
0304   F85A             ; 251     return ReadStringLoop(hl = &cmdBuffer);
0305   F85A 21 7B F7    	ld hl, 0FFFFh & (cmdbuffer)
0306   F85D             ; 252 }
0307   F85D             ; 253 
0308   F85D             ; 254 void ReadStringLoop(...) {
0309   F85D             readstringloop: 
0310   F85D             ; 255     do {
0311   F85D             l_3: 
0312   F85D             ; 256         ReadKey();
0313   F85D CD 41 FF    	call readkey
0314   F860             ; 257         if (a == 8)
0315   F860 FE 08       	cp 8
0316   F862             ; 258             return ReadStringBs();
0317   F862 CA 80 F8    	jp z, readstringbs
0318   F865             ; 259         if (flag_nz)
0319   F865             ; 260             PrintCharA();
0320   F865 C4 60 FE    	call nz, printchara
0321   F868             ; 261         *hl = a;
0322   F868 77          	ld (hl), a
0323   F869             ; 262         if (a == 0x0D)
0324   F869 FE 0D       	cp 13
0325   F86B             ; 263             return ReadStringCr(hl);
0326   F86B CA 7D F8    	jp z, readstringcr
0327   F86E             ; 264         a = &cmdBufferEnd - 1;
0328   F86E 3E 9A       	ld a, 0FFh & ((cmdbufferend) - (1))
0329   F870             ; 265         compare(a, l);
0330   F870 BD          	cp l
0331   F871             ; 266         hl++;
0332   F871 23          	inc hl
0333   F872             l_4: 
0334   F872 C2 5D F8    	jp nz, l_3
0335   F875             ; 267     } while (flag_nz);
0336   F875             ; 268     MonitorError();
0337   F875             ; 269 }
0338   F875             ; 270 
0339   F875             ; 271 void MonitorError() {
0340   F875             monitorerror: 
0341   F875             ; 272     PrintCharA(a = '?');
0342   F875 3E 3F       	ld a, 63
0343   F877 CD 60 FE    	call printchara
0344   F87A             ; 273     Monitor();
0345   F87A C3 29 F8    	jp monitor
0346   F87D             ; 274 }
0347   F87D             ; 275 
0348   F87D             ; 276 void ReadStringCr(...) {
0349   F87D             readstringcr: 
0350   F87D             ; 277     *hl = 0x0D;
0351   F87D 36 0D       	ld (hl), 13
0352   F87F C9          	ret
0353   F880             ; 278 }
0354   F880             ; 279 
0355   F880             ; 280 void ReadStringBs(...) {
0356   F880             readstringbs: 
0357   F880             ; 281     CommonBs();
0358   F880 CD 86 F8    	call commonbs
0359   F883             ; 282     ReadStringLoop();
0360   F883 C3 5D F8    	jp readstringloop
0361   F886             ; 283 }
0362   F886             ; 284 
0363   F886             ; 285 void CommonBs(...) {
0364   F886             commonbs: 
0365   F886             ; 286     if ((a = &cmdBuffer) == l)
0366   F886 3E 7B       	ld a, 0FFh & (cmdbuffer)
0367   F888 BD          	cp l
0368   F889             ; 287         return;
0369   F889 C8          	ret z
0370   F88A             ; 288     PrintCharA(a = 8);
0371   F88A 3E 08       	ld a, 8
0372   F88C CD 60 FE    	call printchara
0373   F88F             ; 289     hl--;
0374   F88F 2B          	dec hl
0375   F890 C9          	ret
0376   F891             ; 290 }
0377   F891             ; 291 
0378   F891             ; 292 void Input(...) {
0379   F891             input: 
0380   F891             ; 293     PrintSpace();
0381   F891 CD 77 F9    	call printspace
0382   F894             ; 294     InputInit(hl = &cmdBuffer);
0383   F894 21 7B F7    	ld hl, 0FFFFh & (cmdbuffer)
0384   F897             ; 295 }
0385   F897             ; 296 
0386   F897             ; 297 void InputInit(...) {
0387   F897             inputinit: 
0388   F897             ; 298     InputLoop(b = 0);
0389   F897 06 00       	ld b, 0
0390   F899             ; 299 }
0391   F899             ; 300 
0392   F899             ; 301 void InputLoop(...) {
0393   F899             inputloop: 
0394   F899             ; 302     for (;;) {
0395   F899             l_7: 
0396   F899             ; 303         ReadKey();
0397   F899 CD 41 FF    	call readkey
0398   F89C             ; 304         if (a == 8)
0399   F89C FE 08       	cp 8
0400   F89E             ; 305             return InputBs();
0401   F89E CA C5 F8    	jp z, inputbs
0402   F8A1             ; 306         if (flag_nz)
0403   F8A1             ; 307             PrintCharA();
0404   F8A1 C4 60 FE    	call nz, printchara
0405   F8A4             ; 308         *hl = a;
0406   F8A4 77          	ld (hl), a
0407   F8A5             ; 309         if (a == ' ')
0408   F8A5 FE 20       	cp 32
0409   F8A7             ; 310             return InputEndSpace();
0410   F8A7 CA BB F8    	jp z, inputendspace
0411   F8AA             ; 311         if (a == 0x0D)
0412   F8AA FE 0D       	cp 13
0413   F8AC             ; 312             return PopWordReturn();
0414   F8AC CA CE F8    	jp z, popwordreturn
0415   F8AF             ; 313         b = 0xFF;
0416   F8AF 06 FF       	ld b, 255
0417   F8B1             ; 314         if ((a = &cmdBufferEnd - 1) == l)
0418   F8B1 3E 9A       	ld a, 0FFh & ((cmdbufferend) - (1))
0419   F8B3 BD          	cp l
0420   F8B4             ; 315             return MonitorError();
0421   F8B4 CA 75 F8    	jp z, monitorerror
0422   F8B7             ; 316         hl++;
0423   F8B7 23          	inc hl
0424   F8B8 C3 99 F8    	jp l_7
0425   F8BB             ; 317     }
0426   F8BB             ; 318 }
0427   F8BB             ; 319 
0428   F8BB             ; 320 void InputEndSpace(...) {
0429   F8BB             inputendspace: 
0430   F8BB             ; 321     *hl = 0x0D;
0431   F8BB 36 0D       	ld (hl), 13
0432   F8BD             ; 322     a = b;
0433   F8BD 78          	ld a, b
0434   F8BE             ; 323     carry_rotate_left(a, 1);
0435   F8BE 17          	rla
0436   F8BF             ; 324     de = &cmdBuffer;
0437   F8BF 11 7B F7    	ld de, 0FFFFh & (cmdbuffer)
0438   F8C2             ; 325     b = 0;
0439   F8C2 06 00       	ld b, 0
0440   F8C4 C9          	ret
0441   F8C5             ; 326 }
0442   F8C5             ; 327 
0443   F8C5             ; 328 void InputBs(...) {
0444   F8C5             inputbs: 
0445   F8C5             ; 329     CommonBs();
0446   F8C5 CD 86 F8    	call commonbs
0447   F8C8             ; 330     if (flag_z)
0448   F8C8             ; 331         return InputInit();
0449   F8C8 CA 97 F8    	jp z, inputinit
0450   F8CB             ; 332     InputLoop();
0451   F8CB C3 99 F8    	jp inputloop
0452   F8CE             ; 333 }
0453   F8CE             ; 334 
0454   F8CE             ; 335 void PopWordReturn(...) {
0455   F8CE             popwordreturn: 
0456   F8CE             ; 336     sp++;
0457   F8CE 33          	inc sp
0458   F8CF             ; 337     sp++;
0459   F8CF 33          	inc sp
0460   F8D0 C9          	ret
0461   F8D1             ; 338 }
0462   F8D1             ; 339 
0463   F8D1             ; 340 void PrintLf(...) {
0464   F8D1             printlf: 
0465   F8D1             ; 341     PrintString(hl = &aLf);
0466   F8D1 21 5E FE    	ld hl, alf
0467   F8D4             ; 342 }
0468   F8D4             ; 343 
0469   F8D4             ; 344 void PrintString(...) {
0470   F8D4             printstring: 
0471   F8D4             ; 345     for (;;) {
0472   F8D4             l_10: 
0473   F8D4             ; 346         a = *hl;
0474   F8D4 7E          	ld a, (hl)
0475   F8D5             ; 347         if (flag_z(a &= a))
0476   F8D5 A7          	and a
0477   F8D6             ; 348             return;
0478   F8D6 C8          	ret z
0479   F8D7             ; 349         PrintCharA(a);
0480   F8D7 CD 60 FE    	call printchara
0481   F8DA             ; 350         hl++;
0482   F8DA 23          	inc hl
0483   F8DB C3 D4 F8    	jp l_10
0484   F8DE             ; 351     }
0485   F8DE             ; 352 }
0486   F8DE             ; 353 
0487   F8DE             ; 354 void ParseParams() {
0488   F8DE             parseparams: 
0489   F8DE             ; 355     hl = &param1;
0490   F8DE 21 51 F7    	ld hl, 0FFFFh & (param1)
0491   F8E1             ; 356     b = 6;
0492   F8E1 06 06       	ld b, 6
0493   F8E3             ; 357     a ^= a;
0494   F8E3 AF          	xor a
0495   F8E4             ; 358     do {
0496   F8E4             l_12: 
0497   F8E4             ; 359         *hl = a;
0498   F8E4 77          	ld (hl), a
0499   F8E5             l_13: 
0500   F8E5             ; 360     } while (flag_nz(b--));
0501   F8E5 05          	dec b
0502   F8E6 C2 E4 F8    	jp nz, l_12
0503   F8E9             ; 361 
0504   F8E9             ; 362     de = &cmdBuffer + 1;
0505   F8E9 11 7C F7    	ld de, 0FFFFh & ((cmdbuffer) + (1))
0506   F8EC             ; 363     ParseWord();
0507   F8EC CD 16 F9    	call parseword
0508   F8EF             ; 364     param1 = hl;
0509   F8EF 22 51 F7    	ld (param1), hl
0510   F8F2             ; 365     param2 = hl;
0511   F8F2 22 53 F7    	ld (param2), hl
0512   F8F5             ; 366     if (flag_c)
0513   F8F5             ; 367         return;
0514   F8F5 D8          	ret c
0515   F8F6             ; 368 
0516   F8F6             ; 369     ParseWord();
0517   F8F6 CD 16 F9    	call parseword
0518   F8F9             ; 370     param2 = hl;
0519   F8F9 22 53 F7    	ld (param2), hl
0520   F8FC             ; 371     push_pop(a, de) {
0521   F8FC F5          	push af
0522   F8FD D5          	push de
0523   F8FE             ; 372         swap(hl, de);
0524   F8FE EB          	ex hl, de
0525   F8FF             ; 373         hl = param1;
0526   F8FF 2A 51 F7    	ld hl, (param1)
0527   F902             ; 374         swap(hl, de);
0528   F902 EB          	ex hl, de
0529   F903             ; 375         CompareHlDe();
0530   F903 CD 93 F9    	call comparehlde
0531   F906             ; 376         if (flag_c)
0532   F906             ; 377             return MonitorError();
0533   F906 DA 75 F8    	jp c, monitorerror
0534   F909 D1          	pop de
0535   F90A F1          	pop af
0536   F90B             ; 378     }
0537   F90B             ; 379     if (flag_c)
0538   F90B             ; 380         return;
0539   F90B D8          	ret c
0540   F90C             ; 381 
0541   F90C             ; 382     ParseWord();
0542   F90C CD 16 F9    	call parseword
0543   F90F             ; 383     param3 = hl;
0544   F90F 22 55 F7    	ld (param3), hl
0545   F912             ; 384     if (flag_c)
0546   F912             ; 385         return;
0547   F912 D8          	ret c
0548   F913             ; 386 
0549   F913             ; 387     MonitorError();
0550   F913 C3 75 F8    	jp monitorerror
0551   F916             ; 388 }
0552   F916             ; 389 
0553   F916             ; 390 void ParseWord(...) {
0554   F916             parseword: 
0555   F916             ; 391     hl = 0;
0556   F916 21 00 00    	ld hl, 0
0557   F919             ; 392     for (;;) {
0558   F919             l_16: 
0559   F919             ; 393         a = *de;
0560   F919 1A          	ld a, (de)
0561   F91A             ; 394         de++;
0562   F91A 13          	inc de
0563   F91B             ; 395         if (a == 13)
0564   F91B FE 0D       	cp 13
0565   F91D             ; 396             return ParseWordReturnCf(hl);
0566   F91D CA 4A F9    	jp z, parsewordreturncf
0567   F920             ; 397         if (a == ',')
0568   F920 FE 2C       	cp 44
0569   F922             ; 398             return;
0570   F922 C8          	ret z
0571   F923             ; 399         if (a == ' ')
0572   F923 FE 20       	cp 32
0573   F925             ; 400             continue;
0574   F925 CA 19 F9    	jp z, l_16
0575   F928             ; 401         a -= '0';
0576   F928 D6 30       	sub 48
0577   F92A             ; 402         if (flag_m)
0578   F92A             ; 403             return MonitorError();
0579   F92A FA 75 F8    	jp m, monitorerror
0580   F92D             ; 404         if (flag_p(compare(a, 10))) {
0581   F92D FE 0A       	cp 10
0582   F92F FA 3E F9    	jp m, l_18
0583   F932             ; 405             if (flag_m(compare(a, 17)))
0584   F932 FE 11       	cp 17
0585   F934             ; 406                 return MonitorError();
0586   F934 FA 75 F8    	jp m, monitorerror
0587   F937             ; 407             if (flag_p(compare(a, 23)))
0588   F937 FE 17       	cp 23
0589   F939             ; 408                 return MonitorError();
0590   F939 F2 75 F8    	jp p, monitorerror
0591   F93C             ; 409             a -= 7;
0592   F93C D6 07       	sub 7
0593   F93E             l_18: 
0594   F93E             ; 410         }
0595   F93E             ; 411         c = a;
0596   F93E 4F          	ld c, a
0597   F93F             ; 412         hl += hl;
0598   F93F 29          	add hl, hl
0599   F940             ; 413         hl += hl;
0600   F940 29          	add hl, hl
0601   F941             ; 414         hl += hl;
0602   F941 29          	add hl, hl
0603   F942             ; 415         hl += hl;
0604   F942 29          	add hl, hl
0605   F943             ; 416         if (flag_c)
0606   F943             ; 417             return MonitorError();
0607   F943 DA 75 F8    	jp c, monitorerror
0608   F946             ; 418         hl += bc;
0609   F946 09          	add hl, bc
0610   F947 C3 19 F9    	jp l_16
0611   F94A             ; 419     }
0612   F94A             ; 420 }
0613   F94A             ; 421 
0614   F94A             ; 422 void ParseWordReturnCf(...) {
0615   F94A             parsewordreturncf: 
0616   F94A             ; 423     set_flag_c();
0617   F94A 37          	scf
0618   F94B C9          	ret
0619   F94C             ; 424 }
0620   F94C             ; 425 
0621   F94C             ; 426 void PrintByteFromParam1(...) {
0622   F94C             printbytefromparam1: 
0623   F94C             ; 427     hl = param1;
0624   F94C 2A 51 F7    	ld hl, (param1)
0625   F94F             ; 428     PrintHexByte(a = *hl);
0626   F94F 7E          	ld a, (hl)
0627   F950             ; 429 }
0628   F950             ; 430 
0629   F950             ; 431 void PrintHexByte(...) {
0630   F950             printhexbyte: 
0631   F950             ; 432     b = a;
0632   F950 47          	ld b, a
0633   F951             ; 433     a = b;
0634   F951 78          	ld a, b
0635   F952             ; 434     cyclic_rotate_right(a, 4);
0636   F952 0F          	rrca
0637   F953 0F          	rrca
0638   F954 0F          	rrca
0639   F955 0F          	rrca
0640   F956             ; 435     PrintHex(a);
0641   F956 CD 5A F9    	call printhex
0642   F959             ; 436     PrintHex(a = b);
0643   F959 78          	ld a, b
0644   F95A             ; 437 }
0645   F95A             ; 438 
0646   F95A             ; 439 void PrintHex(...) {
0647   F95A             printhex: 
0648   F95A             ; 440     a &= 0x0F;
0649   F95A E6 0F       	and 15
0650   F95C             ; 441     if (flag_p(compare(a, 10)))
0651   F95C FE 0A       	cp 10
0652   F95E             ; 442         a += 'A' - '0' - 10;
0653   F95E FA 63 F9    	jp m, l_20
0654   F961 C6 07       	add 7
0655   F963             l_20: 
0656   F963             ; 443     a += '0';
0657   F963 C6 30       	add 48
0658   F965             ; 444     PrintCharA(a);
0659   F965 C3 60 FE    	jp printchara
0660   F968             ; 445 }
0661   F968             ; 446 
0662   F968             ; 447 void PrintLfParam1(...) {
0663   F968             printlfparam1: 
0664   F968             ; 448     PrintLf();
0665   F968 CD D1 F8    	call printlf
0666   F96B             ; 449     PrintParam1Space();
0667   F96B             ; 450 }
0668   F96B             ; 451 
0669   F96B             ; 452 void PrintParam1Space() {
0670   F96B             printparam1space: 
0671   F96B             ; 453     PrintHexWordSpace(hl = &param1h);
0672   F96B 21 52 F7    	ld hl, 0FFFFh & (param1h)
0673   F96E             ; 454 }
0674   F96E             ; 455 
0675   F96E             ; 456 void PrintHexWordSpace(...) {
0676   F96E             printhexwordspace: 
0677   F96E             ; 457     PrintHexByte(a = *hl);
0678   F96E 7E          	ld a, (hl)
0679   F96F CD 50 F9    	call printhexbyte
0680   F972             ; 458     hl--;
0681   F972 2B          	dec hl
0682   F973             ; 459     PrintHexByte(a = *hl);
0683   F973 7E          	ld a, (hl)
0684   F974 CD 50 F9    	call printhexbyte
0685   F977             ; 460     PrintSpace();
0686   F977             ; 461 }
0687   F977             ; 462 
0688   F977             ; 463 void PrintSpace(...) {
0689   F977             printspace: 
0690   F977             ; 464     PrintCharA(a = ' ');
0691   F977 3E 20       	ld a, 32
0692   F979 C3 60 FE    	jp printchara
0693   F97C             ; 465 }
0694   F97C             ; 466 
0695   F97C             ; 467 void Loop(...) {
0696   F97C             loop: 
0697   F97C             ; 468     push_pop(de) {
0698   F97C D5          	push de
0699   F97D             ; 469         hl = param1;
0700   F97D 2A 51 F7    	ld hl, (param1)
0701   F980             ; 470         swap(hl, de);
0702   F980 EB          	ex hl, de
0703   F981             ; 471         hl = param2;
0704   F981 2A 53 F7    	ld hl, (param2)
0705   F984             ; 472         CompareHlDe(hl, de);
0706   F984 CD 93 F9    	call comparehlde
0707   F987 D1          	pop de
0708   F988             ; 473     }
0709   F988             ; 474     if (flag_z)
0710   F988             ; 475         return PopWordReturn();
0711   F988 CA CE F8    	jp z, popwordreturn
0712   F98B             ; 476     IncWord(hl = &param1);
0713   F98B 21 51 F7    	ld hl, 0FFFFh & (param1)
0714   F98E             ; 477 }
0715   F98E             ; 478 
0716   F98E             ; 479 void IncWord(...) {
0717   F98E             incword: 
0718   F98E             ; 480     (*hl)++;
0719   F98E 34          	inc (hl)
0720   F98F             ; 481     if (flag_nz)
0721   F98F             ; 482         return;
0722   F98F C0          	ret nz
0723   F990             ; 483     hl++;
0724   F990 23          	inc hl
0725   F991             ; 484     (*hl)++;
0726   F991 34          	inc (hl)
0727   F992 C9          	ret
0728   F993             ; 485 }
0729   F993             ; 486 
0730   F993             ; 487 void CompareHlDe(...) {
0731   F993             comparehlde: 
0732   F993             ; 488     if ((a = h) != d)
0733   F993 7C          	ld a, h
0734   F994 BA          	cp d
0735   F995             ; 489         return;
0736   F995 C0          	ret nz
0737   F996             ; 490     compare(a = l, e);
0738   F996 7D          	ld a, l
0739   F997 BB          	cp e
0740   F998 C9          	ret
0741   F999             ; 491 }
0742   F999             ; 492 
0743   F999             ; 493 // Команда X
0744   F999             ; 494 // Изменение содержимого внутреннего регистра микропроцессора
0745   F999             ; 495 
0746   F999             ; 496 void CmdX() {
0747   F999             cmdx: 
0748   F999             ; 497     hl = &cmdBuffer1;
0749   F999 21 7C F7    	ld hl, 0FFFFh & (cmdbuffer1)
0750   F99C             ; 498     a = *hl;
0751   F99C 7E          	ld a, (hl)
0752   F99D             ; 499     if (a == 0x0D)
0753   F99D FE 0D       	cp 13
0754   F99F             ; 500         return PrintRegs();
0755   F99F CA EA F9    	jp z, printregs
0756   F9A2             ; 501     if (a == 'S')
0757   F9A2 FE 53       	cp 83
0758   F9A4             ; 502         return CmdXS();
0759   F9A4 CA C8 F9    	jp z, cmdxs
0760   F9A7             ; 503     FindRegister(de = &regList);
0761   F9A7 11 30 FA    	ld de, reglist
0762   F9AA CD DE F9    	call findregister
0763   F9AD             ; 504     hl = &regs;
0764   F9AD 21 65 F7    	ld hl, 0FFFFh & (regs)
0765   F9B0             ; 505     de++;
0766   F9B0 13          	inc de
0767   F9B1             ; 506     l = a = *de;
0768   F9B1 1A          	ld a, (de)
0769   F9B2 6F          	ld l, a
0770   F9B3             ; 507     push_pop(hl) {
0771   F9B3 E5          	push hl
0772   F9B4             ; 508         PrintSpace();
0773   F9B4 CD 77 F9    	call printspace
0774   F9B7             ; 509         PrintHexByte(a = *hl);
0775   F9B7 7E          	ld a, (hl)
0776   F9B8 CD 50 F9    	call printhexbyte
0777   F9BB             ; 510         Input();
0778   F9BB CD 91 F8    	call input
0779   F9BE             ; 511         if (flag_nc)
0780   F9BE             ; 512             return Monitor();
0781   F9BE D2 29 F8    	jp nc, monitor
0782   F9C1             ; 513         ParseWord();
0783   F9C1 CD 16 F9    	call parseword
0784   F9C4             ; 514         a = l;
0785   F9C4 7D          	ld a, l
0786   F9C5 E1          	pop hl
0787   F9C6             ; 515     }
0788   F9C6             ; 516     *hl = a;
0789   F9C6 77          	ld (hl), a
0790   F9C7 C9          	ret
0791   F9C8             ; 517 }
0792   F9C8             ; 518 
0793   F9C8             ; 519 void CmdXS() {
0794   F9C8             cmdxs: 
0795   F9C8             ; 520     PrintSpace();
0796   F9C8 CD 77 F9    	call printspace
0797   F9CB             ; 521     PrintHexWordSpace(hl = &regSPH);
0798   F9CB 21 66 F7    	ld hl, 0FFFFh & (regsph)
0799   F9CE CD 6E F9    	call printhexwordspace
0800   F9D1             ; 522     Input();
0801   F9D1 CD 91 F8    	call input
0802   F9D4             ; 523     if (flag_nc)
0803   F9D4             ; 524         return Monitor();
0804   F9D4 D2 29 F8    	jp nc, monitor
0805   F9D7             ; 525     ParseWord();
0806   F9D7 CD 16 F9    	call parseword
0807   F9DA             ; 526     regSP = hl;
0808   F9DA 22 65 F7    	ld (regsp), hl
0809   F9DD C9          	ret
0810   F9DE             ; 527 }
0811   F9DE             ; 528 
0812   F9DE             ; 529 void FindRegister(...) {
0813   F9DE             findregister: 
0814   F9DE             ; 530     for (;;) {
0815   F9DE             l_23: 
0816   F9DE             ; 531         a = *de;
0817   F9DE 1A          	ld a, (de)
0818   F9DF             ; 532         if (flag_z(a &= a))
0819   F9DF A7          	and a
0820   F9E0             ; 533             return MonitorError();
0821   F9E0 CA 75 F8    	jp z, monitorerror
0822   F9E3             ; 534         if (a == *hl)
0823   F9E3 BE          	cp (hl)
0824   F9E4             ; 535             return;
0825   F9E4 C8          	ret z
0826   F9E5             ; 536         de++;
0827   F9E5 13          	inc de
0828   F9E6             ; 537         de++;
0829   F9E6 13          	inc de
0830   F9E7 C3 DE F9    	jp l_23
0831   F9EA             ; 538     }
0832   F9EA             ; 539 }
0833   F9EA             ; 540 
0834   F9EA             ; 541 void PrintRegs(...) {
0835   F9EA             printregs: 
0836   F9EA             ; 542     de = &regList;
0837   F9EA 11 30 FA    	ld de, reglist
0838   F9ED             ; 543     b = 8;
0839   F9ED 06 08       	ld b, 8
0840   F9EF             ; 544     PrintLf();
0841   F9EF CD D1 F8    	call printlf
0842   F9F2             ; 545     do {
0843   F9F2             l_25: 
0844   F9F2             ; 546         c = a = *de;
0845   F9F2 1A          	ld a, (de)
0846   F9F3 4F          	ld c, a
0847   F9F4             ; 547         de++;
0848   F9F4 13          	inc de
0849   F9F5             ; 548         push_pop(bc) {
0850   F9F5 C5          	push bc
0851   F9F6             ; 549             PrintRegMinus(c);
0852   F9F6 CD 24 FA    	call printregminus
0853   F9F9             ; 550             a = *de;
0854   F9F9 1A          	ld a, (de)
0855   F9FA             ; 551             hl = &regs;
0856   F9FA 21 65 F7    	ld hl, 0FFFFh & (regs)
0857   F9FD             ; 552             l = a;
0858   F9FD 6F          	ld l, a
0859   F9FE             ; 553             PrintHexByte(a = *hl);
0860   F9FE 7E          	ld a, (hl)
0861   F9FF CD 50 F9    	call printhexbyte
0862   FA02 C1          	pop bc
0863   FA03             ; 554         }
0864   FA03             ; 555         de++;
0865   FA03 13          	inc de
0866   FA04             l_26: 
0867   FA04             ; 556     } while (flag_nz(b--));
0868   FA04 05          	dec b
0869   FA05 C2 F2 F9    	jp nz, l_25
0870   FA08             ; 557 
0871   FA08             ; 558     c = a = *de;
0872   FA08 1A          	ld a, (de)
0873   FA09 4F          	ld c, a
0874   FA0A             ; 559     PrintRegMinus();
0875   FA0A CD 24 FA    	call printregminus
0876   FA0D             ; 560     param1 = hl = regs;
0877   FA0D 2A 65 F7    	ld hl, (regs)
0878   FA10 22 51 F7    	ld (param1), hl
0879   FA13             ; 561     PrintParam1Space();
0880   FA13 CD 6B F9    	call printparam1space
0881   FA16             ; 562     PrintRegMinus(c = 'O');
0882   FA16 0E 4F       	ld c, 79
0883   FA18 CD 24 FA    	call printregminus
0884   FA1B             ; 563     PrintHexWordSpace(hl = &lastBreakAddressHigh);
0885   FA1B 21 70 F7    	ld hl, 0FFFFh & (lastbreakaddresshigh)
0886   FA1E CD 6E F9    	call printhexwordspace
0887   FA21             ; 564     PrintLf();
0888   FA21 C3 D1 F8    	jp printlf
0889   FA24             ; 565 }
0890   FA24             ; 566 
0891   FA24             ; 567 void PrintRegMinus(...) {
0892   FA24             printregminus: 
0893   FA24             ; 568     PrintSpace();
0894   FA24 CD 77 F9    	call printspace
0895   FA27             ; 569     PrintCharA(a = c);
0896   FA27 79          	ld a, c
0897   FA28 CD 60 FE    	call printchara
0898   FA2B             ; 570     PrintCharA(a = '-');
0899   FA2B 3E 2D       	ld a, 45
0900   FA2D C3 60 FE    	jp printchara
0901   FA30             ; 571 }
0902   FA30             ; 572 
0903   FA30             ; 573 uint8_t regList[] = {'A', (uint8_t)(uintptr_t)&regA, 'B', (uint8_t)(uintptr_t)&regB, 'C', (uint8_t)(uintptr_t)&regC,
0904   FA30             reglist: 
0905   FA30 41          	db 65
0906   FA31 68          	db 0FFh & (0FFFFh & (rega))
0907   FA32 42          	db 66
0908   FA33 6A          	db 0FFh & (0FFFFh & (regb))
0909   FA34 43          	db 67
0910   FA35 69          	db 0FFh & (0FFFFh & (regc))
0911   FA36 44          	db 68
0912   FA37 6C          	db 0FFh & (0FFFFh & (regd))
0913   FA38 45          	db 69
0914   FA39 6B          	db 0FFh & (0FFFFh & (rege))
0915   FA3A 46          	db 70
0916   FA3B 67          	db 0FFh & (0FFFFh & (regf))
0917   FA3C 48          	db 72
0918   FA3D 6E          	db 0FFh & (0FFFFh & (regh))
0919   FA3E 4C          	db 76
0920   FA3F 6D          	db 0FFh & (0FFFFh & (regl))
0921   FA40 53          	db 83
0922   FA41 65          	db 0FFh & (0FFFFh & (regsp))
0923   FA42 00          	db 0
0924   FA43             ; 578  aStart[] = "\x0ASTART-";
0925   FA43             astart: 
0926   FA43 0A          	db 10
0927   FA44 53          	db 83
0928   FA45 54          	db 84
0929   FA46 41          	db 65
0930   FA47 52          	db 82
0931   FA48 54          	db 84
0932   FA49 2D          	db 45
0933   FA4A 00          	ds 1
0934   FA4B             ; 579  aDir_[] = "\x0ADIR. -";
0935   FA4B             adir_: 
0936   FA4B 0A          	db 10
0937   FA4C 44          	db 68
0938   FA4D 49          	db 73
0939   FA4E 52          	db 82
0940   FA4F 2E          	db 46
0941   FA50 20          	db 32
0942   FA51 2D          	db 45
0943   FA52 00          	ds 1
0944   FA53             ; 584  CmdB() {
0945   FA53             cmdb: 
0946   FA53             ; 585     ParseParams();
0947   FA53 CD DE F8    	call parseparams
0948   FA56             ; 586     InitRst38();
0949   FA56 CD 66 FA    	call initrst38
0950   FA59             ; 587     hl = param1;
0951   FA59 2A 51 F7    	ld hl, (param1)
0952   FA5C             ; 588     a = *hl;
0953   FA5C 7E          	ld a, (hl)
0954   FA5D             ; 589     *hl = OPCODE_RST_38;
0955   FA5D 36 FF       	ld (hl), 255
0956   FA5F             ; 590     breakAddress = hl;
0957   FA5F 22 72 F7    	ld (breakaddress), hl
0958   FA62             ; 591     breakPrevByte = a;
0959   FA62 32 74 F7    	ld (breakprevbyte), a
0960   FA65 C9          	ret
0961   FA66             ; 592 }
0962   FA66             ; 593 
0963   FA66             ; 594 void InitRst38() {
0964   FA66             initrst38: 
0965   FA66             ; 595     rst38Opcode = a = OPCODE_JMP;
0966   FA66 3E C3       	ld a, 195
0967   FA68 32 38 00    	ld (rst38opcode), a
0968   FA6B             ; 596     rst38Address = hl = &BreakPoint;
0969   FA6B 21 72 FA    	ld hl, 0FFFFh & (breakpoint)
0970   FA6E 22 39 00    	ld (rst38address), hl
0971   FA71 C9          	ret
0972   FA72             ; 597 }
0973   FA72             ; 598 
0974   FA72             ; 599 void BreakPoint(...) {
0975   FA72             breakpoint: 
0976   FA72             ; 600     regHL = hl;
0977   FA72 22 6D F7    	ld (reghl), hl
0978   FA75             ; 601     push(a);
0979   FA75 F5          	push af
0980   FA76             ; 602     hl = 4;
0981   FA76 21 04 00    	ld hl, 4
0982   FA79             ; 603     hl += sp;
0983   FA79 39          	add hl, sp
0984   FA7A             ; 604     regs = hl;
0985   FA7A 22 65 F7    	ld (regs), hl
0986   FA7D             ; 605     pop(a);
0987   FA7D F1          	pop af
0988   FA7E             ; 606     swap(*sp, hl);
0989   FA7E E3          	ex (sp), hl
0990   FA7F             ; 607     hl--;
0991   FA7F 2B          	dec hl
0992   FA80             ; 608     swap(*sp, hl);
0993   FA80 E3          	ex (sp), hl
0994   FA81             ; 609     sp = &regHL;
0995   FA81 31 6D F7    	ld sp, 0FFFFh & (reghl)
0996   FA84             ; 610     push(de, bc, a);
0997   FA84 D5          	push de
0998   FA85 C5          	push bc
0999   FA86 F5          	push af
1000   FA87             ; 611     sp = STACK_TOP;
1001   FA87 31 FF F7    	ld sp, 63487
1002   FA8A             ; 612 
1003   FA8A             ; 613     hl = regSP;
1004   FA8A 2A 65 F7    	ld hl, (regsp)
1005   FA8D             ; 614     hl--;
1006   FA8D 2B          	dec hl
1007   FA8E             ; 615     d = *hl;
1008   FA8E 56          	ld d, (hl)
1009   FA8F             ; 616     hl--;
1010   FA8F 2B          	dec hl
1011   FA90             ; 617     e = *hl;
1012   FA90 5E          	ld e, (hl)
1013   FA91             ; 618     l = e;
1014   FA91 6B          	ld l, e
1015   FA92             ; 619     h = d;
1016   FA92 62          	ld h, d
1017   FA93             ; 620     lastBreakAddress = hl;
1018   FA93 22 6F F7    	ld (lastbreakaddress), hl
1019   FA96             ; 621 
1020   FA96             ; 622     hl = breakAddress;
1021   FA96 2A 72 F7    	ld hl, (breakaddress)
1022   FA99             ; 623     CompareHlDe();
1023   FA99 CD 93 F9    	call comparehlde
1024   FA9C             ; 624     if (flag_nz) {
1025   FA9C CA B4 FA    	jp z, l_28
1026   FA9F             ; 625         hl = breakAddress2;
1027   FA9F 2A 75 F7    	ld hl, (breakaddress2)
1028   FAA2             ; 626         CompareHlDe(hl, de);
1029   FAA2 CD 93 F9    	call comparehlde
1030   FAA5             ; 627         if (flag_z)
1031   FAA5             ; 628             return BreakPointAt2();
1032   FAA5 CA 24 FB    	jp z, breakpointat2
1033   FAA8             ; 629 
1034   FAA8             ; 630         hl = breakAddress3;
1035   FAA8 2A 78 F7    	ld hl, (breakaddress3)
1036   FAAB             ; 631         CompareHlDe(hl, de);
1037   FAAB CD 93 F9    	call comparehlde
1038   FAAE             ; 632         if (flag_z)
1039   FAAE             ; 633             return BreakpointAt3();
1040   FAAE CA 46 FB    	jp z, breakpointat3
1041   FAB1             ; 634 
1042   FAB1             ; 635         return MonitorError();
1043   FAB1 C3 75 F8    	jp monitorerror
1044   FAB4             l_28: 
1045   FAB4             ; 636     }
1046   FAB4             ; 637     *hl = a = breakPrevByte;
1047   FAB4 3A 74 F7    	ld a, (breakprevbyte)
1048   FAB7 77          	ld (hl), a
1049   FAB8             ; 638     breakAddress = hl = 0xFFFF;
1050   FAB8 21 FF FF    	ld hl, 65535
1051   FABB 22 72 F7    	ld (breakaddress), hl
1052   FABE             ; 639     return Monitor();
1053   FABE C3 29 F8    	jp monitor
1054   FAC1             ; 640 }
1055   FAC1             ; 641 
1056   FAC1             ; 642 // Команда G<адрес>
1057   FAC1             ; 643 // Запуск программы в отладочном режиме
1058   FAC1             ; 644 
1059   FAC1             ; 645 void CmdG() {
1060   FAC1             cmdg: 
1061   FAC1             ; 646     ParseParams();
1062   FAC1 CD DE F8    	call parseparams
1063   FAC4             ; 647     if ((a = cmdBuffer1) == 0x0D)
1064   FAC4 3A 7C F7    	ld a, (cmdbuffer1)
1065   FAC7 FE 0D       	cp 13
1066   FAC9             ; 648         param1 = hl = lastBreakAddress;
1067   FAC9 C2 D2 FA    	jp nz, l_30
1068   FACC 2A 6F F7    	ld hl, (lastbreakaddress)
1069   FACF 22 51 F7    	ld (param1), hl
1070   FAD2             l_30: 
1071   FAD2             ; 649     Run();
1072   FAD2             ; 650 }
1073   FAD2             ; 651 
1074   FAD2             ; 652 void Run() {
1075   FAD2             run: 
1076   FAD2             ; 653     jumpOpcode = a = OPCODE_JMP;
1077   FAD2 3E C3       	ld a, 195
1078   FAD4 32 50 F7    	ld (jumpopcode), a
1079   FAD7             ; 654     sp = &regs;
1080   FAD7 31 65 F7    	ld sp, 0FFFFh & (regs)
1081   FADA             ; 655     pop(de, bc, a, hl);
1082   FADA E1          	pop hl
1083   FADB F1          	pop af
1084   FADC C1          	pop bc
1085   FADD D1          	pop de
1086   FADE             ; 656     sp = hl;
1087   FADE F9          	ld sp, hl
1088   FADF             ; 657     hl = regHL;
1089   FADF 2A 6D F7    	ld hl, (reghl)
1090   FAE2             ; 658     jumpParam1();
1091   FAE2 C3 50 F7    	jp jumpparam1
1092   FAE5             ; 659 }
1093   FAE5             ; 660 
1094   FAE5             ; 661 void CmdP(...) {
1095   FAE5             cmdp: 
1096   FAE5             ; 662     ParseParams();
1097   FAE5 CD DE F8    	call parseparams
1098   FAE8             ; 663     InitRst38();
1099   FAE8 CD 66 FA    	call initrst38
1100   FAEB             ; 664 
1101   FAEB             ; 665     breakAddress2 = hl = param1;
1102   FAEB 2A 51 F7    	ld hl, (param1)
1103   FAEE 22 75 F7    	ld (breakaddress2), hl
1104   FAF1             ; 666     a = *hl;
1105   FAF1 7E          	ld a, (hl)
1106   FAF2             ; 667     *hl = OPCODE_RST_38;
1107   FAF2 36 FF       	ld (hl), 255
1108   FAF4             ; 668     breakPrevByte2 = a;
1109   FAF4 32 77 F7    	ld (breakprevbyte2), a
1110   FAF7             ; 669 
1111   FAF7             ; 670     breakAddress3 = hl = param2;
1112   FAF7 2A 53 F7    	ld hl, (param2)
1113   FAFA 22 78 F7    	ld (breakaddress3), hl
1114   FAFD             ; 671     a = *hl;
1115   FAFD 7E          	ld a, (hl)
1116   FAFE             ; 672     *hl = OPCODE_RST_38;
1117   FAFE 36 FF       	ld (hl), 255
1118   FB00             ; 673     breakPrevByte3 = a;
1119   FB00 32 7A F7    	ld (breakprevbyte3), a
1120   FB03             ; 674 
1121   FB03             ; 675     breakCounter = a = param3;
1122   FB03 3A 55 F7    	ld a, (param3)
1123   FB06 32 71 F7    	ld (breakcounter), a
1124   FB09             ; 676 
1125   FB09             ; 677     PrintString(hl = &aStart);
1126   FB09 21 43 FA    	ld hl, astart
1127   FB0C CD D4 F8    	call printstring
1128   FB0F             ; 678 
1129   FB0F             ; 679     hl = &cmdBuffer1;
1130   FB0F 21 7C F7    	ld hl, 0FFFFh & (cmdbuffer1)
1131   FB12             ; 680     ReadStringLoop();
1132   FB12 CD 5D F8    	call readstringloop
1133   FB15             ; 681     ParseParams();
1134   FB15 CD DE F8    	call parseparams
1135   FB18             ; 682     PrintString(hl = &aDir_);
1136   FB18 21 4B FA    	ld hl, adir_
1137   FB1B CD D4 F8    	call printstring
1138   FB1E             ; 683     ReadString();
1139   FB1E CD 5A F8    	call readstring
1140   FB21             ; 684     Run();
1141   FB21 C3 D2 FA    	jp run
1142   FB24             ; 685 }
1143   FB24             ; 686 
1144   FB24             ; 687 void BreakPointAt2(...) {
1145   FB24             breakpointat2: 
1146   FB24             ; 688     *hl = a = breakPrevByte2;
1147   FB24 3A 77 F7    	ld a, (breakprevbyte2)
1148   FB27 77          	ld (hl), a
1149   FB28             ; 689 
1150   FB28             ; 690     hl = breakAddress3;
1151   FB28 2A 78 F7    	ld hl, (breakaddress3)
1152   FB2B             ; 691     a = OPCODE_RST_38;
1153   FB2B 3E FF       	ld a, 255
1154   FB2D             ; 692     if (a != *hl) {
1155   FB2D BE          	cp (hl)
1156   FB2E CA 37 FB    	jp z, l_32
1157   FB31             ; 693         b = *hl;
1158   FB31 46          	ld b, (hl)
1159   FB32             ; 694         *hl = a;
1160   FB32 77          	ld (hl), a
1161   FB33             ; 695         breakPrevByte3 = a = b;
1162   FB33 78          	ld a, b
1163   FB34 32 7A F7    	ld (breakprevbyte3), a
1164   FB37             l_32: 
1165   FB37             ; 696     }
1166   FB37             ; 697     ContinueBreakpoint();
1167   FB37             ; 698 }
1168   FB37             ; 699 
1169   FB37             ; 700 void ContinueBreakpoint(...) {
1170   FB37             continuebreakpoint: 
1171   FB37             ; 701     PrintRegs();
1172   FB37 CD EA F9    	call printregs
1173   FB3A             ; 702     MonitorExecute();
1174   FB3A CD 3D F8    	call monitorexecute
1175   FB3D             ; 703     param1 = hl = lastBreakAddress;
1176   FB3D 2A 6F F7    	ld hl, (lastbreakaddress)
1177   FB40 22 51 F7    	ld (param1), hl
1178   FB43             ; 704     Run();
1179   FB43 C3 D2 FA    	jp run
1180   FB46             ; 705 }
1181   FB46             ; 706 
1182   FB46             ; 707 void BreakpointAt3(...) {
1183   FB46             breakpointat3: 
1184   FB46             ; 708     *hl = a = breakPrevByte3;
1185   FB46 3A 7A F7    	ld a, (breakprevbyte3)
1186   FB49 77          	ld (hl), a
1187   FB4A             ; 709 
1188   FB4A             ; 710     hl = breakAddress2;
1189   FB4A 2A 75 F7    	ld hl, (breakaddress2)
1190   FB4D             ; 711     a = OPCODE_RST_38;
1191   FB4D 3E FF       	ld a, 255
1192   FB4F             ; 712     if (a == *hl)
1193   FB4F BE          	cp (hl)
1194   FB50             ; 713         return ContinueBreakpoint();
1195   FB50 CA 37 FB    	jp z, continuebreakpoint
1196   FB53             ; 714     b = *hl;
1197   FB53 46          	ld b, (hl)
1198   FB54             ; 715     *hl = a;
1199   FB54 77          	ld (hl), a
1200   FB55             ; 716     breakPrevByte2 = a = b;
1201   FB55 78          	ld a, b
1202   FB56 32 77 F7    	ld (breakprevbyte2), a
1203   FB59             ; 717 
1204   FB59             ; 718     hl = &breakCounter;
1205   FB59 21 71 F7    	ld hl, 0FFFFh & (breakcounter)
1206   FB5C             ; 719     (*hl)--;
1207   FB5C 35          	dec (hl)
1208   FB5D             ; 720     if (flag_nz)
1209   FB5D             ; 721         return ContinueBreakpoint();
1210   FB5D C2 37 FB    	jp nz, continuebreakpoint
1211   FB60             ; 722 
1212   FB60             ; 723     a = breakPrevByte2;
1213   FB60 3A 77 F7    	ld a, (breakprevbyte2)
1214   FB63             ; 724     hl = breakAddress2;
1215   FB63 2A 75 F7    	ld hl, (breakaddress2)
1216   FB66             ; 725     *hl = a;
1217   FB66 77          	ld (hl), a
1218   FB67             ; 726     Monitor();
1219   FB67 C3 29 F8    	jp monitor
1220   FB6A             ; 727 }
1221   FB6A             ; 728 
1222   FB6A             ; 729 // Команда D<адрес>,<адрес>
1223   FB6A             ; 730 // Просмотр содержимого области памяти в шестнадцатеричном виде
1224   FB6A             ; 731 
1225   FB6A             ; 732 void CmdD() {
1226   FB6A             cmdd: 
1227   FB6A             ; 733     ParseParams();
1228   FB6A CD DE F8    	call parseparams
1229   FB6D             ; 734     PrintLf();
1230   FB6D CD D1 F8    	call printlf
1231   FB70             ; 735 CmdDLine:
1232   FB70             cmddline: 
1233   FB70             ; 736     PrintLfParam1();
1234   FB70 CD 68 F9    	call printlfparam1
1235   FB73             ; 737     for (;;) {
1236   FB73             l_35: 
1237   FB73             ; 738         PrintSpace();
1238   FB73 CD 77 F9    	call printspace
1239   FB76             ; 739         PrintByteFromParam1();
1240   FB76 CD 4C F9    	call printbytefromparam1
1241   FB79             ; 740         Loop();
1242   FB79 CD 7C F9    	call loop
1243   FB7C             ; 741         a = param1;
1244   FB7C 3A 51 F7    	ld a, (param1)
1245   FB7F             ; 742         a &= 0x0F;
1246   FB7F E6 0F       	and 15
1247   FB81             ; 743         if (flag_z)
1248   FB81             ; 744             goto CmdDLine;
1249   FB81 CA 70 FB    	jp z, cmddline
1250   FB84 C3 73 FB    	jp l_35
1251   FB87             ; 745     }
1252   FB87             ; 746 }
1253   FB87             ; 747 
1254   FB87             ; 748 // Команда C<адрес от>,<адрес до>,<адрес от 2>
1255   FB87             ; 749 // Сравнение содержимого двух областей памяти
1256   FB87             ; 750 
1257   FB87             ; 751 void CmdC() {
1258   FB87             cmdc: 
1259   FB87             ; 752     ParseParams();
1260   FB87 CD DE F8    	call parseparams
1261   FB8A             ; 753     hl = param3;
1262   FB8A 2A 55 F7    	ld hl, (param3)
1263   FB8D             ; 754     swap(hl, de);
1264   FB8D EB          	ex hl, de
1265   FB8E             ; 755     for (;;) {
1266   FB8E             l_38: 
1267   FB8E             ; 756         hl = param1;
1268   FB8E 2A 51 F7    	ld hl, (param1)
1269   FB91             ; 757         a = *de;
1270   FB91 1A          	ld a, (de)
1271   FB92             ; 758         if (a != *hl) {
1272   FB92 BE          	cp (hl)
1273   FB93 CA A6 FB    	jp z, l_40
1274   FB96             ; 759             PrintLfParam1();
1275   FB96 CD 68 F9    	call printlfparam1
1276   FB99             ; 760             PrintSpace();
1277   FB99 CD 77 F9    	call printspace
1278   FB9C             ; 761             PrintByteFromParam1();
1279   FB9C CD 4C F9    	call printbytefromparam1
1280   FB9F             ; 762             PrintSpace();
1281   FB9F CD 77 F9    	call printspace
1282   FBA2             ; 763             a = *de;
1283   FBA2 1A          	ld a, (de)
1284   FBA3             ; 764             PrintHexByte();
1285   FBA3 CD 50 F9    	call printhexbyte
1286   FBA6             l_40: 
1287   FBA6             ; 765         }
1288   FBA6             ; 766         de++;
1289   FBA6 13          	inc de
1290   FBA7             ; 767         Loop();
1291   FBA7 CD 7C F9    	call loop
1292   FBAA C3 8E FB    	jp l_38
1293   FBAD             ; 768     }
1294   FBAD             ; 769 }
1295   FBAD             ; 770 
1296   FBAD             ; 771 // Команда F<адрес>,<адрес>,<байт>
1297   FBAD             ; 772 // Запись байта во все ячейки области памяти
1298   FBAD             ; 773 
1299   FBAD             ; 774 void CmdF() {
1300   FBAD             cmdf: 
1301   FBAD             ; 775     ParseParams();
1302   FBAD CD DE F8    	call parseparams
1303   FBB0             ; 776     b = a = param3;
1304   FBB0 3A 55 F7    	ld a, (param3)
1305   FBB3 47          	ld b, a
1306   FBB4             ; 777     for (;;) {
1307   FBB4             l_43: 
1308   FBB4             ; 778         hl = param1;
1309   FBB4 2A 51 F7    	ld hl, (param1)
1310   FBB7             ; 779         *hl = b;
1311   FBB7 70          	ld (hl), b
1312   FBB8             ; 780         Loop();
1313   FBB8 CD 7C F9    	call loop
1314   FBBB C3 B4 FB    	jp l_43
1315   FBBE             ; 781     }
1316   FBBE             ; 782 }
1317   FBBE             ; 783 
1318   FBBE             ; 784 // Команда S<адрес>,<адрес>,<байт>
1319   FBBE             ; 785 // Поиск байта в области памяти
1320   FBBE             ; 786 
1321   FBBE             ; 787 void CmdS() {
1322   FBBE             cmds: 
1323   FBBE             ; 788     ParseParams();
1324   FBBE CD DE F8    	call parseparams
1325   FBC1             ; 789     c = l;
1326   FBC1 4D          	ld c, l
1327   FBC2             ; 790     for (;;) {
1328   FBC2             l_46: 
1329   FBC2             ; 791         hl = param1;
1330   FBC2 2A 51 F7    	ld hl, (param1)
1331   FBC5             ; 792         a = c;
1332   FBC5 79          	ld a, c
1333   FBC6             ; 793         if (a == *hl)
1334   FBC6 BE          	cp (hl)
1335   FBC7             ; 794             PrintLfParam1();
1336   FBC7 CC 68 F9    	call z, printlfparam1
1337   FBCA             ; 795         Loop();
1338   FBCA CD 7C F9    	call loop
1339   FBCD C3 C2 FB    	jp l_46
1340   FBD0             ; 796     }
1341   FBD0             ; 797 }
1342   FBD0             ; 798 
1343   FBD0             ; 799 // Команда T<начало>,<конец>,<куда>
1344   FBD0             ; 800 // Пересылка содержимого одной области в другую
1345   FBD0             ; 801 
1346   FBD0             ; 802 void CmdT() {
1347   FBD0             cmdt: 
1348   FBD0             ; 803     ParseParams();
1349   FBD0 CD DE F8    	call parseparams
1350   FBD3             ; 804     hl = param3;
1351   FBD3 2A 55 F7    	ld hl, (param3)
1352   FBD6             ; 805     swap(hl, de);
1353   FBD6 EB          	ex hl, de
1354   FBD7             ; 806     for (;;) {
1355   FBD7             l_49: 
1356   FBD7             ; 807         hl = param1;
1357   FBD7 2A 51 F7    	ld hl, (param1)
1358   FBDA             ; 808         *de = a = *hl;
1359   FBDA 7E          	ld a, (hl)
1360   FBDB 12          	ld (de), a
1361   FBDC             ; 809         de++;
1362   FBDC 13          	inc de
1363   FBDD             ; 810         Loop();
1364   FBDD CD 7C F9    	call loop
1365   FBE0 C3 D7 FB    	jp l_49
1366   FBE3             ; 811     }
1367   FBE3             ; 812 }
1368   FBE3             ; 813 
1369   FBE3             ; 814 // Команда M<адрес>
1370   FBE3             ; 815 // Просмотр или изменение содержимого ячейки (ячеек) памяти
1371   FBE3             ; 816 
1372   FBE3             ; 817 void CmdM() {
1373   FBE3             cmdm: 
1374   FBE3             ; 818     ParseParams();
1375   FBE3 CD DE F8    	call parseparams
1376   FBE6             ; 819     for (;;) {
1377   FBE6             l_52: 
1378   FBE6             ; 820         PrintSpace();
1379   FBE6 CD 77 F9    	call printspace
1380   FBE9             ; 821         PrintByteFromParam1();
1381   FBE9 CD 4C F9    	call printbytefromparam1
1382   FBEC             ; 822         Input();
1383   FBEC CD 91 F8    	call input
1384   FBEF             ; 823         if (flag_c) {
1385   FBEF D2 FA FB    	jp nc, l_54
1386   FBF2             ; 824             ParseWord();
1387   FBF2 CD 16 F9    	call parseword
1388   FBF5             ; 825             a = l;
1389   FBF5 7D          	ld a, l
1390   FBF6             ; 826             hl = param1;
1391   FBF6 2A 51 F7    	ld hl, (param1)
1392   FBF9             ; 827             *hl = a;
1393   FBF9 77          	ld (hl), a
1394   FBFA             l_54: 
1395   FBFA             ; 828         }
1396   FBFA             ; 829         hl = &param1;
1397   FBFA 21 51 F7    	ld hl, 0FFFFh & (param1)
1398   FBFD             ; 830         IncWord();
1399   FBFD CD 8E F9    	call incword
1400   FC00             ; 831         PrintLfParam1();
1401   FC00 CD 68 F9    	call printlfparam1
1402   FC03 C3 E6 FB    	jp l_52
1403   FC06             ; 832     }
1404   FC06             ; 833 }
1405   FC06             ; 834 
1406   FC06             ; 835 // Команда J<адрес>
1407   FC06             ; 836 // Запуск программы с указанного адреса
1408   FC06             ; 837 
1409   FC06             ; 838 void CmdJ() {
1410   FC06             cmdj: 
1411   FC06             ; 839     ParseParams();
1412   FC06 CD DE F8    	call parseparams
1413   FC09             ; 840     hl = param1;
1414   FC09 2A 51 F7    	ld hl, (param1)
1415   FC0C             ; 841     return hl();
1416   FC0C E9          	jp hl
1417   FC0D             ; 842 }
1418   FC0D             ; 843 
1419   FC0D             ; 844 // Команда А<символ>
1420   FC0D             ; 845 // Вывод кода символа на экран
1421   FC0D             ; 846 
1422   FC0D             ; 847 void CmdA() {
1423   FC0D             cmda: 
1424   FC0D             ; 848     PrintLf();
1425   FC0D CD D1 F8    	call printlf
1426   FC10             ; 849     PrintHexByte(a = cmdBuffer1);
1427   FC10 3A 7C F7    	ld a, (cmdbuffer1)
1428   FC13 CD 50 F9    	call printhexbyte
1429   FC16             ; 850     PrintLf();
1430   FC16 C3 D1 F8    	jp printlf
1431   FC19             ; 851 }
1432   FC19             ; 852 
1433   FC19             ; 853 // Команда K
1434   FC19             ; 854 // Вывод символа с клавиатуры на экран
1435   FC19             ; 855 
1436   FC19             ; 856 void CmdK() {
1437   FC19             cmdk: 
1438   FC19             ; 857     for (;;) {
1439   FC19             l_57: 
1440   FC19             ; 858         ReadKey();
1441   FC19 CD 41 FF    	call readkey
1442   FC1C             ; 859         if (a == 1)  // УС + А
1443   FC1C FE 01       	cp 1
1444   FC1E             ; 860             return Monitor();
1445   FC1E CA 29 F8    	jp z, monitor
1446   FC21             ; 861         PrintCharA(a);
1447   FC21 CD 60 FE    	call printchara
1448   FC24 C3 19 FC    	jp l_57
1449   FC27             ; 862     }
1450   FC27             ; 863 }
1451   FC27             ; 864 
1452   FC27             ; 865 // Команда Q<начало>,<конец>
1453   FC27             ; 866 // Тестирование области памяти
1454   FC27             ; 867 
1455   FC27             ; 868 void CmdQ() {
1456   FC27             cmdq: 
1457   FC27             ; 869     ParseParams();
1458   FC27 CD DE F8    	call parseparams
1459   FC2A             ; 870     for (;;) {
1460   FC2A             l_60: 
1461   FC2A             ; 871         hl = param1;
1462   FC2A 2A 51 F7    	ld hl, (param1)
1463   FC2D             ; 872         c = *hl;
1464   FC2D 4E          	ld c, (hl)
1465   FC2E             ; 873 
1466   FC2E             ; 874         a = 0x55;
1467   FC2E 3E 55       	ld a, 85
1468   FC30             ; 875         *hl = a;
1469   FC30 77          	ld (hl), a
1470   FC31             ; 876         if (a != *hl)
1471   FC31 BE          	cp (hl)
1472   FC32             ; 877             CmdQResult();
1473   FC32 C4 43 FC    	call nz, cmdqresult
1474   FC35             ; 878 
1475   FC35             ; 879         a = 0xAA;
1476   FC35 3E AA       	ld a, 170
1477   FC37             ; 880         *hl = a;
1478   FC37 77          	ld (hl), a
1479   FC38             ; 881         if (a != *hl)
1480   FC38 BE          	cp (hl)
1481   FC39             ; 882             CmdQResult();
1482   FC39 C4 43 FC    	call nz, cmdqresult
1483   FC3C             ; 883 
1484   FC3C             ; 884         *hl = c;
1485   FC3C 71          	ld (hl), c
1486   FC3D             ; 885         Loop();
1487   FC3D CD 7C F9    	call loop
1488   FC40 C3 2A FC    	jp l_60
1489   FC43             ; 886     }
1490   FC43             ; 887 }
1491   FC43             ; 888 
1492   FC43             ; 889 void CmdQResult(...) {
1493   FC43             cmdqresult: 
1494   FC43             ; 890     push_pop(a) {
1495   FC43 F5          	push af
1496   FC44             ; 891         PrintLfParam1();
1497   FC44 CD 68 F9    	call printlfparam1
1498   FC47             ; 892         PrintSpace();
1499   FC47 CD 77 F9    	call printspace
1500   FC4A             ; 893         PrintByteFromParam1();
1501   FC4A CD 4C F9    	call printbytefromparam1
1502   FC4D             ; 894         PrintSpace();
1503   FC4D CD 77 F9    	call printspace
1504   FC50 F1          	pop af
1505   FC51             ; 895     }
1506   FC51             ; 896     PrintHexByte(a);
1507   FC51 CD 50 F9    	call printhexbyte
1508   FC54             ; 897     return;
1509   FC54 C9          	ret
1510   FC55             ; 898 }
1511   FC55             ; 899 
1512   FC55             ; 900 // Команда L<начало>,<конец>
1513   FC55             ; 901 // Посмотр области памяти в символьном виде
1514   FC55             ; 902 
1515   FC55             ; 903 void CmdL() {
1516   FC55             cmdl: 
1517   FC55             ; 904     ParseParams();
1518   FC55 CD DE F8    	call parseparams
1519   FC58             ; 905     PrintLf();
1520   FC58 CD D1 F8    	call printlf
1521   FC5B             ; 906 
1522   FC5B             ; 907 CmdLLine:
1523   FC5B             cmdlline: 
1524   FC5B             ; 908     PrintLfParam1();
1525   FC5B CD 68 F9    	call printlfparam1
1526   FC5E             ; 909 
1527   FC5E             ; 910     for (;;) {
1528   FC5E             l_63: 
1529   FC5E             ; 911         PrintSpace();
1530   FC5E CD 77 F9    	call printspace
1531   FC61             ; 912         hl = param1;
1532   FC61 2A 51 F7    	ld hl, (param1)
1533   FC64             ; 913         a = *hl;
1534   FC64 7E          	ld a, (hl)
1535   FC65             ; 914         if (a >= 0x20) {
1536   FC65 FE 20       	cp 32
1537   FC67 DA 72 FC    	jp c, l_65
1538   FC6A             ; 915             if (a < 0x80) {
1539   FC6A FE 80       	cp 128
1540   FC6C D2 72 FC    	jp nc, l_67
1541   FC6F             ; 916                 goto CmdLShow;
1542   FC6F C3 74 FC    	jp cmdlshow
1543   FC72             l_67: 
1544   FC72             l_65: 
1545   FC72             ; 917             }
1546   FC72             ; 918         }
1547   FC72             ; 919         a = '.';
1548   FC72 3E 2E       	ld a, 46
1549   FC74             ; 920     CmdLShow:
1550   FC74             cmdlshow: 
1551   FC74             ; 921         PrintCharA();
1552   FC74 CD 60 FE    	call printchara
1553   FC77             ; 922         Loop();
1554   FC77 CD 7C F9    	call loop
1555   FC7A             ; 923         if (flag_z((a = param1) &= 0x0F))
1556   FC7A 3A 51 F7    	ld a, (param1)
1557   FC7D E6 0F       	and 15
1558   FC7F             ; 924             goto CmdLLine;
1559   FC7F CA 5B FC    	jp z, cmdlline
1560   FC82 C3 5E FC    	jp l_63
1561   FC85             ; 925     }
1562   FC85             ; 926 }
1563   FC85             ; 927 
1564   FC85             ; 928 // Команда H<число 1>,<число 2>
1565   FC85             ; 929 // Сложение и вычитание чисел
1566   FC85             ; 930 
1567   FC85             ; 931 void CmdH(...) {
1568   FC85             cmdh: 
1569   FC85             ; 932     hl = &param1;
1570   FC85 21 51 F7    	ld hl, 0FFFFh & (param1)
1571   FC88             ; 933     b = 6;
1572   FC88 06 06       	ld b, 6
1573   FC8A             ; 934     a ^= a;
1574   FC8A AF          	xor a
1575   FC8B             ; 935     do {
1576   FC8B             l_69: 
1577   FC8B             ; 936         *hl = a;
1578   FC8B 77          	ld (hl), a
1579   FC8C             l_70: 
1580   FC8C             ; 937     } while (flag_nz(b--));
1581   FC8C 05          	dec b
1582   FC8D C2 8B FC    	jp nz, l_69
1583   FC90             ; 938 
1584   FC90             ; 939     de = &cmdBuffer1;
1585   FC90 11 7C F7    	ld de, 0FFFFh & (cmdbuffer1)
1586   FC93             ; 940 
1587   FC93             ; 941     ParseWord();
1588   FC93 CD 16 F9    	call parseword
1589   FC96             ; 942     param1 = hl;
1590   FC96 22 51 F7    	ld (param1), hl
1591   FC99             ; 943 
1592   FC99             ; 944     ParseWord();
1593   FC99 CD 16 F9    	call parseword
1594   FC9C             ; 945     param2 = hl;
1595   FC9C 22 53 F7    	ld (param2), hl
1596   FC9F             ; 946 
1597   FC9F             ; 947     PrintLf();
1598   FC9F CD D1 F8    	call printlf
1599   FCA2             ; 948     param3 = hl = param1;
1600   FCA2 2A 51 F7    	ld hl, (param1)
1601   FCA5 22 55 F7    	ld (param3), hl
1602   FCA8             ; 949     swap(hl, de);
1603   FCA8 EB          	ex hl, de
1604   FCA9             ; 950     hl = param2;
1605   FCA9 2A 53 F7    	ld hl, (param2)
1606   FCAC             ; 951     hl += de;
1607   FCAC 19          	add hl, de
1608   FCAD             ; 952     param1 = hl;
1609   FCAD 22 51 F7    	ld (param1), hl
1610   FCB0             ; 953     PrintParam1Space();
1611   FCB0 CD 6B F9    	call printparam1space
1612   FCB3             ; 954 
1613   FCB3             ; 955     hl = param2;
1614   FCB3 2A 53 F7    	ld hl, (param2)
1615   FCB6             ; 956     swap(hl, de);
1616   FCB6 EB          	ex hl, de
1617   FCB7             ; 957     hl = param3;
1618   FCB7 2A 55 F7    	ld hl, (param3)
1619   FCBA             ; 958     a = e;
1620   FCBA 7B          	ld a, e
1621   FCBB             ; 959     invert(a);
1622   FCBB 2F          	cpl
1623   FCBC             ; 960     e = a;
1624   FCBC 5F          	ld e, a
1625   FCBD             ; 961     a = d;
1626   FCBD 7A          	ld a, d
1627   FCBE             ; 962     invert(a);
1628   FCBE 2F          	cpl
1629   FCBF             ; 963     d = a;
1630   FCBF 57          	ld d, a
1631   FCC0             ; 964     de++;
1632   FCC0 13          	inc de
1633   FCC1             ; 965     hl += de;
1634   FCC1 19          	add hl, de
1635   FCC2             ; 966     param1 = hl;
1636   FCC2 22 51 F7    	ld (param1), hl
1637   FCC5             ; 967     PrintParam1Space();
1638   FCC5 CD 6B F9    	call printparam1space
1639   FCC8             ; 968     PrintLf();
1640   FCC8 C3 D1 F8    	jp printlf
1641   FCCB             ; 969 }
1642   FCCB             ; 970 
1643   FCCB             ; 971 // Команда I
1644   FCCB             ; 972 // Ввод информации с магнитной ленты
1645   FCCB             ; 973 
1646   FCCB             ; 974 void CmdI() {
1647   FCCB             cmdi: 
1648   FCCB             ; 975     ReadTapeByte(a = READ_TAPE_FIRST_BYTE);
1649   FCCB 3E FF       	ld a, 255
1650   FCCD CD 95 FD    	call readtapebyte
1651   FCD0             ; 976     param1h = a;
1652   FCD0 32 52 F7    	ld (param1h), a
1653   FCD3             ; 977     tapeStartH = a;
1654   FCD3 32 5F F7    	ld (tapestarth), a
1655   FCD6             ; 978 
1656   FCD6             ; 979     ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1657   FCD6 3E 08       	ld a, 8
1658   FCD8 CD 95 FD    	call readtapebyte
1659   FCDB             ; 980     param1 = a;
1660   FCDB 32 51 F7    	ld (param1), a
1661   FCDE             ; 981     tapeStartL = a;
1662   FCDE 32 5E F7    	ld (tapestartl), a
1663   FCE1             ; 982 
1664   FCE1             ; 983     ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1665   FCE1 3E 08       	ld a, 8
1666   FCE3 CD 95 FD    	call readtapebyte
1667   FCE6             ; 984     param2h = a;
1668   FCE6 32 54 F7    	ld (param2h), a
1669   FCE9             ; 985     tapeStopH = a;
1670   FCE9 32 61 F7    	ld (tapestoph), a
1671   FCEC             ; 986 
1672   FCEC             ; 987     ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1673   FCEC 3E 08       	ld a, 8
1674   FCEE CD 95 FD    	call readtapebyte
1675   FCF1             ; 988     param2 = a;
1676   FCF1 32 53 F7    	ld (param2), a
1677   FCF4             ; 989     tapeStopL = a;
1678   FCF4 32 60 F7    	ld (tapestopl), a
1679   FCF7             ; 990 
1680   FCF7             ; 991     a = READ_TAPE_NEXT_BYTE;
1681   FCF7 3E 08       	ld a, 8
1682   FCF9             ; 992     hl = &CmdIEnd;
1683   FCF9 21 0C FD    	ld hl, 0FFFFh & (cmdiend)
1684   FCFC             ; 993     push(hl);
1685   FCFC E5          	push hl
1686   FCFD             ; 994 
1687   FCFD             ; 995     for (;;) {
1688   FCFD             l_73: 
1689   FCFD             ; 996         hl = param1;
1690   FCFD 2A 51 F7    	ld hl, (param1)
1691   FD00             ; 997         ReadTapeByte(a);
1692   FD00 CD 95 FD    	call readtapebyte
1693   FD03             ; 998         *hl = a;
1694   FD03 77          	ld (hl), a
1695   FD04             ; 999         Loop();
1696   FD04 CD 7C F9    	call loop
1697   FD07             ; 1000         a = READ_TAPE_NEXT_BYTE;
1698   FD07 3E 08       	ld a, 8
1699   FD09 C3 FD FC    	jp l_73
1700   FD0C             ; 1001     }
1701   FD0C             ; 1002 }
1702   FD0C             ; 1003 
1703   FD0C             ; 1004 void CmdIEnd(...) {
1704   FD0C             cmdiend: 
1705   FD0C             ; 1005     PrintHexWordSpace(hl = &tapeStartH);
1706   FD0C 21 5F F7    	ld hl, 0FFFFh & (tapestarth)
1707   FD0F CD 6E F9    	call printhexwordspace
1708   FD12             ; 1006     PrintHexWordSpace(hl = &tapeStopH);
1709   FD12 21 61 F7    	ld hl, 0FFFFh & (tapestoph)
1710   FD15 CD 6E F9    	call printhexwordspace
1711   FD18             ; 1007     PrintLf();
1712   FD18 C3 D1 F8    	jp printlf
1713   FD1B             ; 1008 }
1714   FD1B             ; 1009 
1715   FD1B             ; 1010 // Команда O<начало>,<конец>
1716   FD1B             ; 1011 // Вывод содержимого области памяти на магнитную ленту
1717   FD1B             ; 1012 
1718   FD1B             ; 1013 void CmdO() {
1719   FD1B             cmdo: 
1720   FD1B             ; 1014     ParseParams();
1721   FD1B CD DE F8    	call parseparams
1722   FD1E             ; 1015     a ^= a;
1723   FD1E AF          	xor a
1724   FD1F             ; 1016     b = 0;
1725   FD1F 06 00       	ld b, 0
1726   FD21             ; 1017     do {
1727   FD21             l_75: 
1728   FD21             ; 1018         WriteTapeByte(a);
1729   FD21 CD E6 FD    	call writetapebyte
1730   FD24             l_76: 
1731   FD24             ; 1019     } while (flag_nz(b--));
1732   FD24 05          	dec b
1733   FD25 C2 21 FD    	jp nz, l_75
1734   FD28             ; 1020     WriteTapeByte(a = TAPE_START);
1735   FD28 3E E6       	ld a, 230
1736   FD2A CD E6 FD    	call writetapebyte
1737   FD2D             ; 1021     WriteTapeByte(a = param1h);
1738   FD2D 3A 52 F7    	ld a, (param1h)
1739   FD30 CD E6 FD    	call writetapebyte
1740   FD33             ; 1022     WriteTapeByte(a = param1);
1741   FD33 3A 51 F7    	ld a, (param1)
1742   FD36 CD E6 FD    	call writetapebyte
1743   FD39             ; 1023     WriteTapeByte(a = param2h);
1744   FD39 3A 54 F7    	ld a, (param2h)
1745   FD3C CD E6 FD    	call writetapebyte
1746   FD3F             ; 1024     WriteTapeByte(a = param2);
1747   FD3F 3A 53 F7    	ld a, (param2)
1748   FD42 CD E6 FD    	call writetapebyte
1749   FD45             ; 1025     for (;;) {
1750   FD45             l_79: 
1751   FD45             ; 1026         hl = param1;
1752   FD45 2A 51 F7    	ld hl, (param1)
1753   FD48             ; 1027         a = *hl;
1754   FD48 7E          	ld a, (hl)
1755   FD49             ; 1028         WriteTapeByte(a);
1756   FD49 CD E6 FD    	call writetapebyte
1757   FD4C             ; 1029         Loop();
1758   FD4C CD 7C F9    	call loop
1759   FD4F C3 45 FD    	jp l_79
1760   FD52             ; 1030     }
1761   FD52             ; 1031 }
1762   FD52             ; 1032 
1763   FD52             ; 1033 // Команда V
1764   FD52             ; 1034 // Сравнение информации на магнитной ленте с содержимым области памяти
1765   FD52             ; 1035 
1766   FD52             ; 1036 void CmdV() {
1767   FD52             cmdv: 
1768   FD52             ; 1037     ReadTapeByte(a = READ_TAPE_FIRST_BYTE);
1769   FD52 3E FF       	ld a, 255
1770   FD54 CD 95 FD    	call readtapebyte
1771   FD57             ; 1038     param1h = a;
1772   FD57 32 52 F7    	ld (param1h), a
1773   FD5A             ; 1039     ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1774   FD5A 3E 08       	ld a, 8
1775   FD5C CD 95 FD    	call readtapebyte
1776   FD5F             ; 1040     param1 = a;
1777   FD5F 32 51 F7    	ld (param1), a
1778   FD62             ; 1041     ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1779   FD62 3E 08       	ld a, 8
1780   FD64 CD 95 FD    	call readtapebyte
1781   FD67             ; 1042     param2h = a;
1782   FD67 32 54 F7    	ld (param2h), a
1783   FD6A             ; 1043     ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1784   FD6A 3E 08       	ld a, 8
1785   FD6C CD 95 FD    	call readtapebyte
1786   FD6F             ; 1044     param2 = a;
1787   FD6F 32 53 F7    	ld (param2), a
1788   FD72             ; 1045     for (;;) {
1789   FD72             l_82: 
1790   FD72             ; 1046         ReadTapeByte(a = READ_TAPE_NEXT_BYTE);
1791   FD72 3E 08       	ld a, 8
1792   FD74 CD 95 FD    	call readtapebyte
1793   FD77             ; 1047         hl = param1;
1794   FD77 2A 51 F7    	ld hl, (param1)
1795   FD7A             ; 1048         if (a != *hl) {
1796   FD7A BE          	cp (hl)
1797   FD7B CA 8F FD    	jp z, l_84
1798   FD7E             ; 1049             push_pop(a) {
1799   FD7E F5          	push af
1800   FD7F             ; 1050                 PrintLfParam1();
1801   FD7F CD 68 F9    	call printlfparam1
1802   FD82             ; 1051                 PrintSpace();
1803   FD82 CD 77 F9    	call printspace
1804   FD85             ; 1052                 PrintByteFromParam1();
1805   FD85 CD 4C F9    	call printbytefromparam1
1806   FD88             ; 1053                 PrintSpace();
1807   FD88 CD 77 F9    	call printspace
1808   FD8B F1          	pop af
1809   FD8C             ; 1054             }
1810   FD8C             ; 1055             PrintHexByte();
1811   FD8C CD 50 F9    	call printhexbyte
1812   FD8F             l_84: 
1813   FD8F             ; 1056         }
1814   FD8F             ; 1057         Loop();
1815   FD8F CD 7C F9    	call loop
1816   FD92 C3 72 FD    	jp l_82
1817   FD95             ; 1058     }
1818   FD95             ; 1059 }
1819   FD95             ; 1060 
1820   FD95             ; 1061 void ReadTapeByte(...) {
1821   FD95             readtapebyte: 
1822   FD95             ; 1062     push(bc, de);
1823   FD95 C5          	push bc
1824   FD96 D5          	push de
1825   FD97             ; 1063     c = 0;
1826   FD97 0E 00       	ld c, 0
1827   FD99             ; 1064     d = a;
1828   FD99 57          	ld d, a
1829   FD9A             ; 1065     e = a = in(PORT_TAPE);
1830   FD9A DB 01       	in a, (1)
1831   FD9C 5F          	ld e, a
1832   FD9D             ; 1066     do {
1833   FD9D             l_86: 
1834   FD9D             ; 1067     loc_FD9D:
1835   FD9D             loc_fd9d: 
1836   FD9D             ; 1068         a = c;
1837   FD9D 79          	ld a, c
1838   FD9E             ; 1069         a &= 0x7F;
1839   FD9E E6 7F       	and 127
1840   FDA0             ; 1070         cyclic_rotate_left(a, 1);
1841   FDA0 07          	rlca
1842   FDA1             ; 1071         c = a;
1843   FDA1 4F          	ld c, a
1844   FDA2             ; 1072 
1845   FDA2             ; 1073         do {
1846   FDA2             l_89: 
1847   FDA2             ; 1074             a = in(PORT_TAPE);
1848   FDA2 DB 01       	in a, (1)
1849   FDA4             l_90: 
1850   FDA4             ; 1075         } while (a == e);
1851   FDA4 BB          	cp e
1852   FDA5 CA A2 FD    	jp z, l_89
1853   FDA8             ; 1076         a &= 1;
1854   FDA8 E6 01       	and 1
1855   FDAA             ; 1077         a |= c;
1856   FDAA B1          	or c
1857   FDAB             ; 1078         c = a;
1858   FDAB 4F          	ld c, a
1859   FDAC             ; 1079         ReadTapeDelay();
1860   FDAC CD DB FD    	call readtapedelay
1861   FDAF             ; 1080         e = a = in(PORT_TAPE);
1862   FDAF DB 01       	in a, (1)
1863   FDB1 5F          	ld e, a
1864   FDB2             ; 1081         if (flag_m((a = d) |= a)) {
1865   FDB2 7A          	ld a, d
1866   FDB3 B7          	or a
1867   FDB4 F2 D0 FD    	jp p, l_92
1868   FDB7             ; 1082             if ((a = c) == TAPE_START) {
1869   FDB7 79          	ld a, c
1870   FDB8 FE E6       	cp 230
1871   FDBA C2 C4 FD    	jp nz, l_94
1872   FDBD             ; 1083                 tapePolarity = (a ^= a);
1873   FDBD AF          	xor a
1874   FDBE 32 57 F7    	ld (tapepolarity), a
1875   FDC1 C3 CE FD    	jp l_95
1876   FDC4             l_94: 
1877   FDC4             ; 1084             } else {
1878   FDC4             ; 1085                 if (a != (0xFF ^ TAPE_START))
1879   FDC4 FE 19       	cp 25
1880   FDC6             ; 1086                     goto loc_FD9D;
1881   FDC6 C2 9D FD    	jp nz, loc_fd9d
1882   FDC9             ; 1087                 tapePolarity = a = 0xFF;
1883   FDC9 3E FF       	ld a, 255
1884   FDCB 32 57 F7    	ld (tapepolarity), a
1885   FDCE             l_95: 
1886   FDCE             ; 1088             }
1887   FDCE             ; 1089             d = 8 + 1;
1888   FDCE 16 09       	ld d, 9
1889   FDD0             l_92: 
1890   FDD0             l_87: 
1891   FDD0             ; 1090         }
1892   FDD0             ; 1091     } while (flag_nz(d--));
1893   FDD0 15          	dec d
1894   FDD1 C2 9D FD    	jp nz, l_86
1895   FDD4             ; 1092     a = tapePolarity;
1896   FDD4 3A 57 F7    	ld a, (tapepolarity)
1897   FDD7             ; 1093     a ^= c;
1898   FDD7 A9          	xor c
1899   FDD8             ; 1094     pop(bc, de);
1900   FDD8 D1          	pop de
1901   FDD9 C1          	pop bc
1902   FDDA C9          	ret
1903   FDDB             ; 1095 }
1904   FDDB             ; 1096 
1905   FDDB             ; 1097 void ReadTapeDelay(...) {
1906   FDDB             readtapedelay: 
1907   FDDB             ; 1098     push(a);
1908   FDDB F5          	push af
1909   FDDC             ; 1099     TapeDelay(a = readDelay);
1910   FDDC 3A 5C F7    	ld a, (readdelay)
1911   FDDF             ; 1100 }
1912   FDDF             ; 1101 
1913   FDDF             ; 1102 void TapeDelay(...) {
1914   FDDF             tapedelay: 
1915   FDDF             ; 1103     b = a;
1916   FDDF 47          	ld b, a
1917   FDE0             ; 1104     pop(a);
1918   FDE0 F1          	pop af
1919   FDE1             ; 1105     do {
1920   FDE1             l_96: 
1921   FDE1             l_97: 
1922   FDE1             ; 1106     } while (flag_nz(b--));
1923   FDE1 05          	dec b
1924   FDE2 C2 E1 FD    	jp nz, l_96
1925   FDE5 C9          	ret
1926   FDE6             ; 1107 }
1927   FDE6             ; 1108 
1928   FDE6             ; 1109 void WriteTapeByte(...) {
1929   FDE6             writetapebyte: 
1930   FDE6             ; 1110     push_pop(bc, de, a) {
1931   FDE6 C5          	push bc
1932   FDE7 D5          	push de
1933   FDE8 F5          	push af
1934   FDE9             ; 1111         d = a;
1935   FDE9 57          	ld d, a
1936   FDEA             ; 1112         c = 8;
1937   FDEA 0E 08       	ld c, 8
1938   FDEC             ; 1113         do {
1939   FDEC             l_99: 
1940   FDEC             ; 1114             a = d;
1941   FDEC 7A          	ld a, d
1942   FDED             ; 1115             cyclic_rotate_left(a, 1);
1943   FDED 07          	rlca
1944   FDEE             ; 1116             d = a;
1945   FDEE 57          	ld d, a
1946   FDEF             ; 1117 
1947   FDEF             ; 1118             out(PORT_TAPE, (a = 1) ^= d);
1948   FDEF 3E 01       	ld a, 1
1949   FDF1 AA          	xor d
1950   FDF2 D3 01       	out (1), a
1951   FDF4             ; 1119             WriteTapeDelay();
1952   FDF4 CD 07 FE    	call writetapedelay
1953   FDF7             ; 1120 
1954   FDF7             ; 1121             out(PORT_TAPE, (a = 0) ^= d);
1955   FDF7 3E 00       	ld a, 0
1956   FDF9 AA          	xor d
1957   FDFA D3 01       	out (1), a
1958   FDFC             ; 1122             WriteTapeDelay();
1959   FDFC CD 07 FE    	call writetapedelay
1960   FDFF             l_100: 
1961   FDFF             ; 1123         } while (flag_nz(c--));
1962   FDFF 0D          	dec c
1963   FE00 C2 EC FD    	jp nz, l_99
1964   FE03 F1          	pop af
1965   FE04 D1          	pop de
1966   FE05 C1          	pop bc
1967   FE06 C9          	ret
1968   FE07             ; 1124     }
1969   FE07             ; 1125 }
1970   FE07             ; 1126 
1971   FE07             ; 1127 void WriteTapeDelay(...) {
1972   FE07             writetapedelay: 
1973   FE07             ; 1128     push(a);
1974   FE07 F5          	push af
1975   FE08             ; 1129     TapeDelay(a = writeDelay);
1976   FE08 3A 5D F7    	ld a, (writedelay)
1977   FE0B C3 DF FD    	jp tapedelay
1978   FE0E             ; 1130 }
1979   FE0E             ; 1131 
1980   FE0E             ; 1132 uint8_t monitorCommands = 'M';
1981   FE0E             monitorcommands: 
1982   FE0E 4D          	db 77
1983   FE0F             ; 1133  monitorCommandsMa = (uintptr_t)&CmdM;
1984   FE0F             monitorcommandsma: 
1985   FE0F E3 FB       	dw 0FFFFh & (cmdm)
1986   FE11             ; 1134  monitorCommandsC = 'C';
1987   FE11             monitorcommandsc: 
1988   FE11 43          	db 67
1989   FE12             ; 1135  monitorCommandsCa = (uintptr_t)&CmdC;
1990   FE12             monitorcommandsca: 
1991   FE12 87 FB       	dw 0FFFFh & (cmdc)
1992   FE14             ; 1136  monitorCommandsD = 'D';
1993   FE14             monitorcommandsd: 
1994   FE14 44          	db 68
1995   FE15             ; 1137  monitorCommandsDa = (uintptr_t)&CmdD;
1996   FE15             monitorcommandsda: 
1997   FE15 6A FB       	dw 0FFFFh & (cmdd)
1998   FE17             ; 1138  monitorCommandsB = 'B';
1999   FE17             monitorcommandsb: 
2000   FE17 42          	db 66
2001   FE18             ; 1139  monitorCommandsBa = (uintptr_t)&CmdB;
2002   FE18             monitorcommandsba: 
2003   FE18 53 FA       	dw 0FFFFh & (cmdb)
2004   FE1A             ; 1140  monitorCommandsG = 'G';
2005   FE1A             monitorcommandsg: 
2006   FE1A 47          	db 71
2007   FE1B             ; 1141  monitorCommandsGa = (uintptr_t)&CmdG;
2008   FE1B             monitorcommandsga: 
2009   FE1B C1 FA       	dw 0FFFFh & (cmdg)
2010   FE1D             ; 1142  monitorCommandsP = 'P';
2011   FE1D             monitorcommandsp: 
2012   FE1D 50          	db 80
2013   FE1E             ; 1143  monitorCommandsPa = (uintptr_t)&CmdP;
2014   FE1E             monitorcommandspa: 
2015   FE1E E5 FA       	dw 0FFFFh & (cmdp)
2016   FE20             ; 1144  monitorCommandsX = 'X';
2017   FE20             monitorcommandsx: 
2018   FE20 58          	db 88
2019   FE21             ; 1145  monitorCommandsXa = (uintptr_t)&CmdX;
2020   FE21             monitorcommandsxa: 
2021   FE21 99 F9       	dw 0FFFFh & (cmdx)
2022   FE23             ; 1146  monitorCommandsF = 'F';
2023   FE23             monitorcommandsf: 
2024   FE23 46          	db 70
2025   FE24             ; 1147  monitorCommandsFa = (uintptr_t)&CmdF;
2026   FE24             monitorcommandsfa: 
2027   FE24 AD FB       	dw 0FFFFh & (cmdf)
2028   FE26             ; 1148  monitorCommandsS = 'S';
2029   FE26             monitorcommandss: 
2030   FE26 53          	db 83
2031   FE27             ; 1149  monitorCommandsSa = (uintptr_t)&CmdS;
2032   FE27             monitorcommandssa: 
2033   FE27 BE FB       	dw 0FFFFh & (cmds)
2034   FE29             ; 1150  monitorCommandsT = 'T';
2035   FE29             monitorcommandst: 
2036   FE29 54          	db 84
2037   FE2A             ; 1151  monitorCommandsTa = (uintptr_t)&CmdT;
2038   FE2A             monitorcommandsta: 
2039   FE2A D0 FB       	dw 0FFFFh & (cmdt)
2040   FE2C             ; 1152  monitorCommandsI = 'I';
2041   FE2C             monitorcommandsi: 
2042   FE2C 49          	db 73
2043   FE2D             ; 1153  monitorCommandsIa = (uintptr_t)&CmdI;
2044   FE2D             monitorcommandsia: 
2045   FE2D CB FC       	dw 0FFFFh & (cmdi)
2046   FE2F             ; 1154  monitorCommandsO = 'O';
2047   FE2F             monitorcommandso: 
2048   FE2F 4F          	db 79
2049   FE30             ; 1155  monitorCommandsOa = (uintptr_t)&CmdO;
2050   FE30             monitorcommandsoa: 
2051   FE30 1B FD       	dw 0FFFFh & (cmdo)
2052   FE32             ; 1156  monitorCommandsV = 'V';
2053   FE32             monitorcommandsv: 
2054   FE32 56          	db 86
2055   FE33             ; 1157  monitorCommandsVa = (uintptr_t)&CmdV;
2056   FE33             monitorcommandsva: 
2057   FE33 52 FD       	dw 0FFFFh & (cmdv)
2058   FE35             ; 1158  monitorCommandsJ = 'J';
2059   FE35             monitorcommandsj: 
2060   FE35 4A          	db 74
2061   FE36             ; 1159  monitorCommandsJa = (uintptr_t)&CmdJ;
2062   FE36             monitorcommandsja: 
2063   FE36 06 FC       	dw 0FFFFh & (cmdj)
2064   FE38             ; 1160  monitorCommandsA = 'A';
2065   FE38             monitorcommandsa: 
2066   FE38 41          	db 65
2067   FE39             ; 1161  monitorCommandsAa = (uintptr_t)&CmdA;
2068   FE39             monitorcommandsaa: 
2069   FE39 0D FC       	dw 0FFFFh & (cmda)
2070   FE3B             ; 1162  monitorCommandsK = 'K';
2071   FE3B             monitorcommandsk: 
2072   FE3B 4B          	db 75
2073   FE3C             ; 1163  monitorCommandsKa = (uintptr_t)&CmdK;
2074   FE3C             monitorcommandska: 
2075   FE3C 19 FC       	dw 0FFFFh & (cmdk)
2076   FE3E             ; 1164  monitorCommandsQ = 'Q';
2077   FE3E             monitorcommandsq: 
2078   FE3E 51          	db 81
2079   FE3F             ; 1165  monitorCommandsQa = (uintptr_t)&CmdQ;
2080   FE3F             monitorcommandsqa: 
2081   FE3F 27 FC       	dw 0FFFFh & (cmdq)
2082   FE41             ; 1166  monitorCommandsL = 'L';
2083   FE41             monitorcommandsl: 
2084   FE41 4C          	db 76
2085   FE42             ; 1167  monitorCommandsLa = (uintptr_t)&CmdL;
2086   FE42             monitorcommandsla: 
2087   FE42 55 FC       	dw 0FFFFh & (cmdl)
2088   FE44             ; 1168  monitorCommandsH = 'H';
2089   FE44             monitorcommandsh: 
2090   FE44 48          	db 72
2091   FE45             ; 1169  monitorCommandsHa = (uintptr_t)&CmdH;
2092   FE45             monitorcommandsha: 
2093   FE45 85 FC       	dw 0FFFFh & (cmdh)
2094   FE47             ; 1170  monitorCommandsEnd = 0;
2095   FE47             monitorcommandsend: 
2096   FE47 00          	db 0
2097   FE48             ; 1172  aPrompt[] = "\x0A*MИКРO/80* MONITOR\x0A>";
2098   FE48             aprompt: 
2099   FE48 0A          	db 10
2100   FE49 2A          	db 42
2101   FE4A 4D          	db 77
2102   FE4B 69          	db 105
2103   FE4C 6B          	db 107
2104   FE4D 72          	db 114
2105   FE4E 4F          	db 79
2106   FE4F 2F          	db 47
2107   FE50 38          	db 56
2108   FE51 30          	db 48
2109   FE52 2A          	db 42
2110   FE53 20          	db 32
2111   FE54 4D          	db 77
2112   FE55 4F          	db 79
2113   FE56 4E          	db 78
2114   FE57 49          	db 73
2115   FE58 54          	db 84
2116   FE59 4F          	db 79
2117   FE5A 52          	db 82
2118   FE5B 0A          	db 10
2119   FE5C 3E          	db 62
2120   FE5D 00          	ds 1
2121   FE5E             ; 1173  aLf[] = "\x0A";
2122   FE5E             alf: 
2123   FE5E 0A          	db 10
2124   FE5F 00          	ds 1
2125   FE60             ; 1175  PrintCharA(...) {
2126   FE60             printchara: 
2127   FE60             ; 1176     push(hl, bc, de, a);
2128   FE60 E5          	push hl
2129   FE61 C5          	push bc
2130   FE62 D5          	push de
2131   FE63 F5          	push af
2132   FE64             ; 1177     PrintCharInt(c = a);
2133   FE64 4F          	ld c, a
2134   FE65 C3 6C FE    	jp printcharint
2135   FE68             ; 1178 }
2136   FE68             ; 1179 
2137   FE68             ; 1180 void PrintChar(...) {
2138   FE68             printchar: 
2139   FE68             ; 1181     push(hl, bc, de, a);
2140   FE68 E5          	push hl
2141   FE69 C5          	push bc
2142   FE6A D5          	push de
2143   FE6B F5          	push af
2144   FE6C             ; 1182     return PrintCharInt(c);
2145   FE6C             ; 1183 }
2146   FE6C             ; 1184 
2147   FE6C             ; 1185 void PrintCharInt(...) {
2148   FE6C             printcharint: 
2149   FE6C             ; 1186     hl = cursor;
2150   FE6C 2A 5A F7    	ld hl, (cursor)
2151   FE6F             ; 1187     de = -(SCREEN_WIDTH * SCREEN_HEIGHT) + 1;
2152   FE6F 11 01 F8    	ld de, 63489
2153   FE72             ; 1188     hl += de;
2154   FE72 19          	add hl, de
2155   FE73             ; 1189     *hl = SCREEN_ATTRIB_DEFAULT;
2156   FE73 36 00       	ld (hl), 0
2157   FE75             ; 1190 
2158   FE75             ; 1191     hl = cursor;
2159   FE75 2A 5A F7    	ld hl, (cursor)
2160   FE78             ; 1192     a = c;
2161   FE78 79          	ld a, c
2162   FE79             ; 1193     if (a == 0x1F)
2163   FE79 FE 1F       	cp 31
2164   FE7B             ; 1194         return ClearScreen();
2165   FE7B CA C2 FE    	jp z, clearscreen
2166   FE7E             ; 1195     if (a == 0x08)
2167   FE7E FE 08       	cp 8
2168   FE80             ; 1196         return MoveCursorLeft(hl);
2169   FE80 CA E9 FE    	jp z, movecursorleft
2170   FE83             ; 1197     if (a == 0x18)
2171   FE83 FE 18       	cp 24
2172   FE85             ; 1198         return MoveCursorRight(hl);
2173   FE85 CA DF FE    	jp z, movecursorright
2174   FE88             ; 1199     if (a == 0x19)
2175   FE88 FE 19       	cp 25
2176   FE8A             ; 1200         return MoveCursorUp(hl);
2177   FE8A CA 05 FF    	jp z, movecursorup
2178   FE8D             ; 1201     if (a == 0x1A)
2179   FE8D FE 1A       	cp 26
2180   FE8F             ; 1202         return MoveCursorDown(hl);
2181   FE8F CA F6 FE    	jp z, movecursordown
2182   FE92             ; 1203     if (a == 0x0A)
2183   FE92 FE 0A       	cp 10
2184   FE94             ; 1204         return MoveCursorNextLine(hl);
2185   FE94 CA 16 FF    	jp z, movecursornextline
2186   FE97             ; 1205     if (a == 0x0C)
2187   FE97 FE 0C       	cp 12
2188   FE99             ; 1206         return MoveCursorHome();
2189   FE99 CA C5 FE    	jp z, movecursorhome
2190   FE9C             ; 1207 
2191   FE9C             ; 1208     if ((a = h) == SCREEN_END >> 8) {
2192   FE9C 7C          	ld a, h
2193   FE9D FE F0       	cp 65520
2194   FE9F C2 B2 FE    	jp nz, l_102
2195   FEA2             ; 1209         IsAnyKeyPressed();
2196   FEA2 CD EE FF    	call isanykeypressed
2197   FEA5             ; 1210         if (a != 0) {
2198   FEA5 B7          	or a
2199   FEA6 CA AC FE    	jp z, l_104
2200   FEA9             ; 1211             ReadKey();
2201   FEA9 CD 41 FF    	call readkey
2202   FEAC             l_104: 
2203   FEAC             ; 1212         }
2204   FEAC             ; 1213         ClearScreenInt();
2205   FEAC CD CB FE    	call clearscreenint
2206   FEAF             ; 1214         hl = SCREEN_BEGIN;
2207   FEAF 21 00 E8    	ld hl, 59392
2208   FEB2             l_102: 
2209   FEB2             ; 1215     }
2210   FEB2             ; 1216     *hl = c;
2211   FEB2 71          	ld (hl), c
2212   FEB3             ; 1217     hl++;
2213   FEB3 23          	inc hl
2214   FEB4             ; 1218     return MoveCursor();
2215   FEB4             ; 1219 }
2216   FEB4             ; 1220 
2217   FEB4             ; 1221 void MoveCursor(...) {
2218   FEB4             movecursor: 
2219   FEB4             ; 1222     cursor = hl;
2220   FEB4 22 5A F7    	ld (cursor), hl
2221   FEB7             ; 1223     de = -(SCREEN_WIDTH * SCREEN_HEIGHT) + 1;
2222   FEB7 11 01 F8    	ld de, 63489
2223   FEBA             ; 1224     hl += de;
2224   FEBA 19          	add hl, de
2225   FEBB             ; 1225     *hl = SCREEN_ATTRIB_DEFAULT | SCREEN_ATTRIB_UNDERLINE;
2226   FEBB 36 80       	ld (hl), 128
2227   FEBD             ; 1226     pop(hl, bc, de, a);
2228   FEBD F1          	pop af
2229   FEBE D1          	pop de
2230   FEBF C1          	pop bc
2231   FEC0 E1          	pop hl
2232   FEC1 C9          	ret
2233   FEC2             ; 1227 }
2234   FEC2             ; 1228 
2235   FEC2             ; 1229 void ClearScreen() {
2236   FEC2             clearscreen: 
2237   FEC2             ; 1230     ClearScreenInt();
2238   FEC2 CD CB FE    	call clearscreenint
2239   FEC5             ; 1231     MoveCursorHome();
2240   FEC5             ; 1232 }
2241   FEC5             ; 1233 
2242   FEC5             ; 1234 void MoveCursorHome() {
2243   FEC5             movecursorhome: 
2244   FEC5             ; 1235     MoveCursor(hl = SCREEN_BEGIN);
2245   FEC5 21 00 E8    	ld hl, 59392
2246   FEC8 C3 B4 FE    	jp movecursor
2247   FECB             ; 1236 }
2248   FECB             ; 1237 
2249   FECB             ; 1238 void ClearScreenInt() {
2250   FECB             clearscreenint: 
2251   FECB             ; 1239     hl = SCREEN_BEGIN;
2252   FECB 21 00 E8    	ld hl, 59392
2253   FECE             ; 1240     de = SCREEN_ATTRIB_BEGIN;
2254   FECE 11 00 E0    	ld de, 57344
2255   FED1             ; 1241     for (;;) {
2256   FED1             l_107: 
2257   FED1             ; 1242         *hl = ' ';
2258   FED1 36 20       	ld (hl), 32
2259   FED3             ; 1243         hl++;
2260   FED3 23          	inc hl
2261   FED4             ; 1244         a = 0;
2262   FED4 3E 00       	ld a, 0
2263   FED6             ; 1245         *de = a;
2264   FED6 12          	ld (de), a
2265   FED7             ; 1246         de++;
2266   FED7 13          	inc de
2267   FED8             ; 1247         a = h;
2268   FED8 7C          	ld a, h
2269   FED9             ; 1248         if (a == SCREEN_END >> 8)
2270   FED9 FE F0       	cp 65520
2271   FEDB             ; 1249             return;
2272   FEDB C8          	ret z
2273   FEDC C3 D1 FE    	jp l_107
2274   FEDF             ; 1250     }
2275   FEDF             ; 1251 }
2276   FEDF             ; 1252 
2277   FEDF             ; 1253 void MoveCursorRight(...) {
2278   FEDF             movecursorright: 
2279   FEDF             ; 1254     hl++;
2280   FEDF 23          	inc hl
2281   FEE0             ; 1255     if ((a = h) != SCREEN_END >> 8)
2282   FEE0 7C          	ld a, h
2283   FEE1 FE F0       	cp 65520
2284   FEE3             ; 1256         return MoveCursor(hl);
2285   FEE3 C2 B4 FE    	jp nz, movecursor
2286   FEE6             ; 1257     if (flag_z)  // Лишнее
2287   FEE6             ; 1258         return MoveCursorHome();
2288   FEE6 CA C5 FE    	jp z, movecursorhome
2289   FEE9             ; 1259     MoveCursorLeft(hl);  // Лишнее
2290   FEE9             ; 1260 }
2291   FEE9             ; 1261 
2292   FEE9             ; 1262 void MoveCursorLeft(...) {
2293   FEE9             movecursorleft: 
2294   FEE9             ; 1263     hl--;
2295   FEE9 2B          	dec hl
2296   FEEA             ; 1264     if ((a = h) != (SCREEN_BEGIN >> 8) - 1)
2297   FEEA 7C          	ld a, h
2298   FEEB FE E7       	cp 65511
2299   FEED             ; 1265         return MoveCursor(hl);
2300   FEED C2 B4 FE    	jp nz, movecursor
2301   FEF0             ; 1266     MoveCursor(hl = SCREEN_END - 1);
2302   FEF0 21 FF EF    	ld hl, 61439
2303   FEF3 C3 B4 FE    	jp movecursor
2304   FEF6             ; 1267 }
2305   FEF6             ; 1268 
2306   FEF6             ; 1269 void MoveCursorDown(...) {
2307   FEF6             movecursordown: 
2308   FEF6             ; 1270     hl += (de = SCREEN_WIDTH);
2309   FEF6 11 40 00    	ld de, 64
2310   FEF9 19          	add hl, de
2311   FEFA             ; 1271     if ((a = h) != SCREEN_END >> 8)
2312   FEFA 7C          	ld a, h
2313   FEFB FE F0       	cp 65520
2314   FEFD             ; 1272         return MoveCursor(hl);
2315   FEFD C2 B4 FE    	jp nz, movecursor
2316   FF00             ; 1273     h = SCREEN_BEGIN >> 8;
2317   FF00 26 E8       	ld h, 232
2318   FF02             ; 1274     MoveCursor(hl);
2319   FF02 C3 B4 FE    	jp movecursor
2320   FF05             ; 1275 }
2321   FF05             ; 1276 
2322   FF05             ; 1277 void MoveCursorUp(...) {
2323   FF05             movecursorup: 
2324   FF05             ; 1278     hl += (de = -SCREEN_WIDTH);
2325   FF05 11 C0 FF    	ld de, 65472
2326   FF08 19          	add hl, de
2327   FF09             ; 1279     if ((a = h) != (SCREEN_BEGIN >> 8) - 1)
2328   FF09 7C          	ld a, h
2329   FF0A FE E7       	cp 65511
2330   FF0C             ; 1280         return MoveCursor(hl);
2331   FF0C C2 B4 FE    	jp nz, movecursor
2332   FF0F             ; 1281     hl += (de = SCREEN_WIDTH * SCREEN_HEIGHT);
2333   FF0F 11 00 08    	ld de, 2048
2334   FF12 19          	add hl, de
2335   FF13             ; 1282     MoveCursor(hl);
2336   FF13 C3 B4 FE    	jp movecursor
2337   FF16             ; 1283 }
2338   FF16             ; 1284 
2339   FF16             ; 1285 void MoveCursorNextLine(...) {
2340   FF16             movecursornextline: 
2341   FF16             ; 1286     for (;;) {
2342   FF16             l_110: 
2343   FF16             ; 1287         hl++;
2344   FF16 23          	inc hl
2345   FF17             ; 1288         a = l;
2346   FF17 7D          	ld a, l
2347   FF18             ; 1289         if (a == SCREEN_WIDTH * 0)
2348   FF18 B7          	or a
2349   FF19             ; 1290             return MoveCursorNextLine1(hl);
2350   FF19 CA 2E FF    	jp z, movecursornextline1
2351   FF1C             ; 1291         if (a == SCREEN_WIDTH * 1)
2352   FF1C FE 40       	cp 64
2353   FF1E             ; 1292             return MoveCursorNextLine1(hl);
2354   FF1E CA 2E FF    	jp z, movecursornextline1
2355   FF21             ; 1293         if (a == SCREEN_WIDTH * 2)
2356   FF21 FE 80       	cp 128
2357   FF23             ; 1294             return MoveCursorNextLine1(hl);
2358   FF23 CA 2E FF    	jp z, movecursornextline1
2359   FF26             ; 1295         if (a == SCREEN_WIDTH * 3)
2360   FF26 FE C0       	cp 192
2361   FF28             ; 1296             return MoveCursorNextLine1(hl);
2362   FF28 CA 2E FF    	jp z, movecursornextline1
2363   FF2B C3 16 FF    	jp l_110
2364   FF2E             ; 1297     }
2365   FF2E             ; 1298 }
2366   FF2E             ; 1299 
2367   FF2E             ; 1300 void MoveCursorNextLine1(...) {
2368   FF2E             movecursornextline1: 
2369   FF2E             ; 1301     if ((a = h) != SCREEN_END >> 8)
2370   FF2E 7C          	ld a, h
2371   FF2F FE F0       	cp 65520
2372   FF31             ; 1302         return MoveCursor(hl);
2373   FF31 C2 B4 FE    	jp nz, movecursor
2374   FF34             ; 1303 
2375   FF34             ; 1304     IsAnyKeyPressed();
2376   FF34 CD EE FF    	call isanykeypressed
2377   FF37             ; 1305     if (a == 0)
2378   FF37 B7          	or a
2379   FF38             ; 1306         return ClearScreen();
2380   FF38 CA C2 FE    	jp z, clearscreen
2381   FF3B             ; 1307     ReadKey();
2382   FF3B CD 41 FF    	call readkey
2383   FF3E             ; 1308     ClearScreen();
2384   FF3E C3 C2 FE    	jp clearscreen
2385   FF41             ; 1309 }
2386   FF41             ; 1310 
2387   FF41             ; 1311 void ReadKey() {
2388   FF41             readkey: 
2389   FF41             ; 1312     push(bc, de, hl);
2390   FF41 C5          	push bc
2391   FF42 D5          	push de
2392   FF43 E5          	push hl
2393   FF44             ; 1313 
2394   FF44             ; 1314     for (;;) {
2395   FF44             l_113: 
2396   FF44             ; 1315         b = 0;
2397   FF44 06 00       	ld b, 0
2398   FF46             ; 1316         c = 1 ^ 0xFF;
2399   FF46 0E FE       	ld c, 254
2400   FF48             ; 1317         d = KEYBOARD_COLUMN_COUNT;
2401   FF48 16 08       	ld d, 8
2402   FF4A             ; 1318         do {
2403   FF4A             l_115: 
2404   FF4A             ; 1319             out(PORT_KEYBOARD_COLUMN, a = c);
2405   FF4A 79          	ld a, c
2406   FF4B D3 07       	out (7), a
2407   FF4D             ; 1320             cyclic_rotate_left(a, 1);
2408   FF4D 07          	rlca
2409   FF4E             ; 1321             c = a;
2410   FF4E 4F          	ld c, a
2411   FF4F             ; 1322             a = in(PORT_KEYBOARD_ROW);
2412   FF4F DB 06       	in a, (6)
2413   FF51             ; 1323             a &= KEYBOARD_ROW_MASK;
2414   FF51 E6 7F       	and 127
2415   FF53             ; 1324             if (a != KEYBOARD_ROW_MASK)
2416   FF53 FE 7F       	cp 127
2417   FF55             ; 1325                 return ReadKey1(a, b);
2418   FF55 C2 63 FF    	jp nz, readkey1
2419   FF58             ; 1326             b = ((a = b) += KEYBOARD_ROW_COUNT);
2420   FF58 78          	ld a, b
2421   FF59 C6 07       	add 7
2422   FF5B 47          	ld b, a
2423   FF5C             l_116: 
2424   FF5C             ; 1327         } while (flag_nz(d--));
2425   FF5C 15          	dec d
2426   FF5D C2 4A FF    	jp nz, l_115
2427   FF60 C3 44 FF    	jp l_113
2428   FF63             ; 1328     }
2429   FF63             ; 1329 }
2430   FF63             ; 1330 
2431   FF63             ; 1331 void ReadKey1(...) {
2432   FF63             readkey1: 
2433   FF63             ; 1332     keyLast = a;
2434   FF63 32 64 F7    	ld (keylast), a
2435   FF66             ; 1333 
2436   FF66             ; 1334     for (;;) {
2437   FF66             l_119: 
2438   FF66             ; 1335         carry_rotate_right(a, 1);
2439   FF66 1F          	rra
2440   FF67             ; 1336         if (flag_nc)
2441   FF67             ; 1337             break;
2442   FF67 D2 6E FF    	jp nc, l_120
2443   FF6A             ; 1338         b++;
2444   FF6A 04          	inc b
2445   FF6B C3 66 FF    	jp l_119
2446   FF6E             l_120: 
2447   FF6E             ; 1339     }
2448   FF6E             ; 1340 
2449   FF6E             ; 1341     // b - key number
2450   FF6E             ; 1342 
2451   FF6E             ; 1343     //  0    0    1 !   2 "   3 #   4 $   5 %   6 &   7 ,
2452   FF6E             ; 1344     //  8   8 (   9 )   : *   ; +   , <   - =   . >   / ?
2453   FF6E             ; 1345     // 16   @ Ю   A А   B Б   C Ц   D Д   E Е   F Ф   G Г
2454   FF6E             ; 1346     // 24   H Х   I И   J Й   K К   L Л   M М   N Н   O О
2455   FF6E             ; 1347     // 32   P П   Q Я   R Р   S С   T Т   U У   V Ж   W В
2456   FF6E             ; 1348     // 40   X Ь   Y Ы   Z З   [ Ш   \ Э   ] Щ   ^ Ч    _
2457   FF6E             ; 1349     // 48   Space Right Left  Up    Down  Vk    Str   Home
2458   FF6E             ; 1350 
2459   FF6E             ; 1351     a = b;
2460   FF6E 78          	ld a, b
2461   FF6F             ; 1352     if (a < 48) {
2462   FF6F FE 30       	cp 48
2463   FF71 D2 86 FF    	jp nc, l_121
2464   FF74             ; 1353         a += '0';
2465   FF74 C6 30       	add 48
2466   FF76             ; 1354         if (a >= 0x3C)
2467   FF76 FE 3C       	cp 60
2468   FF78             ; 1355             if (a < 0x40)
2469   FF78 DA 82 FF    	jp c, l_123
2470   FF7B FE 40       	cp 64
2471   FF7D             ; 1356                 a &= 0x2F;  // <=>? to .-./
2472   FF7D D2 82 FF    	jp nc, l_125
2473   FF80 E6 2F       	and 47
2474   FF82             l_125: 
2475   FF82             l_123: 
2476   FF82             ; 1357         c = a;
2477   FF82 4F          	ld c, a
2478   FF83 C3 93 FF    	jp l_122
2479   FF86             l_121: 
2480   FF86             ; 1358     } else {
2481   FF86             ; 1359         hl = &keyTable;
2482   FF86 21 E6 FF    	ld hl, keytable
2483   FF89             ; 1360         a -= 48;
2484   FF89 D6 30       	sub 48
2485   FF8B             ; 1361         c = a;
2486   FF8B 4F          	ld c, a
2487   FF8C             ; 1362         b = 0;
2488   FF8C 06 00       	ld b, 0
2489   FF8E             ; 1363         hl += bc;
2490   FF8E 09          	add hl, bc
2491   FF8F             ; 1364         a = *hl;
2492   FF8F 7E          	ld a, (hl)
2493   FF90             ; 1365         return ReadKey2(a);
2494   FF90 C3 C7 FF    	jp readkey2
2495   FF93             l_122: 
2496   FF93             ; 1366     }
2497   FF93             ; 1367 
2498   FF93             ; 1368     a = in(PORT_KEYBOARD_MODS);
2499   FF93 DB 05       	in a, (5)
2500   FF95             ; 1369     a &= KEYBOARD_MODS_MASK;
2501   FF95 E6 07       	and 7
2502   FF97             ; 1370     if (a == KEYBOARD_MODS_MASK)
2503   FF97 FE 07       	cp 7
2504   FF99             ; 1371         goto ReadKeyNoMods;
2505   FF99 CA C6 FF    	jp z, readkeynomods
2506   FF9C             ; 1372     carry_rotate_right(a, 2);
2507   FF9C 1F          	rra
2508   FF9D 1F          	rra
2509   FF9E             ; 1373     if (flag_nc)
2510   FF9E             ; 1374         goto ReadKeyControl;
2511   FF9E D2 AB FF    	jp nc, readkeycontrol
2512   FFA1             ; 1375     carry_rotate_right(a, 1);
2513   FFA1 1F          	rra
2514   FFA2             ; 1376     if (flag_nc)
2515   FFA2             ; 1377         goto ReadKeyShift;
2516   FFA2 D2 B1 FF    	jp nc, readkeyshift
2517   FFA5             ; 1378 
2518   FFA5             ; 1379     // RUS key pressed
2519   FFA5             ; 1380     a = c;
2520   FFA5 79          	ld a, c
2521   FFA6             ; 1381     a |= 0x20;
2522   FFA6 F6 20       	or 32
2523   FFA8             ; 1382     return ReadKey2(a);
2524   FFA8 C3 C7 FF    	jp readkey2
2525   FFAB             ; 1383 
2526   FFAB             ; 1384     // US (Control) key pressed
2527   FFAB             ; 1385 ReadKeyControl:
2528   FFAB             readkeycontrol: 
2529   FFAB             ; 1386     a = c;
2530   FFAB 79          	ld a, c
2531   FFAC             ; 1387     a &= 0x1F;
2532   FFAC E6 1F       	and 31
2533   FFAE             ; 1388     return ReadKey2(a);
2534   FFAE C3 C7 FF    	jp readkey2
2535   FFB1             ; 1389 
2536   FFB1             ; 1390     // SS (Shift) key pressed
2537   FFB1             ; 1391 ReadKeyShift:
2538   FFB1             readkeyshift: 
2539   FFB1             ; 1392     a = c;
2540   FFB1 79          	ld a, c
2541   FFB2             ; 1393     if (a >= 0x40)  // @ A-Z [ \ ] ^ _
2542   FFB2 FE 40       	cp 64
2543   FFB4             ; 1394         return ReadKey2(a);
2544   FFB4 D2 C7 FF    	jp nc, readkey2
2545   FFB7             ; 1395     if (a < 0x30) {  // .-./ to <=>?
2546   FFB7 FE 30       	cp 48
2547   FFB9 D2 C1 FF    	jp nc, l_127
2548   FFBC             ; 1396         a |= 0x10;
2549   FFBC F6 10       	or 16
2550   FFBE             ; 1397         return ReadKey2(a);
2551   FFBE C3 C7 FF    	jp readkey2
2552   FFC1             l_127: 
2553   FFC1             ; 1398     }
2554   FFC1             ; 1399     a &= 0x2F;  // 0123456789:; to !@#$%&'()*+
2555   FFC1 E6 2F       	and 47
2556   FFC3             ; 1400     return ReadKey2(a);
2557   FFC3 C3 C7 FF    	jp readkey2
2558   FFC6             ; 1401 
2559   FFC6             ; 1402 ReadKeyNoMods:
2560   FFC6             readkeynomods: 
2561   FFC6             ; 1403     ReadKey2(a = c);
2562   FFC6 79          	ld a, c
2563   FFC7             ; 1404 }
2564   FFC7             ; 1405 
2565   FFC7             ; 1406 void ReadKey2(...) {
2566   FFC7             readkey2: 
2567   FFC7             ; 1407     c = a;
2568   FFC7 4F          	ld c, a
2569   FFC8             ; 1408 
2570   FFC8             ; 1409     ReadKeyDelay();
2571   FFC8 CD DC FF    	call readkeydelay
2572   FFCB             ; 1410 
2573   FFCB             ; 1411     hl = &keyLast;
2574   FFCB 21 64 F7    	ld hl, 0FFFFh & (keylast)
2575   FFCE             ; 1412     do {
2576   FFCE             l_129: 
2577   FFCE             ; 1413         a = in(PORT_KEYBOARD_ROW);
2578   FFCE DB 06       	in a, (6)
2579   FFD0             l_130: 
2580   FFD0             ; 1414     } while (a == *hl);
2581   FFD0 BE          	cp (hl)
2582   FFD1 CA CE FF    	jp z, l_129
2583   FFD4             ; 1415 
2584   FFD4             ; 1416     ReadKeyDelay();
2585   FFD4 CD DC FF    	call readkeydelay
2586   FFD7             ; 1417 
2587   FFD7             ; 1418     a = c;
2588   FFD7 79          	ld a, c
2589   FFD8             ; 1419     pop(bc, de, hl);
2590   FFD8 E1          	pop hl
2591   FFD9 D1          	pop de
2592   FFDA C1          	pop bc
2593   FFDB C9          	ret
2594   FFDC             ; 1420 }
2595   FFDC             ; 1421 
2596   FFDC             ; 1422 void ReadKeyDelay() {
2597   FFDC             readkeydelay: 
2598   FFDC             ; 1423     de = 0x1000;
2599   FFDC 11 00 10    	ld de, 4096
2600   FFDF             ; 1424     for (;;) {
2601   FFDF             l_133: 
2602   FFDF             ; 1425         de--;
2603   FFDF 1B          	dec de
2604   FFE0             ; 1426         if (flag_z((a = d) |= e))
2605   FFE0 7A          	ld a, d
2606   FFE1 B3          	or e
2607   FFE2             ; 1427             return;
2608   FFE2 C8          	ret z
2609   FFE3 C3 DF FF    	jp l_133
2610   FFE6             ; 1428     }
2611   FFE6             ; 1429 }
2612   FFE6             ; 1430 
2613   FFE6             ; 1431 uint8_t keyTable[] = {
2614   FFE6             keytable: 
2615   FFE6 20          	db 32
2616   FFE7 18          	db 24
2617   FFE8 08          	db 8
2618   FFE9 19          	db 25
2619   FFEA 1A          	db 26
2620   FFEB 0D          	db 13
2621   FFEC 1F          	db 31
2622   FFED 0C          	db 12
2623   FFEE             ; 1442  IsAnyKeyPressed() {
2624   FFEE             isanykeypressed: 
2625   FFEE             ; 1443     out(PORT_KEYBOARD_COLUMN, a = 0);
2626   FFEE 3E 00       	ld a, 0
2627   FFF0 D3 07       	out (7), a
2628   FFF2             ; 1444     a = in(PORT_KEYBOARD_ROW);
2629   FFF2 DB 06       	in a, (6)
2630   FFF4             ; 1445     a &= KEYBOARD_ROW_MASK;
2631   FFF4 E6 7F       	and 127
2632   FFF6             ; 1446     if (a == KEYBOARD_ROW_MASK) {
2633   FFF6 FE 7F       	cp 127
2634   FFF8 C2 FD FF    	jp nz, l_135
2635   FFFB             ; 1447         a ^= a;  // Returns 0 if no key is pressed
2636   FFFB AF          	xor a
2637   FFFC             ; 1448         return;
2638   FFFC C9          	ret
2639   FFFD             l_135: 
2640   FFFD             ; 1449     }
2641   FFFD             ; 1450     a = 0xFF;  // Returns 0xFF if there are any keys pressed
2642   FFFD 3E FF       	ld a, 255
2643   FFFF C9          	ret
2644   0000              savebin "micro80.bin", 0xF800, 0x10000
2645   0000             
